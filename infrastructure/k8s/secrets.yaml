apiVersion: v1
kind: Secret
metadata:
  name: memmimic-secrets
  namespace: memmimic
type: Opaque
data:
  # Base64 encoded secrets - in production, use external secret management
  # Database passwords
  db_password: bWVtbWltaWNfc2VjdXJlX3Bhc3N3b3JkXzIwMjU= # memmimic_secure_password_2025
  replication_password: cmVwbGljYXRpb25fc2VjdXJlX3B3ZF8yMDI1 # replication_secure_pwd_2025
  
  # Redis password
  redis_password: cmVkaXNfc2VjdXJlX3Bhc3N3b3JkXzIwMjU= # redis_secure_password_2025
  
  # JWT secrets for API authentication
  jwt_secret: and0X3NlY3JldF9rZXlfZm9yX21lbW1pbWljX2FwaV8yMDI1 # jwt_secret_key_for_memmimic_api_2025
  
  # Monitoring passwords
  grafana_password: Z3JhZmFuYV9hZG1pbl9wYXNzd29yZF8yMDI1 # grafana_admin_password_2025
  
  # External service API keys (if needed)
  openai_api_key: "" # Add if using OpenAI services
  anthropic_api_key: "" # Add if using Anthropic services

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: memmimic
type: Opaque
data:
  username: bWVtbWltaWM= # memmimic
  password: bWVtbWltaWNfc2VjdXJlX3Bhc3N3b3JkXzIwMjU= # memmimic_secure_password_2025
  replication_username: cmVwbGljYXRvcg== # replicator
  replication_password: cmVwbGljYXRpb25fc2VjdXJlX3B3ZF8yMDI1 # replication_secure_pwd_2025

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: memmimic
type: kubernetes.io/tls
data:
  # Production TLS certificates - replace with real certificates
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
    # Add your base64 encoded certificate here
    LS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
    # Add your base64 encoded private key here
    LS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==

---
# Service Account for MemMimic services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: memmimic-service-account
  namespace: memmimic
  labels:
    app.kubernetes.io/name: memmimic
    app.kubernetes.io/component: service-account

---
# Cluster Role for MemMimic services
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: memmimic-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list"]

---
# Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: memmimic-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: memmimic-service-account
    namespace: memmimic
roleRef:
  kind: ClusterRole
  name: memmimic-cluster-role
  apiGroup: rbac.authorization.k8s.io

---
# Pod Security Policy (if PSP is enabled)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: memmimic-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false