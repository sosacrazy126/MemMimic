name: MemMimic Production CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep ruff mypy
        pip install -r requirements.txt
    
    - name: Run Bandit Security Scan
      run: bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety Vulnerability Scan
      run: safety check --json --output safety-report.json || true
    
    - name: Run Semgrep SAST
      run: |
        semgrep --config=auto src/ --json --output semgrep-report.json || true
    
    - name: Run Ruff Linter
      run: ruff check src/ --output-format=github
    
    - name: Run MyPy Type Checker
      run: mypy src/ --ignore-missing-imports
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_memmimic
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-xdist
        pip install -r requirements.txt
    
    - name: Set up test database
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_memmimic
      run: |
        python infrastructure/database/migrations/001_sqlite_to_postgres.py --init-only
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_memmimic
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        pytest tests/ -v --cov=src/memmimic --cov-report=xml --cov-report=html -n auto
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_memmimic
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx
        pip install -r requirements.txt
    
    - name: Start services
      run: |
        docker-compose -f infrastructure/docker-compose.yml up -d postgres redis
        sleep 10
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_memmimic
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: ${{ github.workspace }}/src
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Cleanup
      run: docker-compose -f infrastructure/docker-compose.yml down

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests]
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - memory-service
          - classification-service
          - search-service
          - tale-service
          - consciousness-service
          - api-gateway
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: infrastructure/docker/Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.meta.outputs.version }}
          BUILD_DATE=${{ steps.meta.outputs.build-date }}
          VCS_REF=${{ github.sha }}

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-images]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        docker-compose -f infrastructure/docker-compose.yml up -d
        sleep 60  # Wait for services to start
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run tests/performance/load_test.js
    
    - name: Cleanup
      run: docker-compose -f infrastructure/docker-compose.yml down

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, build-images]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.memmimic.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}
    
    - name: Deploy to staging
      run: |
        # Update image tags in K8s manifests
        sed -i "s|memmimic/.*:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" infrastructure/k8s/*.yaml
        
        # Apply K8s manifests
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/configmap.yaml
        kubectl apply -f infrastructure/k8s/secrets.yaml
        kubectl apply -f infrastructure/k8s/postgres-cluster.yaml
        kubectl apply -f infrastructure/k8s/redis-cluster.yaml
        kubectl apply -f infrastructure/k8s/memmimic-services.yaml
        kubectl apply -f infrastructure/k8s/api-gateway.yaml
        kubectl apply -f infrastructure/k8s/monitoring.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/api-gateway -n memmimic --timeout=600s
    
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://staging.memmimic.com/health || exit 1

  # Security Scan on Images
  image-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build-images]
    permissions:
      security-events: write
    
    strategy:
      matrix:
        service:
          - memory-service
          - classification-service
          - search-service
          - tale-service
          - consciousness-service
          - api-gateway
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-tests, image-security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://memmimic.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}
    
    - name: Blue-Green Deployment
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Update image tags in K8s manifests
        sed -i "s|memmimic/.*:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}|g" infrastructure/k8s/*.yaml
        
        # Blue-green deployment strategy
        kubectl apply -f infrastructure/k8s/namespace.yaml
        kubectl apply -f infrastructure/k8s/configmap.yaml
        kubectl apply -f infrastructure/k8s/secrets.yaml
        
        # Deploy green environment
        kubectl apply -f infrastructure/k8s/ --selector=environment!=blue
        
        # Wait for green deployment
        kubectl rollout status deployment/api-gateway -n memmimic --timeout=600s
        
        # Health check
        sleep 60
        kubectl exec -n memmimic deployment/api-gateway -- curl -f http://localhost:8000/health
        
        # Switch traffic to green (this would involve updating ingress/service)
        # kubectl patch service api-gateway -n memmimic -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Clean up blue environment after successful deployment
        # kubectl delete deployment api-gateway-blue -n memmimic
    
    - name: Run production smoke tests
      run: |
        curl -f https://memmimic.com/health || exit 1
        curl -f https://api.memmimic.com/status || exit 1

  # Notify deployment
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy-production.result }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow