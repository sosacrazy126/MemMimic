{
  "overall_statistics": {
    "total_modules": 89,
    "modules_with_tests": 89,
    "modules_without_tests": 0,
    "total_classes": 282,
    "total_functions": 1516,
    "tested_classes": 123,
    "tested_functions": 382,
    "overall_coverage_percentage": 28.086763070077865
  },
  "phase_analysis": {
    "phase1_security": {
      "modules": 7,
      "coverage": 25.34246575342466
    },
    "phase2_performance": {
      "modules": 17,
      "coverage": 40.37854889589905
    }
  },
  "gaps_analysis": {
    "critical_gaps": [
      "Critical module low coverage (10.0%): memmimic.memory.importance_scorer",
      "Critical module low coverage (0.0%): memmimic.cxd.core.config",
      "Critical module low coverage (11.5%): memmimic.cxd.core.types",
      "Critical module low coverage (2.8%): memmimic.cxd.core.canonical",
      "Critical module low coverage (22.8%): memmimic.cxd.core.interfaces"
    ],
    "major_gaps": [
      "Module low coverage (40.0%): memmimic.config",
      "Module low coverage (13.3%): memmimic.assistant",
      "Module low coverage (16.0%): memmimic.security.audit",
      "Module low coverage (0.0%): memmimic.security.schemas",
      "Module low coverage (12.0%): memmimic.security.config",
      "Module low coverage (42.9%): memmimic.security.validation",
      "Module low coverage (47.1%): memmimic.security.sanitization",
      "Module low coverage (35.0%): memmimic.consciousness.shadow_detector",
      "Module low coverage (28.6%): memmimic.consciousness.consciousness_coordinator",
      "Module low coverage (16.7%): memmimic.consciousness.rup_engine",
      "Module low coverage (33.3%): memmimic.consciousness.sigil_engine",
      "Module low coverage (21.1%): memmimic.consciousness.living_prompts",
      "Module low coverage (20.0%): memmimic.local.client",
      "Module low coverage (19.4%): memmimic.errors.context",
      "Module low coverage (17.9%): memmimic.tales.tale_manager",
      "Module low coverage (11.1%): memmimic.config.security",
      "Module low coverage (7.1%): memmimic.memory.quality_gate",
      "Module low coverage (10.0%): memmimic.memory.semantic_similarity",
      "Module low coverage (6.7%): memmimic.memory.analytics_dashboard",
      "Module low coverage (4.0%): memmimic.memory.active_manager",
      "Module low coverage (7.7%): memmimic.memory.active_schema",
      "Module low coverage (10.0%): memmimic.memory.persistent_queue",
      "Module low coverage (8.3%): memmimic.memory.socratic",
      "Module low coverage (7.1%): memmimic.memory.pattern_analyzer",
      "Module low coverage (9.1%): memmimic.memory.predictive_manager",
      "Module low coverage (13.3%): memmimic.memory.assistant",
      "Module low coverage (3.8%): memmimic.memory.memory_consolidator",
      "Module low coverage (3.4%): memmimic.memory.stale_detector",
      "Module low coverage (5.9%): memmimic.mcp.enhanced_mcp_wrapper",
      "Module low coverage (12.5%): memmimic.mcp.memmimic_socratic",
      "Module low coverage (20.0%): memmimic.mcp.memmimic_status",
      "Module low coverage (33.3%): memmimic.mcp.memmimic_delete_memory_guided",
      "Module low coverage (13.8%): memmimic.mcp.memmimic_recall_cxd",
      "Module low coverage (40.0%): memmimic.mcp.memmimic_tales",
      "Module low coverage (33.3%): memmimic.mcp.memmimic_update_memory_guided",
      "Module low coverage (18.2%): memmimic.mcp.mcp_performance_monitor",
      "Module low coverage (10.0%): memmimic.mcp.memmimic_analyze_patterns",
      "Module low coverage (25.0%): memmimic.mcp.memmimic_remember",
      "Module low coverage (25.0%): memmimic.mcp.memmimic_save_tale",
      "Module low coverage (11.1%): memmimic.mcp.memmimic_remember_with_quality",
      "Module low coverage (47.6%): memmimic.utils.caching",
      "Module low coverage (30.0%): memmimic.mcp.handlers.response_formatter",
      "Module low coverage (40.0%): memmimic.mcp.handlers.recall_handler",
      "Module low coverage (40.0%): memmimic.mcp.handlers.mcp_base",
      "Module low coverage (45.0%): memmimic.memory.active.optimization_engine",
      "Module low coverage (36.0%): memmimic.memory.active.cache_manager",
      "Module low coverage (27.7%): memmimic.memory.active.indexing_engine",
      "Module low coverage (42.3%): memmimic.memory.active.performance_monitor",
      "Module low coverage (46.0%): memmimic.memory.active.interfaces",
      "Module low coverage (6.7%): memmimic.memory.search.search_config",
      "Module low coverage (33.3%): memmimic.memory.search.wordnet_expander",
      "Module low coverage (36.8%): memmimic.memory.search.cxd_integration",
      "Module low coverage (35.7%): memmimic.memory.search.response_formatter",
      "Module low coverage (14.3%): memmimic.memory.search.hybrid_search",
      "Module low coverage (16.0%): memmimic.memory.search.result_processor",
      "Module low coverage (38.9%): memmimic.memory.search.search_engine",
      "Module low coverage (47.1%): memmimic.memory.search.mcp_handlers",
      "Module low coverage (25.0%): memmimic.memory.search.semantic_processor",
      "Module low coverage (30.0%): memmimic.memory.search.vector_similarity",
      "Module low coverage (18.2%): memmimic.memory.search.result_combiner",
      "Module low coverage (29.6%): memmimic.cxd.providers.vector_store",
      "Module low coverage (5.3%): memmimic.cxd.providers.embedding_models",
      "Module low coverage (3.4%): memmimic.cxd.providers.examples",
      "Module low coverage (15.4%): memmimic.cxd.classifiers.lexical",
      "Module low coverage (12.5%): memmimic.cxd.classifiers.semantic",
      "Module low coverage (21.4%): memmimic.cxd.classifiers.meta",
      "Module low coverage (11.8%): memmimic.cxd.classifiers.optimized_semantic",
      "Module low coverage (23.1%): memmimic.cxd.classifiers.optimized_meta"
    ],
    "total_gaps": 73
  },
  "pytest_coverage": null,
  "detailed_coverage": {
    "memmimic.api": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/api.py",
        "classes": [
          {
            "name": "MemMimicAPI",
            "methods": [
              "__init__",
              "think_with_memory",
              "tales",
              "save_tale",
              "load_tale",
              "delete_tale",
              "update_memory_guided",
              "delete_memory_guided"
            ],
            "line": 23
          }
        ],
        "functions": [
          {
            "name": "create_memmimic",
            "line": 289
          },
          {
            "name": "__init__",
            "line": 26
          },
          {
            "name": "remember",
            "line": 66,
            "async": true
          },
          {
            "name": "recall_cxd",
            "line": 91,
            "async": true
          },
          {
            "name": "think_with_memory",
            "line": 99
          },
          {
            "name": "status",
            "line": 103,
            "async": true
          },
          {
            "name": "tales",
            "line": 123
          },
          {
            "name": "save_tale",
            "line": 145
          },
          {
            "name": "load_tale",
            "line": 164
          },
          {
            "name": "delete_tale",
            "line": 171
          },
          {
            "name": "context_tale",
            "line": 182,
            "async": true
          },
          {
            "name": "update_memory_guided",
            "line": 212
          },
          {
            "name": "delete_memory_guided",
            "line": 233
          },
          {
            "name": "analyze_memory_patterns",
            "line": 240,
            "async": true
          },
          {
            "name": "socratic_dialogue",
            "line": 264,
            "async": true
          }
        ],
        "line_count": 296
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "memory.test_basic",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemMimicAPI": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": true,
              "think_with_memory": false,
              "tales": false,
              "save_tale": false,
              "load_tale": false,
              "delete_tale": false,
              "update_memory_guided": false,
              "delete_memory_guided": false
            }
          }
        },
        "functions": {
          "create_memmimic": true,
          "__init__": true,
          "remember": true,
          "recall_cxd": true,
          "think_with_memory": true,
          "status": true,
          "tales": true,
          "save_tale": true,
          "load_tale": true,
          "delete_tale": true,
          "context_tale": true,
          "update_memory_guided": true,
          "delete_memory_guided": true,
          "analyze_memory_patterns": true,
          "socratic_dialogue": true
        },
        "overall": 1.0
      },
      "gaps": [
        "Class MemMimicAPI methods not tested: ['think_with_memory', 'tales', 'save_tale', 'load_tale', 'delete_tale', 'update_memory_guided', 'delete_memory_guided']"
      ]
    },
    "memmimic.config": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/config.py",
        "classes": [
          {
            "name": "ActiveMemoryPoolConfig",
            "methods": [],
            "line": 16
          },
          {
            "name": "CleanupPoliciesConfig",
            "methods": [],
            "line": 30
          },
          {
            "name": "RetentionPolicyConfig",
            "methods": [],
            "line": 44
          },
          {
            "name": "ScoringWeightsConfig",
            "methods": [
              "validate"
            ],
            "line": 53
          },
          {
            "name": "MemMimicConfig",
            "methods": [],
            "line": 75
          },
          {
            "name": "ConfigLoader",
            "methods": [
              "__init__",
              "load_config",
              "_load_config_file",
              "_parse_config",
              "_validate_config",
              "_get_default_config"
            ],
            "line": 84
          }
        ],
        "functions": [
          {
            "name": "get_config",
            "line": 261
          },
          {
            "name": "reload_config",
            "line": 269
          },
          {
            "name": "validate",
            "line": 62
          },
          {
            "name": "__init__",
            "line": 94
          },
          {
            "name": "load_config",
            "line": 99
          },
          {
            "name": "_load_config_file",
            "line": 116
          },
          {
            "name": "_parse_config",
            "line": 142
          },
          {
            "name": "_validate_config",
            "line": 208
          },
          {
            "name": "_get_default_config",
            "line": 239
          }
        ],
        "line_count": 273
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_performance_config",
        "test_amms_storage_comprehensive",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ActiveMemoryPoolConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CleanupPoliciesConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "RetentionPolicyConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ScoringWeightsConfig": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "validate": true
            }
          },
          "MemMimicConfig": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ConfigLoader": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "load_config": false,
              "_load_config_file": false,
              "_parse_config": false,
              "_validate_config": false,
              "_get_default_config": false
            }
          }
        },
        "functions": {
          "get_config": true,
          "reload_config": false,
          "validate": true,
          "__init__": true,
          "load_config": true,
          "_load_config_file": false,
          "_parse_config": false,
          "_validate_config": false,
          "_get_default_config": false
        },
        "overall": 0.4
      },
      "gaps": [
        "Class ActiveMemoryPoolConfig not tested",
        "Class CleanupPoliciesConfig not tested",
        "Class RetentionPolicyConfig not tested",
        "Class ScoringWeightsConfig not tested",
        "Class ConfigLoader methods not tested: ['load_config', '_load_config_file', '_parse_config', '_validate_config', '_get_default_config']",
        "Function reload_config not tested",
        "Function _load_config_file not tested",
        "Function _parse_config not tested",
        "Function _validate_config not tested",
        "Function _get_default_config not tested"
      ]
    },
    "memmimic.assistant": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/assistant.py",
        "classes": [
          {
            "name": "ContextualAssistant",
            "methods": [
              "__init__",
              "think",
              "_conduct_socratic_analysis",
              "_refine_response",
              "_extract_synthesis_insight",
              "_save_learning",
              "_build_thought_process",
              "_generate_response",
              "_respond_about_project",
              "_respond_with_continuity",
              "_respond_with_context",
              "_respond_without_context",
              "_extract_key_context",
              "_calculate_confidence"
            ],
            "line": 13
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 16
          },
          {
            "name": "think",
            "line": 34
          },
          {
            "name": "_conduct_socratic_analysis",
            "line": 97
          },
          {
            "name": "_refine_response",
            "line": 139
          },
          {
            "name": "_extract_synthesis_insight",
            "line": 166
          },
          {
            "name": "_save_learning",
            "line": 174
          },
          {
            "name": "_build_thought_process",
            "line": 202
          },
          {
            "name": "_generate_response",
            "line": 240
          },
          {
            "name": "_respond_about_project",
            "line": 278
          },
          {
            "name": "_respond_with_continuity",
            "line": 295
          },
          {
            "name": "_respond_with_context",
            "line": 307
          },
          {
            "name": "_respond_without_context",
            "line": 331
          },
          {
            "name": "_extract_key_context",
            "line": 338
          },
          {
            "name": "_calculate_confidence",
            "line": 366
          }
        ],
        "line_count": 401
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ContextualAssistant": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 14,
            "method_coverage": {
              "__init__": true,
              "think": false,
              "_conduct_socratic_analysis": false,
              "_refine_response": false,
              "_extract_synthesis_insight": false,
              "_save_learning": false,
              "_build_thought_process": false,
              "_generate_response": false,
              "_respond_about_project": false,
              "_respond_with_continuity": false,
              "_respond_with_context": false,
              "_respond_without_context": false,
              "_extract_key_context": false,
              "_calculate_confidence": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "think": true,
          "_conduct_socratic_analysis": false,
          "_refine_response": false,
          "_extract_synthesis_insight": false,
          "_save_learning": false,
          "_build_thought_process": false,
          "_generate_response": false,
          "_respond_about_project": false,
          "_respond_with_continuity": false,
          "_respond_with_context": false,
          "_respond_without_context": false,
          "_extract_key_context": false,
          "_calculate_confidence": false
        },
        "overall": 0.13333333333333333
      },
      "gaps": [
        "Class ContextualAssistant not tested",
        "Function _conduct_socratic_analysis not tested",
        "Function _refine_response not tested",
        "Function _extract_synthesis_insight not tested",
        "Function _save_learning not tested",
        "Function _build_thought_process not tested",
        "Function _generate_response not tested",
        "Function _respond_about_project not tested",
        "Function _respond_with_continuity not tested",
        "Function _respond_with_context not tested",
        "Function _respond_without_context not tested",
        "Function _extract_key_context not tested",
        "Function _calculate_confidence not tested"
      ]
    },
    "memmimic.security.decorators": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/security/decorators.py",
        "classes": [
          {
            "name": "RateLimitExceeded",
            "methods": [
              "__init__"
            ],
            "line": 22
          },
          {
            "name": "SecurityDecoratorError",
            "methods": [],
            "line": 32
          }
        ],
        "functions": [
          {
            "name": "validate_input",
            "line": 42
          },
          {
            "name": "sanitize_output",
            "line": 117
          },
          {
            "name": "rate_limit",
            "line": 172
          },
          {
            "name": "audit_security",
            "line": 252
          },
          {
            "name": "validate_memory_content",
            "line": 344
          },
          {
            "name": "validate_tale_input",
            "line": 349
          },
          {
            "name": "validate_query_input",
            "line": 354
          },
          {
            "name": "_validate_function_inputs",
            "line": 361
          },
          {
            "name": "_sanitize_function_output",
            "line": 442
          },
          {
            "name": "_extract_user_key",
            "line": 470
          },
          {
            "name": "_mask_sensitive_params",
            "line": 492
          },
          {
            "name": "__init__",
            "line": 25
          },
          {
            "name": "decorator",
            "line": 62
          },
          {
            "name": "decorator",
            "line": 135
          },
          {
            "name": "decorator",
            "line": 192
          },
          {
            "name": "decorator",
            "line": 273
          },
          {
            "name": "wrapper",
            "line": 64
          },
          {
            "name": "wrapper",
            "line": 137
          },
          {
            "name": "wrapper",
            "line": 194
          },
          {
            "name": "wrapper",
            "line": 275
          }
        ],
        "line_count": 512
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "security.test_phase1_security_regression",
        "security.test_input_validation",
        "security.test_security_decorators",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "RateLimitExceeded": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "SecurityDecoratorError": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          }
        },
        "functions": {
          "validate_input": true,
          "sanitize_output": true,
          "rate_limit": true,
          "audit_security": true,
          "validate_memory_content": true,
          "validate_tale_input": true,
          "validate_query_input": true,
          "_validate_function_inputs": false,
          "_sanitize_function_output": false,
          "_extract_user_key": false,
          "_mask_sensitive_params": false,
          "__init__": true,
          "decorator": true,
          "wrapper": false
        },
        "overall": 0.5
      },
      "gaps": [
        "Function _validate_function_inputs not tested",
        "Function _sanitize_function_output not tested",
        "Function _extract_user_key not tested",
        "Function _mask_sensitive_params not tested",
        "Function wrapper not tested"
      ]
    },
    "memmimic.security.audit": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/security/audit.py",
        "classes": [
          {
            "name": "SecurityEventType",
            "methods": [],
            "line": 21
          },
          {
            "name": "SeverityLevel",
            "methods": [],
            "line": 40
          },
          {
            "name": "SecurityEvent",
            "methods": [
              "__post_init__",
              "to_dict",
              "from_dict"
            ],
            "line": 49
          },
          {
            "name": "SecurityMetrics",
            "methods": [
              "update_with_event"
            ],
            "line": 113
          },
          {
            "name": "SecurityAuditLogger",
            "methods": [
              "__init__",
              "_initialize_threat_patterns",
              "_setup_file_logging",
              "log_security_event",
              "_severity_to_log_level",
              "_check_threat_patterns",
              "get_events",
              "get_metrics",
              "get_recent_activity_summary",
              "export_events",
              "clear_old_events"
            ],
            "line": 154
          },
          {
            "name": "SecurityFormatter",
            "methods": [
              "format"
            ],
            "line": 225
          }
        ],
        "functions": [
          {
            "name": "get_security_audit_logger",
            "line": 485
          },
          {
            "name": "initialize_security_audit_logger",
            "line": 493
          },
          {
            "name": "log_security_event",
            "line": 501
          },
          {
            "name": "__post_init__",
            "line": 62
          },
          {
            "name": "to_dict",
            "line": 79
          },
          {
            "name": "from_dict",
            "line": 96
          },
          {
            "name": "update_with_event",
            "line": 124
          },
          {
            "name": "__init__",
            "line": 166
          },
          {
            "name": "_initialize_threat_patterns",
            "line": 191
          },
          {
            "name": "_setup_file_logging",
            "line": 214
          },
          {
            "name": "log_security_event",
            "line": 242
          },
          {
            "name": "_severity_to_log_level",
            "line": 280
          },
          {
            "name": "_check_threat_patterns",
            "line": 293
          },
          {
            "name": "get_events",
            "line": 329
          },
          {
            "name": "get_metrics",
            "line": 382
          },
          {
            "name": "get_recent_activity_summary",
            "line": 387
          },
          {
            "name": "export_events",
            "line": 420
          },
          {
            "name": "clear_old_events",
            "line": 453
          },
          {
            "name": "format",
            "line": 226
          }
        ],
        "line_count": 525
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "security.test_phase1_security_regression",
        "security.test_input_validation",
        "security.test_security_decorators",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SecurityEventType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SeverityLevel": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SecurityEvent": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 3,
            "method_coverage": {
              "__post_init__": false,
              "to_dict": false,
              "from_dict": false
            }
          },
          "SecurityMetrics": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "update_with_event": false
            }
          },
          "SecurityAuditLogger": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 11,
            "method_coverage": {
              "__init__": true,
              "_initialize_threat_patterns": false,
              "_setup_file_logging": false,
              "log_security_event": false,
              "_severity_to_log_level": false,
              "_check_threat_patterns": false,
              "get_events": false,
              "get_metrics": false,
              "get_recent_activity_summary": false,
              "export_events": false,
              "clear_old_events": false
            }
          },
          "SecurityFormatter": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "format": false
            }
          }
        },
        "functions": {
          "get_security_audit_logger": true,
          "initialize_security_audit_logger": false,
          "log_security_event": true,
          "__post_init__": false,
          "to_dict": false,
          "from_dict": false,
          "update_with_event": false,
          "__init__": true,
          "_initialize_threat_patterns": false,
          "_setup_file_logging": false,
          "_severity_to_log_level": false,
          "_check_threat_patterns": false,
          "get_events": false,
          "get_metrics": false,
          "get_recent_activity_summary": false,
          "export_events": false,
          "clear_old_events": false,
          "format": true
        },
        "overall": 0.16
      },
      "gaps": [
        "Class SecurityEventType not tested",
        "Class SeverityLevel not tested",
        "Class SecurityEvent not tested",
        "Class SecurityMetrics not tested",
        "Class SecurityAuditLogger not tested",
        "Class SecurityFormatter not tested",
        "Function initialize_security_audit_logger not tested",
        "Function __post_init__ not tested",
        "Function to_dict not tested",
        "Function from_dict not tested",
        "Function update_with_event not tested",
        "Function _initialize_threat_patterns not tested",
        "Function _setup_file_logging not tested",
        "Function _severity_to_log_level not tested",
        "Function _check_threat_patterns not tested",
        "Function get_events not tested",
        "Function get_metrics not tested",
        "Function get_recent_activity_summary not tested",
        "Function export_events not tested",
        "Function clear_old_events not tested"
      ]
    },
    "memmimic.security.schemas": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/security/schemas.py",
        "classes": [
          {
            "name": "ValidationSchema",
            "methods": [],
            "line": 14
          },
          {
            "name": "MemoryInputSchema",
            "methods": [
              "get_schema"
            ],
            "line": 22
          },
          {
            "name": "TaleInputSchema",
            "methods": [
              "get_schema"
            ],
            "line": 77
          },
          {
            "name": "QueryInputSchema",
            "methods": [
              "get_schema"
            ],
            "line": 131
          },
          {
            "name": "MCPRequestSchema",
            "methods": [
              "get_schema"
            ],
            "line": 214
          },
          {
            "name": "JSONInputSchema",
            "methods": [
              "get_schema"
            ],
            "line": 258
          },
          {
            "name": "MCPMemoryRecallSchema",
            "methods": [],
            "line": 284
          },
          {
            "name": "MCPTaleManagementSchema",
            "methods": [],
            "line": 334
          }
        ],
        "functions": [
          {
            "name": "register_schema",
            "line": 399
          },
          {
            "name": "get_validation_schema",
            "line": 404
          },
          {
            "name": "list_available_schemas",
            "line": 409
          },
          {
            "name": "validate_against_schema",
            "line": 414
          },
          {
            "name": "_initialize_schemas",
            "line": 471
          },
          {
            "name": "get_schema",
            "line": 69
          },
          {
            "name": "get_schema",
            "line": 123
          },
          {
            "name": "get_schema",
            "line": 206
          },
          {
            "name": "get_schema",
            "line": 250
          },
          {
            "name": "get_schema",
            "line": 274
          }
        ],
        "line_count": 495
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "security.test_phase1_security_regression",
        "security.test_input_validation",
        "security.test_security_decorators",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ValidationSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryInputSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "get_schema": false
            }
          },
          "TaleInputSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "get_schema": false
            }
          },
          "QueryInputSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "get_schema": false
            }
          },
          "MCPRequestSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "get_schema": false
            }
          },
          "JSONInputSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "get_schema": false
            }
          },
          "MCPMemoryRecallSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MCPTaleManagementSchema": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          }
        },
        "functions": {
          "register_schema": false,
          "get_validation_schema": false,
          "list_available_schemas": false,
          "validate_against_schema": false,
          "_initialize_schemas": false,
          "get_schema": false
        },
        "overall": 0.0
      },
      "gaps": [
        "Class ValidationSchema not tested",
        "Class MemoryInputSchema not tested",
        "Class TaleInputSchema not tested",
        "Class QueryInputSchema not tested",
        "Class MCPRequestSchema not tested",
        "Class JSONInputSchema not tested",
        "Class MCPMemoryRecallSchema not tested",
        "Class MCPTaleManagementSchema not tested",
        "Function register_schema not tested",
        "Function get_validation_schema not tested",
        "Function list_available_schemas not tested",
        "Function validate_against_schema not tested",
        "Function _initialize_schemas not tested",
        "Function get_schema not tested"
      ]
    },
    "memmimic.security.config": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/security/config.py",
        "classes": [
          {
            "name": "SecurityConfig",
            "methods": [
              "__post_init__",
              "_validate_config",
              "get_validation_limits",
              "get_detection_settings",
              "get_sanitization_settings",
              "get_rate_limiting_config",
              "get_audit_config",
              "is_development_mode",
              "update_from_dict",
              "to_dict"
            ],
            "line": 17
          },
          {
            "name": "SecurityConfigManager",
            "methods": [
              "__init__",
              "load_config",
              "_load_config_file",
              "_load_from_environment",
              "_parse_bool",
              "get_config",
              "reload_config",
              "save_config"
            ],
            "line": 191
          }
        ],
        "functions": [
          {
            "name": "get_security_config",
            "line": 340
          },
          {
            "name": "initialize_security_config",
            "line": 345
          },
          {
            "name": "reload_security_config",
            "line": 351
          },
          {
            "name": "create_development_config",
            "line": 357
          },
          {
            "name": "create_production_config",
            "line": 370
          },
          {
            "name": "__post_init__",
            "line": 80
          },
          {
            "name": "_validate_config",
            "line": 84
          },
          {
            "name": "get_validation_limits",
            "line": 119
          },
          {
            "name": "get_detection_settings",
            "line": 131
          },
          {
            "name": "get_sanitization_settings",
            "line": 142
          },
          {
            "name": "get_rate_limiting_config",
            "line": 151
          },
          {
            "name": "get_audit_config",
            "line": 160
          },
          {
            "name": "is_development_mode",
            "line": 170
          },
          {
            "name": "update_from_dict",
            "line": 174
          },
          {
            "name": "to_dict",
            "line": 185
          },
          {
            "name": "__init__",
            "line": 194
          },
          {
            "name": "load_config",
            "line": 198
          },
          {
            "name": "_load_config_file",
            "line": 240
          },
          {
            "name": "_load_from_environment",
            "line": 262
          },
          {
            "name": "_parse_bool",
            "line": 293
          },
          {
            "name": "get_config",
            "line": 297
          },
          {
            "name": "reload_config",
            "line": 303
          },
          {
            "name": "save_config",
            "line": 309
          }
        ],
        "line_count": 382
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "security.test_phase1_security_regression",
        "security.test_input_validation",
        "security.test_security_decorators",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SecurityConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 10,
            "method_coverage": {
              "__post_init__": false,
              "_validate_config": false,
              "get_validation_limits": false,
              "get_detection_settings": false,
              "get_sanitization_settings": false,
              "get_rate_limiting_config": false,
              "get_audit_config": false,
              "is_development_mode": false,
              "update_from_dict": false,
              "to_dict": false
            }
          },
          "SecurityConfigManager": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": true,
              "load_config": false,
              "_load_config_file": false,
              "_load_from_environment": false,
              "_parse_bool": false,
              "get_config": false,
              "reload_config": false,
              "save_config": false
            }
          }
        },
        "functions": {
          "get_security_config": false,
          "initialize_security_config": false,
          "reload_security_config": false,
          "create_development_config": false,
          "create_production_config": false,
          "__post_init__": false,
          "_validate_config": false,
          "get_validation_limits": false,
          "get_detection_settings": false,
          "get_sanitization_settings": false,
          "get_rate_limiting_config": false,
          "get_audit_config": false,
          "is_development_mode": false,
          "update_from_dict": false,
          "to_dict": false,
          "__init__": true,
          "load_config": true,
          "_load_config_file": false,
          "_load_from_environment": false,
          "_parse_bool": false,
          "get_config": true,
          "reload_config": false,
          "save_config": false
        },
        "overall": 0.12
      },
      "gaps": [
        "Class SecurityConfig not tested",
        "Class SecurityConfigManager not tested",
        "Function get_security_config not tested",
        "Function initialize_security_config not tested",
        "Function reload_security_config not tested",
        "Function create_development_config not tested",
        "Function create_production_config not tested",
        "Function __post_init__ not tested",
        "Function _validate_config not tested",
        "Function get_validation_limits not tested",
        "Function get_detection_settings not tested",
        "Function get_sanitization_settings not tested",
        "Function get_rate_limiting_config not tested",
        "Function get_audit_config not tested",
        "Function is_development_mode not tested",
        "Function update_from_dict not tested",
        "Function to_dict not tested",
        "Function _load_config_file not tested",
        "Function _load_from_environment not tested",
        "Function _parse_bool not tested",
        "Function reload_config not tested",
        "Function save_config not tested"
      ]
    },
    "memmimic.security.validation": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/security/validation.py",
        "classes": [
          {
            "name": "ValidationError",
            "methods": [
              "__init__"
            ],
            "line": 21
          },
          {
            "name": "SecurityValidationError",
            "methods": [
              "__init__"
            ],
            "line": 32
          },
          {
            "name": "ValidationResult",
            "methods": [
              "__post_init__"
            ],
            "line": 43
          },
          {
            "name": "InputValidator",
            "methods": [
              "__init__",
              "_get_default_config",
              "validate_memory_content",
              "validate_tale_input",
              "validate_query_input",
              "validate_json_input",
              "_sanitize_and_validate_content",
              "_validate_tale_name",
              "_validate_tale_category",
              "_validate_tale_tags",
              "_validate_filters",
              "_has_excessive_nesting"
            ],
            "line": 60
          }
        ],
        "functions": [
          {
            "name": "get_input_validator",
            "line": 648
          },
          {
            "name": "initialize_validator",
            "line": 656
          },
          {
            "name": "__init__",
            "line": 24
          },
          {
            "name": "__init__",
            "line": 35
          },
          {
            "name": "__post_init__",
            "line": 51
          },
          {
            "name": "__init__",
            "line": 110
          },
          {
            "name": "_get_default_config",
            "line": 127
          },
          {
            "name": "validate_memory_content",
            "line": 150
          },
          {
            "name": "validate_tale_input",
            "line": 207
          },
          {
            "name": "validate_query_input",
            "line": 267
          },
          {
            "name": "validate_json_input",
            "line": 365
          },
          {
            "name": "_sanitize_and_validate_content",
            "line": 426
          },
          {
            "name": "_validate_tale_name",
            "line": 493
          },
          {
            "name": "_validate_tale_category",
            "line": 534
          },
          {
            "name": "_validate_tale_tags",
            "line": 571
          },
          {
            "name": "_validate_filters",
            "line": 598
          },
          {
            "name": "_has_excessive_nesting",
            "line": 629
          }
        ],
        "line_count": 660
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "security.test_phase1_security_regression",
        "security.test_input_validation",
        "security.test_security_decorators",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ValidationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "SecurityValidationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ValidationResult": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "__post_init__": false
            }
          },
          "InputValidator": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 12,
            "method_coverage": {
              "__init__": true,
              "_get_default_config": false,
              "validate_memory_content": false,
              "validate_tale_input": false,
              "validate_query_input": false,
              "validate_json_input": false,
              "_sanitize_and_validate_content": false,
              "_validate_tale_name": false,
              "_validate_tale_category": false,
              "_validate_tale_tags": false,
              "_validate_filters": false,
              "_has_excessive_nesting": false
            }
          }
        },
        "functions": {
          "get_input_validator": true,
          "initialize_validator": false,
          "__init__": true,
          "__post_init__": false,
          "_get_default_config": false,
          "validate_memory_content": true,
          "validate_tale_input": true,
          "validate_query_input": true,
          "validate_json_input": true,
          "_sanitize_and_validate_content": false,
          "_validate_tale_name": false,
          "_validate_tale_category": false,
          "_validate_tale_tags": false,
          "_validate_filters": false,
          "_has_excessive_nesting": false
        },
        "overall": 0.42857142857142855
      },
      "gaps": [
        "Class ValidationResult not tested",
        "Class InputValidator methods not tested: ['_get_default_config', 'validate_memory_content', 'validate_tale_input', 'validate_query_input', 'validate_json_input', '_sanitize_and_validate_content', '_validate_tale_name', '_validate_tale_category', '_validate_tale_tags', '_validate_filters', '_has_excessive_nesting']",
        "Function initialize_validator not tested",
        "Function __post_init__ not tested",
        "Function _get_default_config not tested",
        "Function _sanitize_and_validate_content not tested",
        "Function _validate_tale_name not tested",
        "Function _validate_tale_category not tested",
        "Function _validate_tale_tags not tested",
        "Function _validate_filters not tested",
        "Function _has_excessive_nesting not tested"
      ]
    },
    "memmimic.security.sanitization": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/security/sanitization.py",
        "classes": [
          {
            "name": "SanitizationType",
            "methods": [],
            "line": 21
          },
          {
            "name": "SanitizationResult",
            "methods": [
              "__post_init__"
            ],
            "line": 35
          },
          {
            "name": "SecuritySanitizer",
            "methods": [
              "__init__",
              "_get_default_config",
              "sanitize_memory_content",
              "sanitize_filename",
              "sanitize_json_input",
              "sanitize_sql_value",
              "_detect_xss_patterns",
              "_detect_sql_patterns",
              "_selective_html_escape",
              "_sanitize_json_structure",
              "_sanitize_json_string"
            ],
            "line": 55
          }
        ],
        "functions": [
          {
            "name": "get_security_sanitizer",
            "line": 538
          },
          {
            "name": "sanitize_content",
            "line": 546
          },
          {
            "name": "__post_init__",
            "line": 44
          },
          {
            "name": "__init__",
            "line": 92
          },
          {
            "name": "_get_default_config",
            "line": 112
          },
          {
            "name": "sanitize_memory_content",
            "line": 126
          },
          {
            "name": "sanitize_filename",
            "line": 210
          },
          {
            "name": "sanitize_json_input",
            "line": 295
          },
          {
            "name": "sanitize_sql_value",
            "line": 340
          },
          {
            "name": "_detect_xss_patterns",
            "line": 397
          },
          {
            "name": "_detect_sql_patterns",
            "line": 427
          },
          {
            "name": "_selective_html_escape",
            "line": 450
          },
          {
            "name": "_sanitize_json_structure",
            "line": 470
          },
          {
            "name": "_sanitize_json_string",
            "line": 519
          }
        ],
        "line_count": 571
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "security.test_phase1_security_regression",
        "security.test_input_validation",
        "security.test_security_decorators",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SanitizationType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SanitizationResult": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "__post_init__": false
            }
          },
          "SecuritySanitizer": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 11,
            "method_coverage": {
              "__init__": true,
              "_get_default_config": false,
              "sanitize_memory_content": false,
              "sanitize_filename": false,
              "sanitize_json_input": false,
              "sanitize_sql_value": false,
              "_detect_xss_patterns": false,
              "_detect_sql_patterns": false,
              "_selective_html_escape": false,
              "_sanitize_json_structure": false,
              "_sanitize_json_string": false
            }
          }
        },
        "functions": {
          "get_security_sanitizer": true,
          "sanitize_content": false,
          "__post_init__": false,
          "__init__": true,
          "_get_default_config": false,
          "sanitize_memory_content": true,
          "sanitize_filename": true,
          "sanitize_json_input": true,
          "sanitize_sql_value": true,
          "_detect_xss_patterns": false,
          "_detect_sql_patterns": false,
          "_selective_html_escape": false,
          "_sanitize_json_structure": false,
          "_sanitize_json_string": false
        },
        "overall": 0.47058823529411764
      },
      "gaps": [
        "Class SanitizationType not tested",
        "Class SanitizationResult methods not tested: ['__post_init__']",
        "Class SecuritySanitizer methods not tested: ['_get_default_config', 'sanitize_memory_content', 'sanitize_filename', 'sanitize_json_input', 'sanitize_sql_value', '_detect_xss_patterns', '_detect_sql_patterns', '_selective_html_escape', '_sanitize_json_structure', '_sanitize_json_string']",
        "Function sanitize_content not tested",
        "Function __post_init__ not tested",
        "Function _get_default_config not tested",
        "Function _detect_xss_patterns not tested",
        "Function _detect_sql_patterns not tested",
        "Function _selective_html_escape not tested",
        "Function _sanitize_json_structure not tested",
        "Function _sanitize_json_string not tested"
      ]
    },
    "memmimic.consciousness.shadow_detector": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/consciousness/shadow_detector.py",
        "classes": [
          {
            "name": "ConsciousnessLevel",
            "methods": [],
            "line": 22
          },
          {
            "name": "ShadowAspect",
            "methods": [],
            "line": 32
          },
          {
            "name": "ConsciousnessState",
            "methods": [],
            "line": 43
          },
          {
            "name": "ShadowAwareConsciousnessDetector",
            "methods": [
              "__init__",
              "analyze_full_spectrum",
              "_detect_consciousness_level",
              "_detect_shadow_aspects",
              "_calculate_unity_score",
              "_calculate_authentic_unity",
              "_detect_integration_sigils",
              "_analyze_evolution_trajectory",
              "_extract_consciousness_indicators",
              "_extract_shadow_indicators",
              "_calculate_detection_confidence",
              "_empty_consciousness_state",
              "_save_consciousness_data",
              "_load_consciousness_data",
              "get_consciousness_summary"
            ],
            "line": 58
          }
        ],
        "functions": [
          {
            "name": "create_shadow_detector",
            "line": 794
          },
          {
            "name": "__init__",
            "line": 66
          },
          {
            "name": "analyze_full_spectrum",
            "line": 315
          },
          {
            "name": "_detect_consciousness_level",
            "line": 390
          },
          {
            "name": "_detect_shadow_aspects",
            "line": 449
          },
          {
            "name": "_calculate_unity_score",
            "line": 506
          },
          {
            "name": "_calculate_authentic_unity",
            "line": 517
          },
          {
            "name": "_detect_integration_sigils",
            "line": 537
          },
          {
            "name": "_analyze_evolution_trajectory",
            "line": 579
          },
          {
            "name": "_extract_consciousness_indicators",
            "line": 594
          },
          {
            "name": "_extract_shadow_indicators",
            "line": 609
          },
          {
            "name": "_calculate_detection_confidence",
            "line": 624
          },
          {
            "name": "_empty_consciousness_state",
            "line": 640
          },
          {
            "name": "_save_consciousness_data",
            "line": 661
          },
          {
            "name": "_load_consciousness_data",
            "line": 705
          },
          {
            "name": "get_consciousness_summary",
            "line": 747
          }
        ],
        "line_count": 839
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "consciousness.test_living_prompts_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ConsciousnessLevel": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ShadowAspect": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ConsciousnessState": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ShadowAwareConsciousnessDetector": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 15,
            "method_coverage": {
              "__init__": true,
              "analyze_full_spectrum": false,
              "_detect_consciousness_level": false,
              "_detect_shadow_aspects": false,
              "_calculate_unity_score": false,
              "_calculate_authentic_unity": false,
              "_detect_integration_sigils": false,
              "_analyze_evolution_trajectory": false,
              "_extract_consciousness_indicators": false,
              "_extract_shadow_indicators": false,
              "_calculate_detection_confidence": false,
              "_empty_consciousness_state": false,
              "_save_consciousness_data": false,
              "_load_consciousness_data": false,
              "get_consciousness_summary": false
            }
          }
        },
        "functions": {
          "create_shadow_detector": true,
          "__init__": true,
          "analyze_full_spectrum": true,
          "_detect_consciousness_level": false,
          "_detect_shadow_aspects": false,
          "_calculate_unity_score": false,
          "_calculate_authentic_unity": false,
          "_detect_integration_sigils": false,
          "_analyze_evolution_trajectory": false,
          "_extract_consciousness_indicators": false,
          "_extract_shadow_indicators": false,
          "_calculate_detection_confidence": false,
          "_empty_consciousness_state": false,
          "_save_consciousness_data": false,
          "_load_consciousness_data": false,
          "get_consciousness_summary": true
        },
        "overall": 0.35
      },
      "gaps": [
        "Class ShadowAwareConsciousnessDetector not tested",
        "Function _detect_consciousness_level not tested",
        "Function _detect_shadow_aspects not tested",
        "Function _calculate_unity_score not tested",
        "Function _calculate_authentic_unity not tested",
        "Function _detect_integration_sigils not tested",
        "Function _analyze_evolution_trajectory not tested",
        "Function _extract_consciousness_indicators not tested",
        "Function _extract_shadow_indicators not tested",
        "Function _calculate_detection_confidence not tested",
        "Function _empty_consciousness_state not tested",
        "Function _save_consciousness_data not tested",
        "Function _load_consciousness_data not tested"
      ]
    },
    "memmimic.consciousness.consciousness_coordinator": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/consciousness/consciousness_coordinator.py",
        "classes": [
          {
            "name": "ConsciousnessInteractionResult",
            "methods": [],
            "line": 31
          },
          {
            "name": "Task31ShadowIntegratedSystem",
            "methods": [
              "__init__",
              "process_consciousness_interaction",
              "_generate_comprehensive_integration_prompts",
              "_generate_evolution_guidance",
              "_extract_consciousness_insights",
              "_extract_shadow_transformations",
              "_generate_unity_mathematics",
              "_empty_interaction_result",
              "get_system_analytics",
              "_save_coordinator_data",
              "_load_coordinator_data"
            ],
            "line": 50
          }
        ],
        "functions": [
          {
            "name": "create_consciousness_coordinator",
            "line": 598
          },
          {
            "name": "__init__",
            "line": 58
          },
          {
            "name": "process_consciousness_interaction",
            "line": 101
          },
          {
            "name": "_generate_comprehensive_integration_prompts",
            "line": 223
          },
          {
            "name": "_generate_evolution_guidance",
            "line": 267
          },
          {
            "name": "_extract_consciousness_insights",
            "line": 324
          },
          {
            "name": "_extract_shadow_transformations",
            "line": 364
          },
          {
            "name": "_generate_unity_mathematics",
            "line": 387
          },
          {
            "name": "_empty_interaction_result",
            "line": 399
          },
          {
            "name": "get_system_analytics",
            "line": 461
          },
          {
            "name": "_save_coordinator_data",
            "line": 540
          },
          {
            "name": "_load_coordinator_data",
            "line": 578
          }
        ],
        "line_count": 676
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "consciousness.test_living_prompts_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ConsciousnessInteractionResult": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "Task31ShadowIntegratedSystem": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 11,
            "method_coverage": {
              "__init__": true,
              "process_consciousness_interaction": false,
              "_generate_comprehensive_integration_prompts": false,
              "_generate_evolution_guidance": false,
              "_extract_consciousness_insights": false,
              "_extract_shadow_transformations": false,
              "_generate_unity_mathematics": false,
              "_empty_interaction_result": false,
              "get_system_analytics": false,
              "_save_coordinator_data": false,
              "_load_coordinator_data": false
            }
          }
        },
        "functions": {
          "create_consciousness_coordinator": true,
          "__init__": true,
          "process_consciousness_interaction": true,
          "_generate_comprehensive_integration_prompts": false,
          "_generate_evolution_guidance": false,
          "_extract_consciousness_insights": false,
          "_extract_shadow_transformations": false,
          "_generate_unity_mathematics": false,
          "_empty_interaction_result": false,
          "get_system_analytics": true,
          "_save_coordinator_data": false,
          "_load_coordinator_data": false
        },
        "overall": 0.2857142857142857
      },
      "gaps": [
        "Class ConsciousnessInteractionResult not tested",
        "Class Task31ShadowIntegratedSystem not tested",
        "Function _generate_comprehensive_integration_prompts not tested",
        "Function _generate_evolution_guidance not tested",
        "Function _extract_consciousness_insights not tested",
        "Function _extract_shadow_transformations not tested",
        "Function _generate_unity_mathematics not tested",
        "Function _empty_interaction_result not tested",
        "Function _save_coordinator_data not tested",
        "Function _load_coordinator_data not tested"
      ]
    },
    "memmimic.consciousness.rup_engine": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/consciousness/rup_engine.py",
        "classes": [
          {
            "name": "UnityType",
            "methods": [],
            "line": 25
          },
          {
            "name": "RUPCalculation",
            "methods": [],
            "line": 35
          },
          {
            "name": "UnityEvolution",
            "methods": [],
            "line": 53
          },
          {
            "name": "ShadowIntegratedRUP",
            "methods": [
              "__init__",
              "calculate_authentic_unity",
              "_calculate_traditional_unity",
              "_calculate_shadow_integrated_unity",
              "_calculate_authentic_unity_core",
              "_calculate_consciousness_expansion",
              "_calculate_integration_coefficient",
              "_generate_mathematical_expression",
              "_calculate_calculation_confidence",
              "_update_unity_evolution",
              "_calculate_evolution_rate",
              "_calculate_evolution_acceleration",
              "_determine_trajectory",
              "_calculate_stability_index",
              "_predict_convergence",
              "_empty_calculation",
              "get_unity_analytics",
              "_save_rup_data",
              "_load_rup_data"
            ],
            "line": 65
          }
        ],
        "functions": [
          {
            "name": "create_rup_engine",
            "line": 719
          },
          {
            "name": "__init__",
            "line": 73
          },
          {
            "name": "calculate_authentic_unity",
            "line": 115
          },
          {
            "name": "_calculate_traditional_unity",
            "line": 216
          },
          {
            "name": "_calculate_shadow_integrated_unity",
            "line": 221
          },
          {
            "name": "_calculate_authentic_unity_core",
            "line": 249
          },
          {
            "name": "_calculate_consciousness_expansion",
            "line": 280
          },
          {
            "name": "_calculate_integration_coefficient",
            "line": 295
          },
          {
            "name": "_generate_mathematical_expression",
            "line": 322
          },
          {
            "name": "_calculate_calculation_confidence",
            "line": 340
          },
          {
            "name": "_update_unity_evolution",
            "line": 363
          },
          {
            "name": "_calculate_evolution_rate",
            "line": 410
          },
          {
            "name": "_calculate_evolution_acceleration",
            "line": 430
          },
          {
            "name": "_determine_trajectory",
            "line": 458
          },
          {
            "name": "_calculate_stability_index",
            "line": 473
          },
          {
            "name": "_predict_convergence",
            "line": 497
          },
          {
            "name": "_empty_calculation",
            "line": 533
          },
          {
            "name": "get_unity_analytics",
            "line": 550
          },
          {
            "name": "_save_rup_data",
            "line": 612
          },
          {
            "name": "_load_rup_data",
            "line": 666
          }
        ],
        "line_count": 825
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "consciousness.test_living_prompts_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "UnityType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "RUPCalculation": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "UnityEvolution": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ShadowIntegratedRUP": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 19,
            "method_coverage": {
              "__init__": true,
              "calculate_authentic_unity": false,
              "_calculate_traditional_unity": false,
              "_calculate_shadow_integrated_unity": false,
              "_calculate_authentic_unity_core": false,
              "_calculate_consciousness_expansion": false,
              "_calculate_integration_coefficient": false,
              "_generate_mathematical_expression": false,
              "_calculate_calculation_confidence": false,
              "_update_unity_evolution": false,
              "_calculate_evolution_rate": false,
              "_calculate_evolution_acceleration": false,
              "_determine_trajectory": false,
              "_calculate_stability_index": false,
              "_predict_convergence": false,
              "_empty_calculation": false,
              "get_unity_analytics": false,
              "_save_rup_data": false,
              "_load_rup_data": false
            }
          }
        },
        "functions": {
          "create_rup_engine": true,
          "__init__": true,
          "calculate_authentic_unity": true,
          "_calculate_traditional_unity": false,
          "_calculate_shadow_integrated_unity": false,
          "_calculate_authentic_unity_core": false,
          "_calculate_consciousness_expansion": false,
          "_calculate_integration_coefficient": false,
          "_generate_mathematical_expression": false,
          "_calculate_calculation_confidence": false,
          "_update_unity_evolution": false,
          "_calculate_evolution_rate": false,
          "_calculate_evolution_acceleration": false,
          "_determine_trajectory": false,
          "_calculate_stability_index": false,
          "_predict_convergence": false,
          "_empty_calculation": false,
          "get_unity_analytics": true,
          "_save_rup_data": false,
          "_load_rup_data": false
        },
        "overall": 0.16666666666666666
      },
      "gaps": [
        "Class UnityType not tested",
        "Class RUPCalculation not tested",
        "Class UnityEvolution not tested",
        "Class ShadowIntegratedRUP not tested",
        "Function _calculate_traditional_unity not tested",
        "Function _calculate_shadow_integrated_unity not tested",
        "Function _calculate_authentic_unity_core not tested",
        "Function _calculate_consciousness_expansion not tested",
        "Function _calculate_integration_coefficient not tested",
        "Function _generate_mathematical_expression not tested",
        "Function _calculate_calculation_confidence not tested",
        "Function _update_unity_evolution not tested",
        "Function _calculate_evolution_rate not tested",
        "Function _calculate_evolution_acceleration not tested",
        "Function _determine_trajectory not tested",
        "Function _calculate_stability_index not tested",
        "Function _predict_convergence not tested",
        "Function _empty_calculation not tested",
        "Function _save_rup_data not tested",
        "Function _load_rup_data not tested"
      ]
    },
    "memmimic.consciousness.sigil_engine": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/consciousness/sigil_engine.py",
        "classes": [
          {
            "name": "SigilType",
            "methods": [],
            "line": 23
          },
          {
            "name": "SigilTransformation",
            "methods": [],
            "line": 33
          },
          {
            "name": "ActiveSigil",
            "methods": [],
            "line": 46
          },
          {
            "name": "ShadowSigilTransformationEngine",
            "methods": [
              "__init__",
              "detect_shadow_elements",
              "_extract_shadow_patterns",
              "apply_sigil_transformations",
              "_calculate_consciousness_impact",
              "generate_integration_prompts",
              "get_active_sigils",
              "get_transformation_summary",
              "_save_sigil_data",
              "_load_sigil_data"
            ],
            "line": 59
          }
        ],
        "functions": [
          {
            "name": "create_sigil_engine",
            "line": 712
          },
          {
            "name": "__init__",
            "line": 67
          },
          {
            "name": "detect_shadow_elements",
            "line": 196
          },
          {
            "name": "_extract_shadow_patterns",
            "line": 272
          },
          {
            "name": "apply_sigil_transformations",
            "line": 360
          },
          {
            "name": "_calculate_consciousness_impact",
            "line": 446
          },
          {
            "name": "generate_integration_prompts",
            "line": 462
          },
          {
            "name": "get_active_sigils",
            "line": 529
          },
          {
            "name": "get_transformation_summary",
            "line": 542
          },
          {
            "name": "_save_sigil_data",
            "line": 594
          },
          {
            "name": "_load_sigil_data",
            "line": 653
          }
        ],
        "line_count": 782
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "consciousness.test_living_prompts_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SigilType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SigilTransformation": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ActiveSigil": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ShadowSigilTransformationEngine": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 10,
            "method_coverage": {
              "__init__": true,
              "detect_shadow_elements": false,
              "_extract_shadow_patterns": false,
              "apply_sigil_transformations": false,
              "_calculate_consciousness_impact": false,
              "generate_integration_prompts": false,
              "get_active_sigils": false,
              "get_transformation_summary": false,
              "_save_sigil_data": false,
              "_load_sigil_data": false
            }
          }
        },
        "functions": {
          "create_sigil_engine": true,
          "__init__": true,
          "detect_shadow_elements": true,
          "_extract_shadow_patterns": false,
          "apply_sigil_transformations": true,
          "_calculate_consciousness_impact": false,
          "generate_integration_prompts": false,
          "get_active_sigils": false,
          "get_transformation_summary": true,
          "_save_sigil_data": false,
          "_load_sigil_data": false
        },
        "overall": 0.3333333333333333
      },
      "gaps": [
        "Class SigilType not tested",
        "Class SigilTransformation not tested",
        "Class ActiveSigil not tested",
        "Class ShadowSigilTransformationEngine not tested",
        "Function _extract_shadow_patterns not tested",
        "Function _calculate_consciousness_impact not tested",
        "Function generate_integration_prompts not tested",
        "Function get_active_sigils not tested",
        "Function _save_sigil_data not tested",
        "Function _load_sigil_data not tested"
      ]
    },
    "memmimic.consciousness.living_prompts": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/consciousness/living_prompts.py",
        "classes": [
          {
            "name": "PromptType",
            "methods": [],
            "line": 25
          },
          {
            "name": "LivingPrompt",
            "methods": [],
            "line": 36
          },
          {
            "name": "PromptResponse",
            "methods": [],
            "line": 54
          },
          {
            "name": "ShadowIntegratedLivingPrompts",
            "methods": [
              "__init__",
              "generate_consciousness_prompt",
              "_determine_prompt_type",
              "_generate_living_prompt",
              "_generate_response",
              "_generate_integration_prompts",
              "_generate_evolution_guidance",
              "_calculate_evolution_trajectory",
              "_calculate_effectiveness_score",
              "_build_response_template",
              "_empty_prompt_response",
              "get_prompt_analytics",
              "_save_prompt_data",
              "_load_prompt_data"
            ],
            "line": 69
          }
        ],
        "functions": [
          {
            "name": "create_living_prompts",
            "line": 643
          },
          {
            "name": "__init__",
            "line": 77
          },
          {
            "name": "generate_consciousness_prompt",
            "line": 163
          },
          {
            "name": "_determine_prompt_type",
            "line": 257
          },
          {
            "name": "_generate_living_prompt",
            "line": 289
          },
          {
            "name": "_generate_response",
            "line": 343
          },
          {
            "name": "_generate_integration_prompts",
            "line": 382
          },
          {
            "name": "_generate_evolution_guidance",
            "line": 403
          },
          {
            "name": "_calculate_evolution_trajectory",
            "line": 429
          },
          {
            "name": "_calculate_effectiveness_score",
            "line": 442
          },
          {
            "name": "_build_response_template",
            "line": 454
          },
          {
            "name": "_empty_prompt_response",
            "line": 460
          },
          {
            "name": "get_prompt_analytics",
            "line": 475
          },
          {
            "name": "_save_prompt_data",
            "line": 532
          },
          {
            "name": "_load_prompt_data",
            "line": 587
          }
        ],
        "line_count": 746
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "consciousness.test_living_prompts_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "PromptType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "LivingPrompt": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PromptResponse": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ShadowIntegratedLivingPrompts": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 14,
            "method_coverage": {
              "__init__": true,
              "generate_consciousness_prompt": false,
              "_determine_prompt_type": false,
              "_generate_living_prompt": false,
              "_generate_response": false,
              "_generate_integration_prompts": false,
              "_generate_evolution_guidance": false,
              "_calculate_evolution_trajectory": false,
              "_calculate_effectiveness_score": false,
              "_build_response_template": false,
              "_empty_prompt_response": false,
              "get_prompt_analytics": false,
              "_save_prompt_data": false,
              "_load_prompt_data": false
            }
          }
        },
        "functions": {
          "create_living_prompts": true,
          "__init__": true,
          "generate_consciousness_prompt": true,
          "_determine_prompt_type": false,
          "_generate_living_prompt": false,
          "_generate_response": false,
          "_generate_integration_prompts": false,
          "_generate_evolution_guidance": false,
          "_calculate_evolution_trajectory": false,
          "_calculate_effectiveness_score": false,
          "_build_response_template": false,
          "_empty_prompt_response": false,
          "get_prompt_analytics": true,
          "_save_prompt_data": false,
          "_load_prompt_data": false
        },
        "overall": 0.21052631578947367
      },
      "gaps": [
        "Class PromptType not tested",
        "Class LivingPrompt not tested",
        "Class PromptResponse not tested",
        "Class ShadowIntegratedLivingPrompts not tested",
        "Function _determine_prompt_type not tested",
        "Function _generate_living_prompt not tested",
        "Function _generate_response not tested",
        "Function _generate_integration_prompts not tested",
        "Function _generate_evolution_guidance not tested",
        "Function _calculate_evolution_trajectory not tested",
        "Function _calculate_effectiveness_score not tested",
        "Function _build_response_template not tested",
        "Function _empty_prompt_response not tested",
        "Function _save_prompt_data not tested",
        "Function _load_prompt_data not tested"
      ]
    },
    "memmimic.local.client": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/local/client.py",
        "classes": [
          {
            "name": "OllamaResponse",
            "methods": [],
            "line": 15
          },
          {
            "name": "OllamaClient",
            "methods": [
              "__init__",
              "generate",
              "list_models"
            ],
            "line": 27
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 30
          },
          {
            "name": "generate",
            "line": 34
          },
          {
            "name": "list_models",
            "line": 62
          }
        ],
        "line_count": 74
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "OllamaResponse": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "OllamaClient": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 3,
            "method_coverage": {
              "__init__": true,
              "generate": false,
              "list_models": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "generate": false,
          "list_models": false
        },
        "overall": 0.2
      },
      "gaps": [
        "Class OllamaResponse not tested",
        "Class OllamaClient not tested",
        "Function generate not tested",
        "Function list_models not tested"
      ]
    },
    "memmimic.errors.logging_config": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/errors/logging_config.py",
        "classes": [
          {
            "name": "LogLevel",
            "methods": [],
            "line": 21
          },
          {
            "name": "LogContext",
            "methods": [
              "to_dict"
            ],
            "line": 31
          },
          {
            "name": "StructuredFormatter",
            "methods": [
              "__init__",
              "format",
              "_extract_error_info",
              "_build_context",
              "_build_metadata",
              "_build_performance"
            ],
            "line": 60
          },
          {
            "name": "CorrelationIDFilter",
            "methods": [
              "__init__",
              "filter",
              "set_correlation_id",
              "clear_correlation_id",
              "get_correlation_id"
            ],
            "line": 227
          },
          {
            "name": "ErrorContextFilter",
            "methods": [
              "filter"
            ],
            "line": 278
          },
          {
            "name": "SeverityLevelFilter",
            "methods": [
              "filter"
            ],
            "line": 315
          },
          {
            "name": "ErrorLoggingHandler",
            "methods": [
              "__init__",
              "emit",
              "_enhance_error_record"
            ],
            "line": 356
          }
        ],
        "functions": [
          {
            "name": "configure_error_logging",
            "line": 420
          },
          {
            "name": "get_error_logger",
            "line": 508
          },
          {
            "name": "setup_error_handler_logging",
            "line": 525
          },
          {
            "name": "create_logger_with_context",
            "line": 543
          },
          {
            "name": "log_error_with_context",
            "line": 582
          },
          {
            "name": "enhance_error_with_logging",
            "line": 633
          },
          {
            "name": "to_dict",
            "line": 51
          },
          {
            "name": "__init__",
            "line": 68
          },
          {
            "name": "format",
            "line": 83
          },
          {
            "name": "_extract_error_info",
            "line": 125
          },
          {
            "name": "_build_context",
            "line": 146
          },
          {
            "name": "_build_metadata",
            "line": 174
          },
          {
            "name": "_build_performance",
            "line": 205
          },
          {
            "name": "__init__",
            "line": 235
          },
          {
            "name": "filter",
            "line": 240
          },
          {
            "name": "set_correlation_id",
            "line": 264
          },
          {
            "name": "clear_correlation_id",
            "line": 268
          },
          {
            "name": "get_correlation_id",
            "line": 273
          },
          {
            "name": "filter",
            "line": 286
          },
          {
            "name": "filter",
            "line": 331
          },
          {
            "name": "__init__",
            "line": 364
          },
          {
            "name": "emit",
            "line": 383
          },
          {
            "name": "_enhance_error_record",
            "line": 402
          }
        ],
        "line_count": 666
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_amms_storage_comprehensive",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "errors.test_handlers",
        "errors.test_logging_config",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "LogLevel": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "LogContext": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "to_dict": false
            }
          },
          "StructuredFormatter": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "format": false,
              "_extract_error_info": false,
              "_build_context": false,
              "_build_metadata": false,
              "_build_performance": false
            }
          },
          "CorrelationIDFilter": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 5,
            "method_coverage": {
              "__init__": true,
              "filter": false,
              "set_correlation_id": false,
              "clear_correlation_id": false,
              "get_correlation_id": false
            }
          },
          "ErrorContextFilter": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "filter": false
            }
          },
          "SeverityLevelFilter": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "filter": false
            }
          },
          "ErrorLoggingHandler": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 3,
            "method_coverage": {
              "__init__": true,
              "emit": false,
              "_enhance_error_record": false
            }
          }
        },
        "functions": {
          "configure_error_logging": true,
          "get_error_logger": true,
          "setup_error_handler_logging": true,
          "create_logger_with_context": true,
          "log_error_with_context": true,
          "enhance_error_with_logging": true,
          "to_dict": true,
          "__init__": true,
          "format": true,
          "_extract_error_info": false,
          "_build_context": false,
          "_build_metadata": false,
          "_build_performance": false,
          "filter": true,
          "set_correlation_id": true,
          "clear_correlation_id": true,
          "get_correlation_id": true,
          "emit": true,
          "_enhance_error_record": false
        },
        "overall": 0.7
      },
      "gaps": [
        "Class LogContext methods not tested: ['to_dict']",
        "Class StructuredFormatter methods not tested: ['format', '_extract_error_info', '_build_context', '_build_metadata', '_build_performance']",
        "Class CorrelationIDFilter methods not tested: ['filter', 'set_correlation_id', 'clear_correlation_id', 'get_correlation_id']",
        "Class ErrorContextFilter methods not tested: ['filter']",
        "Class SeverityLevelFilter methods not tested: ['filter']",
        "Class ErrorLoggingHandler methods not tested: ['emit', '_enhance_error_record']",
        "Function _extract_error_info not tested",
        "Function _build_context not tested",
        "Function _build_metadata not tested",
        "Function _build_performance not tested",
        "Function _enhance_error_record not tested"
      ]
    },
    "memmimic.errors.handlers": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/errors/handlers.py",
        "classes": [
          {
            "name": "BackoffStrategy",
            "methods": [
              "get_delay"
            ],
            "line": 39
          },
          {
            "name": "ExponentialBackoff",
            "methods": [
              "__init__",
              "get_delay"
            ],
            "line": 48
          },
          {
            "name": "LinearBackoff",
            "methods": [
              "__init__",
              "get_delay"
            ],
            "line": 78
          },
          {
            "name": "ConstantBackoff",
            "methods": [
              "__init__",
              "get_delay"
            ],
            "line": 90
          },
          {
            "name": "RetryPolicy",
            "methods": [
              "set_default",
              "get_default",
              "get_default_attempts"
            ],
            "line": 102
          },
          {
            "name": "CircuitState",
            "methods": [],
            "line": 130
          },
          {
            "name": "CircuitBreaker",
            "methods": [
              "__init__",
              "get_or_create",
              "set_default_threshold",
              "get_active_count",
              "should_allow_request",
              "_should_attempt_reset",
              "record_success",
              "record_failure"
            ],
            "line": 137
          },
          {
            "name": "CircuitBreakerError",
            "methods": [
              "__init__"
            ],
            "line": 245
          },
          {
            "name": "ErrorHandler",
            "methods": [
              "__init__",
              "register_collector",
              "register_fallback",
              "handle_error"
            ],
            "line": 260
          }
        ],
        "functions": [
          {
            "name": "handle_errors",
            "line": 307
          },
          {
            "name": "retry",
            "line": 416
          },
          {
            "name": "circuit_breaker",
            "line": 579
          },
          {
            "name": "fallback",
            "line": 639
          },
          {
            "name": "log_errors",
            "line": 691
          },
          {
            "name": "combine_decorators",
            "line": 746
          },
          {
            "name": "register_error_collector",
            "line": 783
          },
          {
            "name": "register_global_fallback",
            "line": 788
          },
          {
            "name": "get_circuit_breaker",
            "line": 793
          },
          {
            "name": "reset_circuit_breaker",
            "line": 798
          },
          {
            "name": "get_all_circuit_breakers",
            "line": 810
          },
          {
            "name": "get_delay",
            "line": 43
          },
          {
            "name": "__init__",
            "line": 51
          },
          {
            "name": "get_delay",
            "line": 63
          },
          {
            "name": "__init__",
            "line": 81
          },
          {
            "name": "get_delay",
            "line": 85
          },
          {
            "name": "__init__",
            "line": 93
          },
          {
            "name": "get_delay",
            "line": 96
          },
          {
            "name": "set_default",
            "line": 115
          },
          {
            "name": "get_default",
            "line": 120
          },
          {
            "name": "get_default_attempts",
            "line": 125
          },
          {
            "name": "__init__",
            "line": 144
          },
          {
            "name": "get_or_create",
            "line": 168
          },
          {
            "name": "set_default_threshold",
            "line": 188
          },
          {
            "name": "get_active_count",
            "line": 193
          },
          {
            "name": "should_allow_request",
            "line": 197
          },
          {
            "name": "_should_attempt_reset",
            "line": 212
          },
          {
            "name": "record_success",
            "line": 220
          },
          {
            "name": "record_failure",
            "line": 230
          },
          {
            "name": "__init__",
            "line": 248
          },
          {
            "name": "__init__",
            "line": 263
          },
          {
            "name": "register_collector",
            "line": 267
          },
          {
            "name": "register_fallback",
            "line": 271
          },
          {
            "name": "handle_error",
            "line": 275
          },
          {
            "name": "decorator",
            "line": 341
          },
          {
            "name": "decorator",
            "line": 452
          },
          {
            "name": "decorator",
            "line": 615
          },
          {
            "name": "decorator",
            "line": 662
          },
          {
            "name": "decorator",
            "line": 713
          },
          {
            "name": "decorator",
            "line": 770
          },
          {
            "name": "wrapper",
            "line": 343
          },
          {
            "name": "async_wrapper",
            "line": 454,
            "async": true
          },
          {
            "name": "sync_wrapper",
            "line": 514
          },
          {
            "name": "wrapper",
            "line": 617
          },
          {
            "name": "wrapper",
            "line": 664
          },
          {
            "name": "wrapper",
            "line": 715
          }
        ],
        "line_count": 812
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_amms_storage_comprehensive",
        "integration.test_modular_architecture_integration",
        "errors.test_handlers",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "BackoffStrategy": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "get_delay": false
            }
          },
          "ExponentialBackoff": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 2,
            "method_coverage": {
              "__init__": true,
              "get_delay": false
            }
          },
          "LinearBackoff": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 2,
            "method_coverage": {
              "__init__": true,
              "get_delay": false
            }
          },
          "ConstantBackoff": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 2,
            "method_coverage": {
              "__init__": true,
              "get_delay": false
            }
          },
          "RetryPolicy": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 3,
            "method_coverage": {
              "set_default": false,
              "get_default": false,
              "get_default_attempts": false
            }
          },
          "CircuitState": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CircuitBreaker": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": true,
              "get_or_create": false,
              "set_default_threshold": false,
              "get_active_count": false,
              "should_allow_request": false,
              "_should_attempt_reset": false,
              "record_success": false,
              "record_failure": false
            }
          },
          "CircuitBreakerError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ErrorHandler": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 4,
            "method_coverage": {
              "__init__": true,
              "register_collector": false,
              "register_fallback": false,
              "handle_error": false
            }
          }
        },
        "functions": {
          "handle_errors": true,
          "retry": true,
          "circuit_breaker": true,
          "fallback": true,
          "log_errors": true,
          "combine_decorators": true,
          "register_error_collector": true,
          "register_global_fallback": true,
          "get_circuit_breaker": true,
          "reset_circuit_breaker": true,
          "get_all_circuit_breakers": true,
          "get_delay": true,
          "__init__": true,
          "set_default": true,
          "get_default": true,
          "get_default_attempts": true,
          "get_or_create": false,
          "set_default_threshold": false,
          "get_active_count": true,
          "should_allow_request": true,
          "_should_attempt_reset": false,
          "record_success": true,
          "record_failure": true,
          "register_collector": true,
          "register_fallback": true,
          "handle_error": true,
          "decorator": true,
          "wrapper": true,
          "async_wrapper": false,
          "sync_wrapper": false
        },
        "overall": 0.6
      },
      "gaps": [
        "Class BackoffStrategy not tested",
        "Class ExponentialBackoff methods not tested: ['get_delay']",
        "Class LinearBackoff methods not tested: ['get_delay']",
        "Class ConstantBackoff methods not tested: ['get_delay']",
        "Class RetryPolicy methods not tested: ['set_default', 'get_default', 'get_default_attempts']",
        "Class CircuitBreaker methods not tested: ['get_or_create', 'set_default_threshold', 'get_active_count', 'should_allow_request', '_should_attempt_reset', 'record_success', 'record_failure']",
        "Class ErrorHandler methods not tested: ['register_collector', 'register_fallback', 'handle_error']",
        "Function get_or_create not tested",
        "Function set_default_threshold not tested",
        "Function _should_attempt_reset not tested",
        "Function async_wrapper not tested",
        "Function sync_wrapper not tested"
      ]
    },
    "memmimic.errors.context": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/errors/context.py",
        "classes": [
          {
            "name": "ErrorContext",
            "methods": [
              "to_dict",
              "add_metadata",
              "set_performance_data",
              "set_call_stack_info",
              "set_business_context",
              "clone"
            ],
            "line": 19
          },
          {
            "name": "ErrorContextManager",
            "methods": [
              "__init__",
              "set_global_context",
              "get_global_context",
              "set_current_context",
              "get_current_context",
              "clear_current_context",
              "create_context",
              "with_context"
            ],
            "line": 174
          },
          {
            "name": "_ErrorContextContextManager",
            "methods": [
              "__init__",
              "__enter__",
              "__exit__"
            ],
            "line": 265
          }
        ],
        "functions": [
          {
            "name": "create_error_context",
            "line": 322
          },
          {
            "name": "get_current_context",
            "line": 366
          },
          {
            "name": "set_current_context",
            "line": 381
          },
          {
            "name": "clear_current_context",
            "line": 395
          },
          {
            "name": "set_global_context",
            "line": 405
          },
          {
            "name": "get_global_context",
            "line": 422
          },
          {
            "name": "with_error_context",
            "line": 437
          },
          {
            "name": "add_context_metadata",
            "line": 501
          },
          {
            "name": "get_context_correlation_id",
            "line": 519
          },
          {
            "name": "extract_call_stack_info",
            "line": 535
          },
          {
            "name": "auto_set_call_stack_context",
            "line": 564
          },
          {
            "name": "to_dict",
            "line": 54
          },
          {
            "name": "add_metadata",
            "line": 86
          },
          {
            "name": "set_performance_data",
            "line": 91
          },
          {
            "name": "set_call_stack_info",
            "line": 106
          },
          {
            "name": "set_business_context",
            "line": 124
          },
          {
            "name": "clone",
            "line": 139
          },
          {
            "name": "__init__",
            "line": 182
          },
          {
            "name": "set_global_context",
            "line": 186
          },
          {
            "name": "get_global_context",
            "line": 190
          },
          {
            "name": "set_current_context",
            "line": 194
          },
          {
            "name": "get_current_context",
            "line": 198
          },
          {
            "name": "clear_current_context",
            "line": 202
          },
          {
            "name": "create_context",
            "line": 207
          },
          {
            "name": "with_context",
            "line": 245
          },
          {
            "name": "__init__",
            "line": 268
          },
          {
            "name": "__enter__",
            "line": 282
          },
          {
            "name": "__exit__",
            "line": 301
          }
        ],
        "line_count": 576
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_amms_storage_comprehensive",
        "integration.test_modular_architecture_integration",
        "errors.test_logging_config",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ErrorContext": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 6,
            "method_coverage": {
              "to_dict": false,
              "add_metadata": false,
              "set_performance_data": false,
              "set_call_stack_info": false,
              "set_business_context": false,
              "clone": false
            }
          },
          "ErrorContextManager": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": true,
              "set_global_context": false,
              "get_global_context": false,
              "set_current_context": false,
              "get_current_context": false,
              "clear_current_context": false,
              "create_context": false,
              "with_context": false
            }
          },
          "_ErrorContextContextManager": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 3,
            "method_coverage": {
              "__init__": true,
              "__enter__": false,
              "__exit__": false
            }
          }
        },
        "functions": {
          "create_error_context": true,
          "get_current_context": false,
          "set_current_context": false,
          "clear_current_context": false,
          "set_global_context": false,
          "get_global_context": false,
          "with_error_context": true,
          "add_context_metadata": false,
          "get_context_correlation_id": false,
          "extract_call_stack_info": false,
          "auto_set_call_stack_context": false,
          "to_dict": true,
          "add_metadata": false,
          "set_performance_data": false,
          "set_call_stack_info": false,
          "set_business_context": false,
          "clone": false,
          "__init__": true,
          "create_context": false,
          "with_context": true,
          "__enter__": false,
          "__exit__": false
        },
        "overall": 0.1935483870967742
      },
      "gaps": [
        "Class ErrorContext methods not tested: ['to_dict', 'add_metadata', 'set_performance_data', 'set_call_stack_info', 'set_business_context', 'clone']",
        "Class ErrorContextManager not tested",
        "Class _ErrorContextContextManager not tested",
        "Function get_current_context not tested",
        "Function set_current_context not tested",
        "Function clear_current_context not tested",
        "Function set_global_context not tested",
        "Function get_global_context not tested",
        "Function add_context_metadata not tested",
        "Function get_context_correlation_id not tested",
        "Function extract_call_stack_info not tested",
        "Function auto_set_call_stack_context not tested",
        "Function add_metadata not tested",
        "Function set_performance_data not tested",
        "Function set_call_stack_info not tested",
        "Function set_business_context not tested",
        "Function clone not tested",
        "Function create_context not tested",
        "Function __enter__ not tested",
        "Function __exit__ not tested"
      ]
    },
    "memmimic.errors.exceptions": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/errors/exceptions.py",
        "classes": [
          {
            "name": "ErrorSeverity",
            "methods": [],
            "line": 14
          },
          {
            "name": "MemMimicError",
            "methods": [
              "__init__",
              "_get_original_exception",
              "to_dict",
              "add_context",
              "set_correlation_id",
              "set_component",
              "set_operation",
              "__str__",
              "__repr__"
            ],
            "line": 23
          },
          {
            "name": "SystemError",
            "methods": [
              "__init__"
            ],
            "line": 138
          },
          {
            "name": "ConfigurationError",
            "methods": [
              "__init__"
            ],
            "line": 148
          },
          {
            "name": "InitializationError",
            "methods": [
              "__init__"
            ],
            "line": 165
          },
          {
            "name": "ResourceError",
            "methods": [
              "__init__"
            ],
            "line": 178
          },
          {
            "name": "MemMimicMemoryError",
            "methods": [
              "__init__"
            ],
            "line": 200
          },
          {
            "name": "MemoryStorageError",
            "methods": [
              "__init__"
            ],
            "line": 217
          },
          {
            "name": "MemoryRetrievalError",
            "methods": [
              "__init__"
            ],
            "line": 230
          },
          {
            "name": "MemoryCorruptionError",
            "methods": [
              "__init__"
            ],
            "line": 242
          },
          {
            "name": "MemoryValidationError",
            "methods": [
              "__init__"
            ],
            "line": 254
          },
          {
            "name": "CXDError",
            "methods": [
              "__init__"
            ],
            "line": 275
          },
          {
            "name": "ClassificationError",
            "methods": [
              "__init__"
            ],
            "line": 286
          },
          {
            "name": "TrainingError",
            "methods": [
              "__init__"
            ],
            "line": 306
          },
          {
            "name": "ModelError",
            "methods": [
              "__init__"
            ],
            "line": 325
          },
          {
            "name": "CXDIntegrationError",
            "methods": [
              "__init__"
            ],
            "line": 342
          },
          {
            "name": "MCPError",
            "methods": [
              "__init__"
            ],
            "line": 363
          },
          {
            "name": "ProtocolError",
            "methods": [
              "__init__"
            ],
            "line": 380
          },
          {
            "name": "HandlerError",
            "methods": [
              "__init__"
            ],
            "line": 397
          },
          {
            "name": "CommunicationError",
            "methods": [
              "__init__"
            ],
            "line": 414
          },
          {
            "name": "MCPValidationError",
            "methods": [
              "__init__"
            ],
            "line": 425
          },
          {
            "name": "APIError",
            "methods": [
              "__init__"
            ],
            "line": 446
          },
          {
            "name": "ValidationError",
            "methods": [
              "__init__"
            ],
            "line": 463
          },
          {
            "name": "AuthenticationError",
            "methods": [
              "__init__"
            ],
            "line": 481
          },
          {
            "name": "AuthorizationError",
            "methods": [
              "__init__"
            ],
            "line": 494
          },
          {
            "name": "RateLimitError",
            "methods": [
              "__init__"
            ],
            "line": 512
          },
          {
            "name": "ExternalServiceError",
            "methods": [
              "__init__"
            ],
            "line": 536
          },
          {
            "name": "DatabaseError",
            "methods": [
              "__init__"
            ],
            "line": 553
          },
          {
            "name": "NetworkError",
            "methods": [
              "__init__"
            ],
            "line": 575
          },
          {
            "name": "TimeoutError",
            "methods": [
              "__init__"
            ],
            "line": 594
          },
          {
            "name": "ExternalAPIError",
            "methods": [
              "__init__"
            ],
            "line": 611
          }
        ],
        "functions": [
          {
            "name": "create_error",
            "line": 634
          },
          {
            "name": "is_retriable_error",
            "line": 692
          },
          {
            "name": "get_error_severity",
            "line": 729
          },
          {
            "name": "__init__",
            "line": 42
          },
          {
            "name": "_get_original_exception",
            "line": 69
          },
          {
            "name": "to_dict",
            "line": 73
          },
          {
            "name": "add_context",
            "line": 91
          },
          {
            "name": "set_correlation_id",
            "line": 96
          },
          {
            "name": "set_component",
            "line": 101
          },
          {
            "name": "set_operation",
            "line": 106
          },
          {
            "name": "__str__",
            "line": 111
          },
          {
            "name": "__repr__",
            "line": 130
          },
          {
            "name": "__init__",
            "line": 141
          },
          {
            "name": "__init__",
            "line": 151
          },
          {
            "name": "__init__",
            "line": 168
          },
          {
            "name": "__init__",
            "line": 181
          },
          {
            "name": "__init__",
            "line": 203
          },
          {
            "name": "__init__",
            "line": 220
          },
          {
            "name": "__init__",
            "line": 233
          },
          {
            "name": "__init__",
            "line": 245
          },
          {
            "name": "__init__",
            "line": 257
          },
          {
            "name": "__init__",
            "line": 278
          },
          {
            "name": "__init__",
            "line": 289
          },
          {
            "name": "__init__",
            "line": 309
          },
          {
            "name": "__init__",
            "line": 328
          },
          {
            "name": "__init__",
            "line": 345
          },
          {
            "name": "__init__",
            "line": 366
          },
          {
            "name": "__init__",
            "line": 383
          },
          {
            "name": "__init__",
            "line": 400
          },
          {
            "name": "__init__",
            "line": 417
          },
          {
            "name": "__init__",
            "line": 428
          },
          {
            "name": "__init__",
            "line": 449
          },
          {
            "name": "__init__",
            "line": 466
          },
          {
            "name": "__init__",
            "line": 484
          },
          {
            "name": "__init__",
            "line": 497
          },
          {
            "name": "__init__",
            "line": 515
          },
          {
            "name": "__init__",
            "line": 539
          },
          {
            "name": "__init__",
            "line": 556
          },
          {
            "name": "__init__",
            "line": 578
          },
          {
            "name": "__init__",
            "line": 597
          },
          {
            "name": "__init__",
            "line": 614
          }
        ],
        "line_count": 750
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_amms_storage_comprehensive",
        "integration.test_modular_architecture_integration",
        "errors.test_handlers",
        "errors.test_exceptions",
        "errors.test_logging_config",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ErrorSeverity": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemMimicError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 9,
            "method_coverage": {
              "__init__": true,
              "_get_original_exception": false,
              "to_dict": false,
              "add_context": false,
              "set_correlation_id": false,
              "set_component": false,
              "set_operation": false,
              "__str__": false,
              "__repr__": false
            }
          },
          "SystemError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ConfigurationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "InitializationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ResourceError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MemMimicMemoryError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MemoryStorageError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MemoryRetrievalError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MemoryCorruptionError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MemoryValidationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "CXDError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ClassificationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "TrainingError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ModelError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "CXDIntegrationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MCPError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ProtocolError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "HandlerError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "CommunicationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "MCPValidationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "APIError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ValidationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "AuthenticationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "AuthorizationError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "RateLimitError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ExternalServiceError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "DatabaseError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "NetworkError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "TimeoutError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "ExternalAPIError": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          }
        },
        "functions": {
          "create_error": true,
          "is_retriable_error": true,
          "get_error_severity": true,
          "__init__": true,
          "_get_original_exception": true,
          "to_dict": true,
          "add_context": true,
          "set_correlation_id": true,
          "set_component": true,
          "set_operation": true,
          "__str__": false,
          "__repr__": false
        },
        "overall": 0.5694444444444444
      },
      "gaps": [
        "Class MemMimicError methods not tested: ['_get_original_exception', 'to_dict', 'add_context', 'set_correlation_id', 'set_component', 'set_operation', '__str__', '__repr__']",
        "Function __str__ not tested",
        "Function __repr__ not tested"
      ]
    },
    "memmimic.tales.tale_manager": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/tales/tale_manager.py",
        "classes": [
          {
            "name": "Tale",
            "methods": [
              "__init__",
              "safe_name",
              "get_filename",
              "to_file_content",
              "from_file_content",
              "update_content",
              "increment_usage"
            ],
            "line": 26
          },
          {
            "name": "TaleManager",
            "methods": [
              "__init__",
              "ensure_directory_structure",
              "parse_category",
              "get_category_path",
              "get_valid_categories",
              "create_tale",
              "load_tale",
              "update_tale",
              "list_tales",
              "_scan_category_for_tales",
              "_extract_tale_info",
              "_sort_tales_list",
              "search_tales",
              "delete_tale",
              "backup_tales",
              "get_statistics",
              "health_check",
              "cleanup",
              "_save_tale_to_file"
            ],
            "line": 166
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 29
          },
          {
            "name": "safe_name",
            "line": 45
          },
          {
            "name": "get_filename",
            "line": 53
          },
          {
            "name": "to_file_content",
            "line": 63
          },
          {
            "name": "from_file_content",
            "line": 90
          },
          {
            "name": "update_content",
            "line": 153
          },
          {
            "name": "increment_usage",
            "line": 160
          },
          {
            "name": "__init__",
            "line": 197
          },
          {
            "name": "ensure_directory_structure",
            "line": 217
          },
          {
            "name": "parse_category",
            "line": 232
          },
          {
            "name": "get_category_path",
            "line": 244
          },
          {
            "name": "get_valid_categories",
            "line": 266
          },
          {
            "name": "create_tale",
            "line": 288
          },
          {
            "name": "load_tale",
            "line": 315
          },
          {
            "name": "update_tale",
            "line": 378
          },
          {
            "name": "list_tales",
            "line": 401
          },
          {
            "name": "_scan_category_for_tales",
            "line": 411
          },
          {
            "name": "_extract_tale_info",
            "line": 430
          },
          {
            "name": "_sort_tales_list",
            "line": 455
          },
          {
            "name": "search_tales",
            "line": 471
          },
          {
            "name": "delete_tale",
            "line": 516
          },
          {
            "name": "backup_tales",
            "line": 571
          },
          {
            "name": "get_statistics",
            "line": 602
          },
          {
            "name": "health_check",
            "line": 627
          },
          {
            "name": "cleanup",
            "line": 684
          },
          {
            "name": "_save_tale_to_file",
            "line": 700
          }
        ],
        "line_count": 707
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "Tale": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 7,
            "method_coverage": {
              "__init__": true,
              "safe_name": false,
              "get_filename": false,
              "to_file_content": false,
              "from_file_content": false,
              "update_content": false,
              "increment_usage": false
            }
          },
          "TaleManager": {
            "tested": false,
            "methods_tested": 2,
            "total_methods": 19,
            "method_coverage": {
              "__init__": true,
              "ensure_directory_structure": false,
              "parse_category": false,
              "get_category_path": false,
              "get_valid_categories": false,
              "create_tale": false,
              "load_tale": false,
              "update_tale": false,
              "list_tales": false,
              "_scan_category_for_tales": false,
              "_extract_tale_info": false,
              "_sort_tales_list": false,
              "search_tales": false,
              "delete_tale": false,
              "backup_tales": false,
              "get_statistics": false,
              "health_check": false,
              "cleanup": true,
              "_save_tale_to_file": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "safe_name": false,
          "get_filename": false,
          "to_file_content": false,
          "from_file_content": false,
          "update_content": false,
          "increment_usage": false,
          "ensure_directory_structure": false,
          "parse_category": false,
          "get_category_path": false,
          "get_valid_categories": false,
          "create_tale": false,
          "load_tale": true,
          "update_tale": false,
          "list_tales": false,
          "_scan_category_for_tales": false,
          "_extract_tale_info": false,
          "_sort_tales_list": false,
          "search_tales": false,
          "delete_tale": true,
          "backup_tales": false,
          "get_statistics": false,
          "health_check": false,
          "cleanup": true,
          "_save_tale_to_file": false
        },
        "overall": 0.17857142857142858
      },
      "gaps": [
        "Class Tale methods not tested: ['safe_name', 'get_filename', 'to_file_content', 'from_file_content', 'update_content', 'increment_usage']",
        "Class TaleManager not tested",
        "Function safe_name not tested",
        "Function get_filename not tested",
        "Function to_file_content not tested",
        "Function from_file_content not tested",
        "Function update_content not tested",
        "Function increment_usage not tested",
        "Function ensure_directory_structure not tested",
        "Function parse_category not tested",
        "Function get_category_path not tested",
        "Function get_valid_categories not tested",
        "Function create_tale not tested",
        "Function update_tale not tested",
        "Function list_tales not tested",
        "Function _scan_category_for_tales not tested",
        "Function _extract_tale_info not tested",
        "Function _sort_tales_list not tested",
        "Function search_tales not tested",
        "Function backup_tales not tested",
        "Function get_statistics not tested",
        "Function health_check not tested",
        "Function _save_tale_to_file not tested"
      ]
    },
    "memmimic.config.security": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/config/security.py",
        "classes": [
          {
            "name": "CredentialSecurityError",
            "methods": [],
            "line": 19
          },
          {
            "name": "SecureCredentials",
            "methods": [
              "__post_init__",
              "_validate_credentials",
              "_is_placeholder",
              "_looks_like_exposed_key",
              "_check_security_best_practices",
              "get_api_key",
              "validate_required_keys",
              "security_summary"
            ],
            "line": 25
          }
        ],
        "functions": [
          {
            "name": "load_secure_credentials",
            "line": 198
          },
          {
            "name": "_load_env_file",
            "line": 238
          },
          {
            "name": "_parse_bool",
            "line": 253
          },
          {
            "name": "get_credentials",
            "line": 262
          },
          {
            "name": "initialize_credentials",
            "line": 270
          },
          {
            "name": "audit_credential_security",
            "line": 296
          },
          {
            "name": "_calculate_security_score",
            "line": 326
          },
          {
            "name": "_generate_security_recommendations",
            "line": 353
          },
          {
            "name": "__post_init__",
            "line": 48
          },
          {
            "name": "_validate_credentials",
            "line": 53
          },
          {
            "name": "_is_placeholder",
            "line": 91
          },
          {
            "name": "_looks_like_exposed_key",
            "line": 100
          },
          {
            "name": "_check_security_best_practices",
            "line": 109
          },
          {
            "name": "get_api_key",
            "line": 123
          },
          {
            "name": "validate_required_keys",
            "line": 149
          },
          {
            "name": "security_summary",
            "line": 170
          }
        ],
        "line_count": 376
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_performance_config",
        "test_amms_storage_comprehensive",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "CredentialSecurityError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SecureCredentials": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 8,
            "method_coverage": {
              "__post_init__": false,
              "_validate_credentials": false,
              "_is_placeholder": false,
              "_looks_like_exposed_key": false,
              "_check_security_best_practices": false,
              "get_api_key": false,
              "validate_required_keys": false,
              "security_summary": false
            }
          }
        },
        "functions": {
          "load_secure_credentials": false,
          "_load_env_file": false,
          "_parse_bool": false,
          "get_credentials": false,
          "initialize_credentials": false,
          "audit_credential_security": true,
          "_calculate_security_score": false,
          "_generate_security_recommendations": false,
          "__post_init__": false,
          "_validate_credentials": false,
          "_is_placeholder": false,
          "_looks_like_exposed_key": false,
          "_check_security_best_practices": false,
          "get_api_key": false,
          "validate_required_keys": false,
          "security_summary": false
        },
        "overall": 0.1111111111111111
      },
      "gaps": [
        "Class CredentialSecurityError not tested",
        "Class SecureCredentials methods not tested: ['__post_init__', '_validate_credentials', '_is_placeholder', '_looks_like_exposed_key', '_check_security_best_practices', 'get_api_key', 'validate_required_keys', 'security_summary']",
        "Function load_secure_credentials not tested",
        "Function _load_env_file not tested",
        "Function _parse_bool not tested",
        "Function get_credentials not tested",
        "Function initialize_credentials not tested",
        "Function _calculate_security_score not tested",
        "Function _generate_security_recommendations not tested",
        "Function __post_init__ not tested",
        "Function _validate_credentials not tested",
        "Function _is_placeholder not tested",
        "Function _looks_like_exposed_key not tested",
        "Function _check_security_best_practices not tested",
        "Function get_api_key not tested",
        "Function validate_required_keys not tested",
        "Function security_summary not tested"
      ]
    },
    "memmimic.memory.quality_gate": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/quality_gate.py",
        "classes": [
          {
            "name": "MemoryQualityGate",
            "methods": [
              "__init__",
              "_calculate_text_similarity",
              "_calculate_simple_quality_score",
              "_generate_improvement_suggestion",
              "get_pending_reviews"
            ],
            "line": 21
          }
        ],
        "functions": [
          {
            "name": "create_quality_gate",
            "line": 325
          },
          {
            "name": "__init__",
            "line": 32
          },
          {
            "name": "evaluate_memory",
            "line": 50,
            "async": true
          },
          {
            "name": "_find_duplicates",
            "line": 121,
            "async": true
          },
          {
            "name": "_find_duplicates_fallback",
            "line": 146,
            "async": true
          },
          {
            "name": "_calculate_text_similarity",
            "line": 163
          },
          {
            "name": "_assess_content_quality",
            "line": 176,
            "async": true
          },
          {
            "name": "_calculate_simple_quality_score",
            "line": 224
          },
          {
            "name": "_generate_improvement_suggestion",
            "line": 264
          },
          {
            "name": "queue_for_review",
            "line": 282,
            "async": true
          },
          {
            "name": "get_pending_reviews",
            "line": 286
          },
          {
            "name": "approve_pending",
            "line": 290,
            "async": true
          },
          {
            "name": "reject_pending",
            "line": 319,
            "async": true
          }
        ],
        "line_count": 328
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemoryQualityGate": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 5,
            "method_coverage": {
              "__init__": true,
              "_calculate_text_similarity": false,
              "_calculate_simple_quality_score": false,
              "_generate_improvement_suggestion": false,
              "get_pending_reviews": false
            }
          }
        },
        "functions": {
          "create_quality_gate": false,
          "__init__": true,
          "evaluate_memory": false,
          "_find_duplicates": false,
          "_find_duplicates_fallback": false,
          "_calculate_text_similarity": false,
          "_assess_content_quality": false,
          "_calculate_simple_quality_score": false,
          "_generate_improvement_suggestion": false,
          "queue_for_review": false,
          "get_pending_reviews": false,
          "approve_pending": false,
          "reject_pending": false
        },
        "overall": 0.07142857142857142
      },
      "gaps": [
        "Class MemoryQualityGate not tested",
        "Function create_quality_gate not tested",
        "Function evaluate_memory not tested",
        "Function _find_duplicates not tested",
        "Function _find_duplicates_fallback not tested",
        "Function _calculate_text_similarity not tested",
        "Function _assess_content_quality not tested",
        "Function _calculate_simple_quality_score not tested",
        "Function _generate_improvement_suggestion not tested",
        "Function queue_for_review not tested",
        "Function get_pending_reviews not tested",
        "Function approve_pending not tested",
        "Function reject_pending not tested"
      ]
    },
    "memmimic.memory.semantic_similarity": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/semantic_similarity.py",
        "classes": [
          {
            "name": "SemanticSimilarityDetector",
            "methods": [
              "__init__",
              "_initialize_model",
              "compute_similarity",
              "_cosine_similarity",
              "_word_overlap_similarity",
              "is_likely_duplicate"
            ],
            "line": 16
          }
        ],
        "functions": [
          {
            "name": "get_semantic_detector",
            "line": 196
          },
          {
            "name": "__init__",
            "line": 24
          },
          {
            "name": "_initialize_model",
            "line": 30
          },
          {
            "name": "compute_similarity",
            "line": 39
          },
          {
            "name": "_cosine_similarity",
            "line": 66
          },
          {
            "name": "_word_overlap_similarity",
            "line": 77
          },
          {
            "name": "find_similar_memories",
            "line": 90,
            "async": true
          },
          {
            "name": "is_likely_duplicate",
            "line": 126
          },
          {
            "name": "batch_similarity_check",
            "line": 141,
            "async": true
          }
        ],
        "line_count": 201
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SemanticSimilarityDetector": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "_initialize_model": false,
              "compute_similarity": false,
              "_cosine_similarity": false,
              "_word_overlap_similarity": false,
              "is_likely_duplicate": false
            }
          }
        },
        "functions": {
          "get_semantic_detector": false,
          "__init__": true,
          "_initialize_model": false,
          "compute_similarity": false,
          "_cosine_similarity": false,
          "_word_overlap_similarity": false,
          "find_similar_memories": false,
          "is_likely_duplicate": false,
          "batch_similarity_check": false
        },
        "overall": 0.1
      },
      "gaps": [
        "Class SemanticSimilarityDetector not tested",
        "Function get_semantic_detector not tested",
        "Function _initialize_model not tested",
        "Function compute_similarity not tested",
        "Function _cosine_similarity not tested",
        "Function _word_overlap_similarity not tested",
        "Function find_similar_memories not tested",
        "Function is_likely_duplicate not tested",
        "Function batch_similarity_check not tested"
      ]
    },
    "memmimic.memory.analytics_dashboard": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/analytics_dashboard.py",
        "classes": [
          {
            "name": "DashboardMetrics",
            "methods": [],
            "line": 26
          },
          {
            "name": "AdvancedAnalyticsDashboard",
            "methods": [
              "__init__",
              "generate_dashboard_report",
              "_calculate_system_health",
              "_analyze_trends",
              "_generate_insights",
              "_generate_recommendations",
              "_generate_alerts",
              "_empty_dashboard_metrics",
              "_save_dashboard_data",
              "_load_dashboard_data",
              "format_dashboard_report",
              "get_historical_trends"
            ],
            "line": 55
          }
        ],
        "functions": [
          {
            "name": "create_analytics_dashboard",
            "line": 662
          },
          {
            "name": "__init__",
            "line": 63
          },
          {
            "name": "generate_dashboard_report",
            "line": 105
          },
          {
            "name": "_calculate_system_health",
            "line": 185
          },
          {
            "name": "_analyze_trends",
            "line": 209
          },
          {
            "name": "_generate_insights",
            "line": 264
          },
          {
            "name": "_generate_recommendations",
            "line": 335
          },
          {
            "name": "_generate_alerts",
            "line": 384
          },
          {
            "name": "_empty_dashboard_metrics",
            "line": 429
          },
          {
            "name": "_save_dashboard_data",
            "line": 450
          },
          {
            "name": "_load_dashboard_data",
            "line": 494
          },
          {
            "name": "format_dashboard_report",
            "line": 533
          },
          {
            "name": "get_historical_trends",
            "line": 622
          }
        ],
        "line_count": 702
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "DashboardMetrics": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "AdvancedAnalyticsDashboard": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 12,
            "method_coverage": {
              "__init__": true,
              "generate_dashboard_report": false,
              "_calculate_system_health": false,
              "_analyze_trends": false,
              "_generate_insights": false,
              "_generate_recommendations": false,
              "_generate_alerts": false,
              "_empty_dashboard_metrics": false,
              "_save_dashboard_data": false,
              "_load_dashboard_data": false,
              "format_dashboard_report": false,
              "get_historical_trends": false
            }
          }
        },
        "functions": {
          "create_analytics_dashboard": false,
          "__init__": true,
          "generate_dashboard_report": false,
          "_calculate_system_health": false,
          "_analyze_trends": false,
          "_generate_insights": false,
          "_generate_recommendations": false,
          "_generate_alerts": false,
          "_empty_dashboard_metrics": false,
          "_save_dashboard_data": false,
          "_load_dashboard_data": false,
          "format_dashboard_report": false,
          "get_historical_trends": false
        },
        "overall": 0.06666666666666667
      },
      "gaps": [
        "Class DashboardMetrics not tested",
        "Class AdvancedAnalyticsDashboard not tested",
        "Function create_analytics_dashboard not tested",
        "Function generate_dashboard_report not tested",
        "Function _calculate_system_health not tested",
        "Function _analyze_trends not tested",
        "Function _generate_insights not tested",
        "Function _generate_recommendations not tested",
        "Function _generate_alerts not tested",
        "Function _empty_dashboard_metrics not tested",
        "Function _save_dashboard_data not tested",
        "Function _load_dashboard_data not tested",
        "Function format_dashboard_report not tested",
        "Function get_historical_trends not tested"
      ]
    },
    "memmimic.memory.active_manager": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active_manager.py",
        "classes": [
          {
            "name": "ActiveMemoryConfig",
            "methods": [],
            "line": 24
          },
          {
            "name": "ActiveMemoryPool",
            "methods": [
              "__init__",
              "_get_connection",
              "add_memory",
              "search_active_memories",
              "get_active_pool_status",
              "maintain_pool",
              "_calculate_importance_score",
              "_get_memory_type_weight",
              "_record_importance_calculation",
              "_refresh_active_cache",
              "_is_cache_stale",
              "_search_and_rank",
              "_calculate_relevance_score",
              "_update_access_pattern",
              "_maybe_trigger_maintenance",
              "_needs_maintenance",
              "_update_importance_scores",
              "_archive_stale_memories",
              "_prune_memories",
              "_update_consolidation_groups",
              "_update_performance_metrics"
            ],
            "line": 47
          }
        ],
        "functions": [
          {
            "name": "create_active_memory_pool",
            "line": 611
          },
          {
            "name": "__init__",
            "line": 59
          },
          {
            "name": "_get_connection",
            "line": 81
          },
          {
            "name": "add_memory",
            "line": 99
          },
          {
            "name": "search_active_memories",
            "line": 173
          },
          {
            "name": "get_active_pool_status",
            "line": 209
          },
          {
            "name": "maintain_pool",
            "line": 284
          },
          {
            "name": "_calculate_importance_score",
            "line": 331
          },
          {
            "name": "_get_memory_type_weight",
            "line": 368
          },
          {
            "name": "_record_importance_calculation",
            "line": 380
          },
          {
            "name": "_refresh_active_cache",
            "line": 393
          },
          {
            "name": "_is_cache_stale",
            "line": 413
          },
          {
            "name": "_search_and_rank",
            "line": 419
          },
          {
            "name": "_calculate_relevance_score",
            "line": 450
          },
          {
            "name": "_update_access_pattern",
            "line": 486
          },
          {
            "name": "_maybe_trigger_maintenance",
            "line": 511
          },
          {
            "name": "_needs_maintenance",
            "line": 523
          },
          {
            "name": "_update_importance_scores",
            "line": 536
          },
          {
            "name": "_archive_stale_memories",
            "line": 544
          },
          {
            "name": "_prune_memories",
            "line": 563
          },
          {
            "name": "_update_consolidation_groups",
            "line": 581
          },
          {
            "name": "_update_performance_metrics",
            "line": 603
          },
          {
            "name": "run_maintenance",
            "line": 515
          }
        ],
        "line_count": 637
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ActiveMemoryConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ActiveMemoryPool": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 21,
            "method_coverage": {
              "__init__": true,
              "_get_connection": false,
              "add_memory": false,
              "search_active_memories": false,
              "get_active_pool_status": false,
              "maintain_pool": false,
              "_calculate_importance_score": false,
              "_get_memory_type_weight": false,
              "_record_importance_calculation": false,
              "_refresh_active_cache": false,
              "_is_cache_stale": false,
              "_search_and_rank": false,
              "_calculate_relevance_score": false,
              "_update_access_pattern": false,
              "_maybe_trigger_maintenance": false,
              "_needs_maintenance": false,
              "_update_importance_scores": false,
              "_archive_stale_memories": false,
              "_prune_memories": false,
              "_update_consolidation_groups": false,
              "_update_performance_metrics": false
            }
          }
        },
        "functions": {
          "create_active_memory_pool": false,
          "__init__": true,
          "_get_connection": false,
          "add_memory": false,
          "search_active_memories": false,
          "get_active_pool_status": false,
          "maintain_pool": false,
          "_calculate_importance_score": false,
          "_get_memory_type_weight": false,
          "_record_importance_calculation": false,
          "_refresh_active_cache": false,
          "_is_cache_stale": false,
          "_search_and_rank": false,
          "_calculate_relevance_score": false,
          "_update_access_pattern": false,
          "_maybe_trigger_maintenance": false,
          "_needs_maintenance": false,
          "_update_importance_scores": false,
          "_archive_stale_memories": false,
          "_prune_memories": false,
          "_update_consolidation_groups": false,
          "_update_performance_metrics": false,
          "run_maintenance": false
        },
        "overall": 0.04
      },
      "gaps": [
        "Class ActiveMemoryConfig not tested",
        "Class ActiveMemoryPool not tested",
        "Function create_active_memory_pool not tested",
        "Function _get_connection not tested",
        "Function add_memory not tested",
        "Function search_active_memories not tested",
        "Function get_active_pool_status not tested",
        "Function maintain_pool not tested",
        "Function _calculate_importance_score not tested",
        "Function _get_memory_type_weight not tested",
        "Function _record_importance_calculation not tested",
        "Function _refresh_active_cache not tested",
        "Function _is_cache_stale not tested",
        "Function _search_and_rank not tested",
        "Function _calculate_relevance_score not tested",
        "Function _update_access_pattern not tested",
        "Function _maybe_trigger_maintenance not tested",
        "Function _needs_maintenance not tested",
        "Function _update_importance_scores not tested",
        "Function _archive_stale_memories not tested",
        "Function _prune_memories not tested",
        "Function _update_consolidation_groups not tested",
        "Function _update_performance_metrics not tested",
        "Function run_maintenance not tested"
      ]
    },
    "memmimic.memory.active_schema": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active_schema.py",
        "classes": [
          {
            "name": "ActiveMemorySchema",
            "methods": [
              "__init__",
              "_get_connection",
              "create_enhanced_schema",
              "_create_indices",
              "_insert_default_config",
              "migrate_existing_memories",
              "_calculate_initial_importance",
              "_get_memory_type_weight",
              "check_enhanced_schema_exists",
              "get_schema_info"
            ],
            "line": 14
          }
        ],
        "functions": [
          {
            "name": "create_enhanced_memory_schema",
            "line": 357
          },
          {
            "name": "migrate_memory_database",
            "line": 364
          },
          {
            "name": "__init__",
            "line": 20
          },
          {
            "name": "_get_connection",
            "line": 25
          },
          {
            "name": "create_enhanced_schema",
            "line": 43
          },
          {
            "name": "_create_indices",
            "line": 181
          },
          {
            "name": "_insert_default_config",
            "line": 211
          },
          {
            "name": "migrate_existing_memories",
            "line": 223
          },
          {
            "name": "_calculate_initial_importance",
            "line": 278
          },
          {
            "name": "_get_memory_type_weight",
            "line": 300
          },
          {
            "name": "check_enhanced_schema_exists",
            "line": 312
          },
          {
            "name": "get_schema_info",
            "line": 327
          }
        ],
        "line_count": 398
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ActiveMemorySchema": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 10,
            "method_coverage": {
              "__init__": true,
              "_get_connection": false,
              "create_enhanced_schema": false,
              "_create_indices": false,
              "_insert_default_config": false,
              "migrate_existing_memories": false,
              "_calculate_initial_importance": false,
              "_get_memory_type_weight": false,
              "check_enhanced_schema_exists": false,
              "get_schema_info": false
            }
          }
        },
        "functions": {
          "create_enhanced_memory_schema": false,
          "migrate_memory_database": false,
          "__init__": true,
          "_get_connection": false,
          "create_enhanced_schema": false,
          "_create_indices": false,
          "_insert_default_config": false,
          "migrate_existing_memories": false,
          "_calculate_initial_importance": false,
          "_get_memory_type_weight": false,
          "check_enhanced_schema_exists": false,
          "get_schema_info": false
        },
        "overall": 0.07692307692307693
      },
      "gaps": [
        "Class ActiveMemorySchema not tested",
        "Function create_enhanced_memory_schema not tested",
        "Function migrate_memory_database not tested",
        "Function _get_connection not tested",
        "Function create_enhanced_schema not tested",
        "Function _create_indices not tested",
        "Function _insert_default_config not tested",
        "Function migrate_existing_memories not tested",
        "Function _calculate_initial_importance not tested",
        "Function _get_memory_type_weight not tested",
        "Function check_enhanced_schema_exists not tested",
        "Function get_schema_info not tested"
      ]
    },
    "memmimic.memory.persistent_queue": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/persistent_queue.py",
        "classes": [
          {
            "name": "PersistentMemoryQueue",
            "methods": [
              "__init__",
              "_init_database",
              "add_to_queue",
              "get_pending_reviews",
              "approve_memory",
              "reject_memory",
              "cleanup_old_entries",
              "get_memory_details",
              "get_queue_stats"
            ],
            "line": 18
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 26
          },
          {
            "name": "_init_database",
            "line": 31
          },
          {
            "name": "add_to_queue",
            "line": 61
          },
          {
            "name": "get_pending_reviews",
            "line": 105
          },
          {
            "name": "approve_memory",
            "line": 144
          },
          {
            "name": "reject_memory",
            "line": 168
          },
          {
            "name": "cleanup_old_entries",
            "line": 192
          },
          {
            "name": "get_memory_details",
            "line": 217
          },
          {
            "name": "get_queue_stats",
            "line": 254
          }
        ],
        "line_count": 272
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_integration"
      ],
      "test_coverage": {
        "classes": {
          "PersistentMemoryQueue": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 9,
            "method_coverage": {
              "__init__": true,
              "_init_database": false,
              "add_to_queue": false,
              "get_pending_reviews": false,
              "approve_memory": false,
              "reject_memory": false,
              "cleanup_old_entries": false,
              "get_memory_details": false,
              "get_queue_stats": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "_init_database": false,
          "add_to_queue": false,
          "get_pending_reviews": false,
          "approve_memory": false,
          "reject_memory": false,
          "cleanup_old_entries": false,
          "get_memory_details": false,
          "get_queue_stats": false
        },
        "overall": 0.1
      },
      "gaps": [
        "Class PersistentMemoryQueue not tested",
        "Function _init_database not tested",
        "Function add_to_queue not tested",
        "Function get_pending_reviews not tested",
        "Function approve_memory not tested",
        "Function reject_memory not tested",
        "Function cleanup_old_entries not tested",
        "Function get_memory_details not tested",
        "Function get_queue_stats not tested"
      ]
    },
    "memmimic.memory.socratic": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/socratic.py",
        "classes": [
          {
            "name": "SocraticDialogue",
            "methods": [
              "__init__",
              "to_memory"
            ],
            "line": 12
          },
          {
            "name": "SocraticEngine",
            "methods": [
              "__init__",
              "should_trigger_dialogue",
              "conduct_dialogue",
              "_question_assumptions",
              "_examine_evidence",
              "_explore_perspectives",
              "_dig_deeper",
              "_synthesize_insights"
            ],
            "line": 41
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 15
          },
          {
            "name": "to_memory",
            "line": 23
          },
          {
            "name": "__init__",
            "line": 44
          },
          {
            "name": "should_trigger_dialogue",
            "line": 103
          },
          {
            "name": "conduct_dialogue",
            "line": 157
          },
          {
            "name": "_question_assumptions",
            "line": 201
          },
          {
            "name": "_examine_evidence",
            "line": 234
          },
          {
            "name": "_explore_perspectives",
            "line": 270
          },
          {
            "name": "_dig_deeper",
            "line": 297
          },
          {
            "name": "_synthesize_insights",
            "line": 327
          }
        ],
        "line_count": 366
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SocraticDialogue": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 2,
            "method_coverage": {
              "__init__": true,
              "to_memory": false
            }
          },
          "SocraticEngine": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": true,
              "should_trigger_dialogue": false,
              "conduct_dialogue": false,
              "_question_assumptions": false,
              "_examine_evidence": false,
              "_explore_perspectives": false,
              "_dig_deeper": false,
              "_synthesize_insights": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "to_memory": false,
          "should_trigger_dialogue": false,
          "conduct_dialogue": false,
          "_question_assumptions": false,
          "_examine_evidence": false,
          "_explore_perspectives": false,
          "_dig_deeper": false,
          "_synthesize_insights": false
        },
        "overall": 0.08333333333333333
      },
      "gaps": [
        "Class SocraticDialogue not tested",
        "Class SocraticEngine not tested",
        "Function to_memory not tested",
        "Function should_trigger_dialogue not tested",
        "Function conduct_dialogue not tested",
        "Function _question_assumptions not tested",
        "Function _examine_evidence not tested",
        "Function _explore_perspectives not tested",
        "Function _dig_deeper not tested",
        "Function _synthesize_insights not tested"
      ]
    },
    "memmimic.memory.pattern_analyzer": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/pattern_analyzer.py",
        "classes": [
          {
            "name": "MemoryPattern",
            "methods": [],
            "line": 24
          },
          {
            "name": "MemoryTrend",
            "methods": [],
            "line": 38
          },
          {
            "name": "AnalyticsMetrics",
            "methods": [],
            "line": 51
          },
          {
            "name": "MemoryPatternAnalyzer",
            "methods": [
              "__init__",
              "analyze_memory_patterns",
              "_categorize_memories",
              "_run_all_pattern_analyses",
              "_create_final_metrics",
              "_analyze_temporal_patterns",
              "_extract_creation_times",
              "_detect_hourly_patterns",
              "_detect_daily_patterns",
              "_analyze_importance_trends",
              "_analyze_single_memory_trend",
              "_is_rising_importance",
              "_is_falling_importance",
              "_analyze_access_patterns",
              "_analyze_consciousness_patterns",
              "_calculate_health_metrics",
              "_generate_predictions",
              "_count_lifecycle_candidates",
              "_classify_lifecycle_candidate",
              "_empty_metrics",
              "_save_analytics_data",
              "_load_analytics_data",
              "get_analytics_summary"
            ],
            "line": 78
          }
        ],
        "functions": [
          {
            "name": "create_pattern_analyzer",
            "line": 785
          },
          {
            "name": "__init__",
            "line": 86
          },
          {
            "name": "analyze_memory_patterns",
            "line": 127
          },
          {
            "name": "_categorize_memories",
            "line": 176
          },
          {
            "name": "_run_all_pattern_analyses",
            "line": 193
          },
          {
            "name": "_create_final_metrics",
            "line": 202
          },
          {
            "name": "_analyze_temporal_patterns",
            "line": 252
          },
          {
            "name": "_extract_creation_times",
            "line": 275
          },
          {
            "name": "_detect_hourly_patterns",
            "line": 291
          },
          {
            "name": "_detect_daily_patterns",
            "line": 319
          },
          {
            "name": "_analyze_importance_trends",
            "line": 351
          },
          {
            "name": "_analyze_single_memory_trend",
            "line": 367
          },
          {
            "name": "_is_rising_importance",
            "line": 410
          },
          {
            "name": "_is_falling_importance",
            "line": 414
          },
          {
            "name": "_analyze_access_patterns",
            "line": 418
          },
          {
            "name": "_analyze_consciousness_patterns",
            "line": 467
          },
          {
            "name": "_calculate_health_metrics",
            "line": 520
          },
          {
            "name": "_generate_predictions",
            "line": 571
          },
          {
            "name": "_count_lifecycle_candidates",
            "line": 591
          },
          {
            "name": "_classify_lifecycle_candidate",
            "line": 605
          },
          {
            "name": "_empty_metrics",
            "line": 632
          },
          {
            "name": "_save_analytics_data",
            "line": 651
          },
          {
            "name": "_load_analytics_data",
            "line": 698
          },
          {
            "name": "get_analytics_summary",
            "line": 748
          }
        ],
        "line_count": 824
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemoryPattern": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryTrend": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "AnalyticsMetrics": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryPatternAnalyzer": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 23,
            "method_coverage": {
              "__init__": true,
              "analyze_memory_patterns": false,
              "_categorize_memories": false,
              "_run_all_pattern_analyses": false,
              "_create_final_metrics": false,
              "_analyze_temporal_patterns": false,
              "_extract_creation_times": false,
              "_detect_hourly_patterns": false,
              "_detect_daily_patterns": false,
              "_analyze_importance_trends": false,
              "_analyze_single_memory_trend": false,
              "_is_rising_importance": false,
              "_is_falling_importance": false,
              "_analyze_access_patterns": false,
              "_analyze_consciousness_patterns": false,
              "_calculate_health_metrics": false,
              "_generate_predictions": false,
              "_count_lifecycle_candidates": false,
              "_classify_lifecycle_candidate": false,
              "_empty_metrics": false,
              "_save_analytics_data": false,
              "_load_analytics_data": false,
              "get_analytics_summary": false
            }
          }
        },
        "functions": {
          "create_pattern_analyzer": false,
          "__init__": true,
          "analyze_memory_patterns": true,
          "_categorize_memories": false,
          "_run_all_pattern_analyses": false,
          "_create_final_metrics": false,
          "_analyze_temporal_patterns": false,
          "_extract_creation_times": false,
          "_detect_hourly_patterns": false,
          "_detect_daily_patterns": false,
          "_analyze_importance_trends": false,
          "_analyze_single_memory_trend": false,
          "_is_rising_importance": false,
          "_is_falling_importance": false,
          "_analyze_access_patterns": false,
          "_analyze_consciousness_patterns": false,
          "_calculate_health_metrics": false,
          "_generate_predictions": false,
          "_count_lifecycle_candidates": false,
          "_classify_lifecycle_candidate": false,
          "_empty_metrics": false,
          "_save_analytics_data": false,
          "_load_analytics_data": false,
          "get_analytics_summary": false
        },
        "overall": 0.07142857142857142
      },
      "gaps": [
        "Class MemoryPattern not tested",
        "Class MemoryTrend not tested",
        "Class AnalyticsMetrics not tested",
        "Class MemoryPatternAnalyzer not tested",
        "Function create_pattern_analyzer not tested",
        "Function _categorize_memories not tested",
        "Function _run_all_pattern_analyses not tested",
        "Function _create_final_metrics not tested",
        "Function _analyze_temporal_patterns not tested",
        "Function _extract_creation_times not tested",
        "Function _detect_hourly_patterns not tested",
        "Function _detect_daily_patterns not tested",
        "Function _analyze_importance_trends not tested",
        "Function _analyze_single_memory_trend not tested",
        "Function _is_rising_importance not tested",
        "Function _is_falling_importance not tested",
        "Function _analyze_access_patterns not tested",
        "Function _analyze_consciousness_patterns not tested",
        "Function _calculate_health_metrics not tested",
        "Function _generate_predictions not tested",
        "Function _count_lifecycle_candidates not tested",
        "Function _classify_lifecycle_candidate not tested",
        "Function _empty_metrics not tested",
        "Function _save_analytics_data not tested",
        "Function _load_analytics_data not tested",
        "Function get_analytics_summary not tested"
      ]
    },
    "memmimic.memory.predictive_manager": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/predictive_manager.py",
        "classes": [
          {
            "name": "PredictionType",
            "methods": [],
            "line": 22
          },
          {
            "name": "MemoryPrediction",
            "methods": [],
            "line": 35
          },
          {
            "name": "LifecycleRecommendation",
            "methods": [],
            "line": 50
          },
          {
            "name": "PredictiveMetrics",
            "methods": [],
            "line": 63
          },
          {
            "name": "PredictiveLifecycleManager",
            "methods": [
              "__init__",
              "generate_predictions",
              "_predict_lifecycle_transitions",
              "_predict_importance_changes",
              "_predict_consciousness_evolution",
              "_predict_access_patterns",
              "_calculate_prediction_confidence",
              "_generate_recommendations",
              "_calculate_system_accuracy",
              "_cleanup_old_predictions",
              "_empty_metrics",
              "_save_predictive_data",
              "_load_predictive_data",
              "get_high_priority_recommendations",
              "get_predictions_for_memory",
              "get_predictive_summary"
            ],
            "line": 75
          }
        ],
        "functions": [
          {
            "name": "create_predictive_manager",
            "line": 885
          },
          {
            "name": "__init__",
            "line": 83
          },
          {
            "name": "generate_predictions",
            "line": 135
          },
          {
            "name": "_predict_lifecycle_transitions",
            "line": 259
          },
          {
            "name": "_predict_importance_changes",
            "line": 380
          },
          {
            "name": "_predict_consciousness_evolution",
            "line": 455
          },
          {
            "name": "_predict_access_patterns",
            "line": 509
          },
          {
            "name": "_calculate_prediction_confidence",
            "line": 544
          },
          {
            "name": "_generate_recommendations",
            "line": 580
          },
          {
            "name": "_calculate_system_accuracy",
            "line": 653
          },
          {
            "name": "_cleanup_old_predictions",
            "line": 664
          },
          {
            "name": "_empty_metrics",
            "line": 694
          },
          {
            "name": "_save_predictive_data",
            "line": 706
          },
          {
            "name": "_load_predictive_data",
            "line": 754
          },
          {
            "name": "get_high_priority_recommendations",
            "line": 816
          },
          {
            "name": "get_predictions_for_memory",
            "line": 836
          },
          {
            "name": "get_predictive_summary",
            "line": 840
          }
        ],
        "line_count": 936
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "PredictionType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryPrediction": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "LifecycleRecommendation": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PredictiveMetrics": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PredictiveLifecycleManager": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 16,
            "method_coverage": {
              "__init__": true,
              "generate_predictions": false,
              "_predict_lifecycle_transitions": false,
              "_predict_importance_changes": false,
              "_predict_consciousness_evolution": false,
              "_predict_access_patterns": false,
              "_calculate_prediction_confidence": false,
              "_generate_recommendations": false,
              "_calculate_system_accuracy": false,
              "_cleanup_old_predictions": false,
              "_empty_metrics": false,
              "_save_predictive_data": false,
              "_load_predictive_data": false,
              "get_high_priority_recommendations": false,
              "get_predictions_for_memory": false,
              "get_predictive_summary": false
            }
          }
        },
        "functions": {
          "create_predictive_manager": false,
          "__init__": true,
          "generate_predictions": false,
          "_predict_lifecycle_transitions": false,
          "_predict_importance_changes": false,
          "_predict_consciousness_evolution": false,
          "_predict_access_patterns": false,
          "_calculate_prediction_confidence": false,
          "_generate_recommendations": true,
          "_calculate_system_accuracy": false,
          "_cleanup_old_predictions": false,
          "_empty_metrics": false,
          "_save_predictive_data": false,
          "_load_predictive_data": false,
          "get_high_priority_recommendations": false,
          "get_predictions_for_memory": false,
          "get_predictive_summary": false
        },
        "overall": 0.09090909090909091
      },
      "gaps": [
        "Class PredictionType not tested",
        "Class MemoryPrediction not tested",
        "Class LifecycleRecommendation not tested",
        "Class PredictiveMetrics not tested",
        "Class PredictiveLifecycleManager not tested",
        "Function create_predictive_manager not tested",
        "Function generate_predictions not tested",
        "Function _predict_lifecycle_transitions not tested",
        "Function _predict_importance_changes not tested",
        "Function _predict_consciousness_evolution not tested",
        "Function _predict_access_patterns not tested",
        "Function _calculate_prediction_confidence not tested",
        "Function _calculate_system_accuracy not tested",
        "Function _cleanup_old_predictions not tested",
        "Function _empty_metrics not tested",
        "Function _save_predictive_data not tested",
        "Function _load_predictive_data not tested",
        "Function get_high_priority_recommendations not tested",
        "Function get_predictions_for_memory not tested",
        "Function get_predictive_summary not tested"
      ]
    },
    "memmimic.memory.assistant": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/assistant.py",
        "classes": [
          {
            "name": "ContextualAssistant",
            "methods": [
              "__init__",
              "think",
              "_conduct_socratic_analysis",
              "_refine_response",
              "_extract_synthesis_insight",
              "_save_learning",
              "_build_thought_process",
              "_generate_response",
              "_respond_about_project",
              "_respond_with_continuity",
              "_respond_with_context",
              "_respond_without_context",
              "_extract_key_context",
              "_calculate_confidence"
            ],
            "line": 12
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 15
          },
          {
            "name": "think",
            "line": 25
          },
          {
            "name": "_conduct_socratic_analysis",
            "line": 71
          },
          {
            "name": "_refine_response",
            "line": 99
          },
          {
            "name": "_extract_synthesis_insight",
            "line": 126
          },
          {
            "name": "_save_learning",
            "line": 134
          },
          {
            "name": "_build_thought_process",
            "line": 153
          },
          {
            "name": "_generate_response",
            "line": 189
          },
          {
            "name": "_respond_about_project",
            "line": 227
          },
          {
            "name": "_respond_with_continuity",
            "line": 244
          },
          {
            "name": "_respond_with_context",
            "line": 256
          },
          {
            "name": "_respond_without_context",
            "line": 282
          },
          {
            "name": "_extract_key_context",
            "line": 289
          },
          {
            "name": "_calculate_confidence",
            "line": 317
          }
        ],
        "line_count": 337
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ContextualAssistant": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 14,
            "method_coverage": {
              "__init__": true,
              "think": false,
              "_conduct_socratic_analysis": false,
              "_refine_response": false,
              "_extract_synthesis_insight": false,
              "_save_learning": false,
              "_build_thought_process": false,
              "_generate_response": false,
              "_respond_about_project": false,
              "_respond_with_continuity": false,
              "_respond_with_context": false,
              "_respond_without_context": false,
              "_extract_key_context": false,
              "_calculate_confidence": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "think": true,
          "_conduct_socratic_analysis": false,
          "_refine_response": false,
          "_extract_synthesis_insight": false,
          "_save_learning": false,
          "_build_thought_process": false,
          "_generate_response": false,
          "_respond_about_project": false,
          "_respond_with_continuity": false,
          "_respond_with_context": false,
          "_respond_without_context": false,
          "_extract_key_context": false,
          "_calculate_confidence": false
        },
        "overall": 0.13333333333333333
      },
      "gaps": [
        "Class ContextualAssistant not tested",
        "Function _conduct_socratic_analysis not tested",
        "Function _refine_response not tested",
        "Function _extract_synthesis_insight not tested",
        "Function _save_learning not tested",
        "Function _build_thought_process not tested",
        "Function _generate_response not tested",
        "Function _respond_about_project not tested",
        "Function _respond_with_continuity not tested",
        "Function _respond_with_context not tested",
        "Function _respond_without_context not tested",
        "Function _extract_key_context not tested",
        "Function _calculate_confidence not tested"
      ]
    },
    "memmimic.memory.importance_scorer": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/importance_scorer.py",
        "classes": [
          {
            "name": "CXDFunction",
            "methods": [],
            "line": 15
          },
          {
            "name": "ScoringWeights",
            "methods": [
              "validate"
            ],
            "line": 24
          },
          {
            "name": "MemoryMetrics",
            "methods": [
              "__post_init__"
            ],
            "line": 46
          },
          {
            "name": "ImportanceScorer",
            "methods": [
              "__init__",
              "calculate_importance",
              "_calculate_cxd_score",
              "_calculate_access_frequency_score",
              "_calculate_recency_score",
              "_calculate_confidence_score",
              "_calculate_type_score",
              "_apply_contextual_modifiers",
              "_estimate_cxd_importance_from_content",
              "_get_type_confidence_modifier",
              "_normalize_weights",
              "get_scoring_explanation"
            ],
            "line": 87
          }
        ],
        "functions": [
          {
            "name": "create_metrics_from_memory_data",
            "line": 401
          },
          {
            "name": "calculate_importance_for_memory",
            "line": 430
          },
          {
            "name": "validate",
            "line": 33
          },
          {
            "name": "__post_init__",
            "line": 78
          },
          {
            "name": "__init__",
            "line": 96
          },
          {
            "name": "calculate_importance",
            "line": 130
          },
          {
            "name": "_calculate_cxd_score",
            "line": 181
          },
          {
            "name": "_calculate_access_frequency_score",
            "line": 195
          },
          {
            "name": "_calculate_recency_score",
            "line": 221
          },
          {
            "name": "_calculate_confidence_score",
            "line": 247
          },
          {
            "name": "_calculate_type_score",
            "line": 261
          },
          {
            "name": "_apply_contextual_modifiers",
            "line": 278
          },
          {
            "name": "_estimate_cxd_importance_from_content",
            "line": 306
          },
          {
            "name": "_get_type_confidence_modifier",
            "line": 353
          },
          {
            "name": "_normalize_weights",
            "line": 364
          },
          {
            "name": "get_scoring_explanation",
            "line": 381
          }
        ],
        "line_count": 465
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "CXDFunction": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ScoringWeights": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "validate": true
            }
          },
          "MemoryMetrics": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "__post_init__": false
            }
          },
          "ImportanceScorer": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 12,
            "method_coverage": {
              "__init__": true,
              "calculate_importance": false,
              "_calculate_cxd_score": false,
              "_calculate_access_frequency_score": false,
              "_calculate_recency_score": false,
              "_calculate_confidence_score": false,
              "_calculate_type_score": false,
              "_apply_contextual_modifiers": false,
              "_estimate_cxd_importance_from_content": false,
              "_get_type_confidence_modifier": false,
              "_normalize_weights": false,
              "get_scoring_explanation": false
            }
          }
        },
        "functions": {
          "create_metrics_from_memory_data": false,
          "calculate_importance_for_memory": false,
          "validate": true,
          "__post_init__": false,
          "__init__": true,
          "calculate_importance": false,
          "_calculate_cxd_score": false,
          "_calculate_access_frequency_score": false,
          "_calculate_recency_score": false,
          "_calculate_confidence_score": false,
          "_calculate_type_score": false,
          "_apply_contextual_modifiers": false,
          "_estimate_cxd_importance_from_content": false,
          "_get_type_confidence_modifier": false,
          "_normalize_weights": false,
          "get_scoring_explanation": false
        },
        "overall": 0.1
      },
      "gaps": [
        "Class CXDFunction not tested",
        "Class ScoringWeights not tested",
        "Class MemoryMetrics not tested",
        "Class ImportanceScorer not tested",
        "Function create_metrics_from_memory_data not tested",
        "Function calculate_importance_for_memory not tested",
        "Function __post_init__ not tested",
        "Function calculate_importance not tested",
        "Function _calculate_cxd_score not tested",
        "Function _calculate_access_frequency_score not tested",
        "Function _calculate_recency_score not tested",
        "Function _calculate_confidence_score not tested",
        "Function _calculate_type_score not tested",
        "Function _apply_contextual_modifiers not tested",
        "Function _estimate_cxd_importance_from_content not tested",
        "Function _get_type_confidence_modifier not tested",
        "Function _normalize_weights not tested",
        "Function get_scoring_explanation not tested"
      ]
    },
    "memmimic.memory.quality_types": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/quality_types.py",
        "classes": [
          {
            "name": "MemoryQualityResult",
            "methods": [
              "__init__"
            ],
            "line": 13
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 16
          }
        ],
        "line_count": 31
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemoryQualityResult": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          }
        },
        "functions": {
          "__init__": true
        },
        "overall": 0.5
      },
      "gaps": [
        "Class MemoryQualityResult not tested"
      ]
    },
    "memmimic.memory.memory_consolidator": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/memory_consolidator.py",
        "classes": [
          {
            "name": "ConsolidationConfig",
            "methods": [],
            "line": 19
          },
          {
            "name": "MemoryConsolidator",
            "methods": [
              "__init__",
              "_get_connection",
              "_create_consolidation_schema",
              "consolidate_memories",
              "_should_run_consolidation",
              "_get_eligible_memories",
              "_find_duplicate_memories",
              "_find_similar_memory_groups",
              "_calculate_content_similarity",
              "_calculate_comprehensive_similarity",
              "_calculate_semantic_similarity",
              "_calculate_temporal_similarity",
              "_calculate_character_similarity",
              "_normalize_content",
              "_consolidate_duplicate_group",
              "_consolidate_similarity_group",
              "_generate_group_hash",
              "_create_consolidation_group",
              "_add_memory_to_group",
              "_calculate_contribution_score",
              "_record_consolidation_audit",
              "_update_last_consolidation_time",
              "get_consolidation_status"
            ],
            "line": 37
          }
        ],
        "functions": [
          {
            "name": "create_memory_consolidator",
            "line": 758
          },
          {
            "name": "__init__",
            "line": 50
          },
          {
            "name": "_get_connection",
            "line": 61
          },
          {
            "name": "_create_consolidation_schema",
            "line": 79
          },
          {
            "name": "consolidate_memories",
            "line": 168
          },
          {
            "name": "_should_run_consolidation",
            "line": 237
          },
          {
            "name": "_get_eligible_memories",
            "line": 256
          },
          {
            "name": "_find_duplicate_memories",
            "line": 292
          },
          {
            "name": "_find_similar_memory_groups",
            "line": 324
          },
          {
            "name": "_calculate_content_similarity",
            "line": 358
          },
          {
            "name": "_calculate_comprehensive_similarity",
            "line": 394
          },
          {
            "name": "_calculate_semantic_similarity",
            "line": 419
          },
          {
            "name": "_calculate_temporal_similarity",
            "line": 444
          },
          {
            "name": "_calculate_character_similarity",
            "line": 467
          },
          {
            "name": "_normalize_content",
            "line": 481
          },
          {
            "name": "_consolidate_duplicate_group",
            "line": 491
          },
          {
            "name": "_consolidate_similarity_group",
            "line": 547
          },
          {
            "name": "_generate_group_hash",
            "line": 609
          },
          {
            "name": "_create_consolidation_group",
            "line": 615
          },
          {
            "name": "_add_memory_to_group",
            "line": 645
          },
          {
            "name": "_calculate_contribution_score",
            "line": 663
          },
          {
            "name": "_record_consolidation_audit",
            "line": 673
          },
          {
            "name": "_update_last_consolidation_time",
            "line": 699
          },
          {
            "name": "get_consolidation_status",
            "line": 703
          }
        ],
        "line_count": 792
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "ConsolidationConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryConsolidator": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 23,
            "method_coverage": {
              "__init__": true,
              "_get_connection": false,
              "_create_consolidation_schema": false,
              "consolidate_memories": false,
              "_should_run_consolidation": false,
              "_get_eligible_memories": false,
              "_find_duplicate_memories": false,
              "_find_similar_memory_groups": false,
              "_calculate_content_similarity": false,
              "_calculate_comprehensive_similarity": false,
              "_calculate_semantic_similarity": false,
              "_calculate_temporal_similarity": false,
              "_calculate_character_similarity": false,
              "_normalize_content": false,
              "_consolidate_duplicate_group": false,
              "_consolidate_similarity_group": false,
              "_generate_group_hash": false,
              "_create_consolidation_group": false,
              "_add_memory_to_group": false,
              "_calculate_contribution_score": false,
              "_record_consolidation_audit": false,
              "_update_last_consolidation_time": false,
              "get_consolidation_status": false
            }
          }
        },
        "functions": {
          "create_memory_consolidator": false,
          "__init__": true,
          "_get_connection": false,
          "_create_consolidation_schema": false,
          "consolidate_memories": false,
          "_should_run_consolidation": false,
          "_get_eligible_memories": false,
          "_find_duplicate_memories": false,
          "_find_similar_memory_groups": false,
          "_calculate_content_similarity": false,
          "_calculate_comprehensive_similarity": false,
          "_calculate_semantic_similarity": false,
          "_calculate_temporal_similarity": false,
          "_calculate_character_similarity": false,
          "_normalize_content": false,
          "_consolidate_duplicate_group": false,
          "_consolidate_similarity_group": false,
          "_generate_group_hash": false,
          "_create_consolidation_group": false,
          "_add_memory_to_group": false,
          "_calculate_contribution_score": false,
          "_record_consolidation_audit": false,
          "_update_last_consolidation_time": false,
          "get_consolidation_status": false
        },
        "overall": 0.038461538461538464
      },
      "gaps": [
        "Class ConsolidationConfig not tested",
        "Class MemoryConsolidator not tested",
        "Function create_memory_consolidator not tested",
        "Function _get_connection not tested",
        "Function _create_consolidation_schema not tested",
        "Function consolidate_memories not tested",
        "Function _should_run_consolidation not tested",
        "Function _get_eligible_memories not tested",
        "Function _find_duplicate_memories not tested",
        "Function _find_similar_memory_groups not tested",
        "Function _calculate_content_similarity not tested",
        "Function _calculate_comprehensive_similarity not tested",
        "Function _calculate_semantic_similarity not tested",
        "Function _calculate_temporal_similarity not tested",
        "Function _calculate_character_similarity not tested",
        "Function _normalize_content not tested",
        "Function _consolidate_duplicate_group not tested",
        "Function _consolidate_similarity_group not tested",
        "Function _generate_group_hash not tested",
        "Function _create_consolidation_group not tested",
        "Function _add_memory_to_group not tested",
        "Function _calculate_contribution_score not tested",
        "Function _record_consolidation_audit not tested",
        "Function _update_last_consolidation_time not tested",
        "Function get_consolidation_status not tested"
      ]
    },
    "memmimic.memory.stale_detector": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/stale_detector.py",
        "classes": [
          {
            "name": "MemoryStatus",
            "methods": [],
            "line": 16
          },
          {
            "name": "StaleReason",
            "methods": [],
            "line": 26
          },
          {
            "name": "StaleDetectionConfig",
            "methods": [
              "__post_init__"
            ],
            "line": 38
          },
          {
            "name": "StaleDetectionResult",
            "methods": [
              "should_change_status"
            ],
            "line": 76
          },
          {
            "name": "StaleMemoryDetector",
            "methods": [
              "__init__",
              "_get_connection",
              "detect_stale_memories",
              "apply_stale_detection_results",
              "_simulate_stale_detection_changes",
              "_apply_stale_detection_changes",
              "_update_stats_for_result",
              "_update_memory_status",
              "get_stale_detection_summary",
              "_analyze_memory_staleness",
              "_calculate_staleness_factors",
              "_check_protection_status",
              "_determine_recommended_status",
              "_check_prune_conditions",
              "_check_archive_conditions",
              "_check_stale_conditions",
              "_calculate_staleness_score",
              "_calculate_recommendation_confidence",
              "_map_status_to_db",
              "_create_stale_metadata"
            ],
            "line": 96
          }
        ],
        "functions": [
          {
            "name": "create_stale_detector",
            "line": 620
          },
          {
            "name": "run_stale_detection_batch",
            "line": 627
          },
          {
            "name": "__post_init__",
            "line": 64
          },
          {
            "name": "should_change_status",
            "line": 87
          },
          {
            "name": "__init__",
            "line": 109
          },
          {
            "name": "_get_connection",
            "line": 120
          },
          {
            "name": "detect_stale_memories",
            "line": 138
          },
          {
            "name": "apply_stale_detection_results",
            "line": 193
          },
          {
            "name": "_simulate_stale_detection_changes",
            "line": 213
          },
          {
            "name": "_apply_stale_detection_changes",
            "line": 221
          },
          {
            "name": "_update_stats_for_result",
            "line": 237
          },
          {
            "name": "_update_memory_status",
            "line": 252
          },
          {
            "name": "get_stale_detection_summary",
            "line": 273
          },
          {
            "name": "_analyze_memory_staleness",
            "line": 321
          },
          {
            "name": "_calculate_staleness_factors",
            "line": 357
          },
          {
            "name": "_check_protection_status",
            "line": 399
          },
          {
            "name": "_determine_recommended_status",
            "line": 445
          },
          {
            "name": "_check_prune_conditions",
            "line": 474
          },
          {
            "name": "_check_archive_conditions",
            "line": 493
          },
          {
            "name": "_check_stale_conditions",
            "line": 515
          },
          {
            "name": "_calculate_staleness_score",
            "line": 534
          },
          {
            "name": "_calculate_recommendation_confidence",
            "line": 559
          },
          {
            "name": "_map_status_to_db",
            "line": 594
          },
          {
            "name": "_create_stale_metadata",
            "line": 605
          }
        ],
        "line_count": 675
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemoryStatus": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "StaleReason": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "StaleDetectionConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "__post_init__": false
            }
          },
          "StaleDetectionResult": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "should_change_status": false
            }
          },
          "StaleMemoryDetector": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 20,
            "method_coverage": {
              "__init__": true,
              "_get_connection": false,
              "detect_stale_memories": false,
              "apply_stale_detection_results": false,
              "_simulate_stale_detection_changes": false,
              "_apply_stale_detection_changes": false,
              "_update_stats_for_result": false,
              "_update_memory_status": false,
              "get_stale_detection_summary": false,
              "_analyze_memory_staleness": false,
              "_calculate_staleness_factors": false,
              "_check_protection_status": false,
              "_determine_recommended_status": false,
              "_check_prune_conditions": false,
              "_check_archive_conditions": false,
              "_check_stale_conditions": false,
              "_calculate_staleness_score": false,
              "_calculate_recommendation_confidence": false,
              "_map_status_to_db": false,
              "_create_stale_metadata": false
            }
          }
        },
        "functions": {
          "create_stale_detector": false,
          "run_stale_detection_batch": false,
          "__post_init__": false,
          "should_change_status": false,
          "__init__": true,
          "_get_connection": false,
          "detect_stale_memories": false,
          "apply_stale_detection_results": false,
          "_simulate_stale_detection_changes": false,
          "_apply_stale_detection_changes": false,
          "_update_stats_for_result": false,
          "_update_memory_status": false,
          "get_stale_detection_summary": false,
          "_analyze_memory_staleness": false,
          "_calculate_staleness_factors": false,
          "_check_protection_status": false,
          "_determine_recommended_status": false,
          "_check_prune_conditions": false,
          "_check_archive_conditions": false,
          "_check_stale_conditions": false,
          "_calculate_staleness_score": false,
          "_calculate_recommendation_confidence": false,
          "_map_status_to_db": false,
          "_create_stale_metadata": false
        },
        "overall": 0.034482758620689655
      },
      "gaps": [
        "Class MemoryStatus not tested",
        "Class StaleReason not tested",
        "Class StaleDetectionConfig not tested",
        "Class StaleDetectionResult not tested",
        "Class StaleMemoryDetector not tested",
        "Function create_stale_detector not tested",
        "Function run_stale_detection_batch not tested",
        "Function __post_init__ not tested",
        "Function should_change_status not tested",
        "Function _get_connection not tested",
        "Function detect_stale_memories not tested",
        "Function apply_stale_detection_results not tested",
        "Function _simulate_stale_detection_changes not tested",
        "Function _apply_stale_detection_changes not tested",
        "Function _update_stats_for_result not tested",
        "Function _update_memory_status not tested",
        "Function get_stale_detection_summary not tested",
        "Function _analyze_memory_staleness not tested",
        "Function _calculate_staleness_factors not tested",
        "Function _check_protection_status not tested",
        "Function _determine_recommended_status not tested",
        "Function _check_prune_conditions not tested",
        "Function _check_archive_conditions not tested",
        "Function _check_stale_conditions not tested",
        "Function _calculate_staleness_score not tested",
        "Function _calculate_recommendation_confidence not tested",
        "Function _map_status_to_db not tested",
        "Function _create_stale_metadata not tested"
      ]
    },
    "memmimic.mcp.memmimic_load_tale": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_load_tale.py",
        "classes": [],
        "functions": [
          {
            "name": "main",
            "line": 28
          }
        ],
        "line_count": 128
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "main": true
        },
        "overall": 1.0
      },
      "gaps": []
    },
    "memmimic.mcp.enhanced_mcp_wrapper": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/enhanced_mcp_wrapper.py",
        "classes": [
          {
            "name": "EnhancedMCPWrapper",
            "methods": [
              "__init__",
              "_init_amms_components",
              "operation_context",
              "enhanced_search",
              "_amms_enhanced_search",
              "_legacy_search",
              "_apply_cxd_filter",
              "_enhance_search_results",
              "_calculate_query_relevance",
              "enhanced_status",
              "enhanced_remember",
              "clear_cache",
              "get_performance_metrics"
            ],
            "line": 22
          }
        ],
        "functions": [
          {
            "name": "enhance_mcp_tool",
            "line": 466
          },
          {
            "name": "enhanced_error_handler",
            "line": 473
          },
          {
            "name": "__init__",
            "line": 34
          },
          {
            "name": "_init_amms_components",
            "line": 59
          },
          {
            "name": "operation_context",
            "line": 90
          },
          {
            "name": "enhanced_search",
            "line": 116
          },
          {
            "name": "_amms_enhanced_search",
            "line": 166
          },
          {
            "name": "_legacy_search",
            "line": 204
          },
          {
            "name": "_apply_cxd_filter",
            "line": 227
          },
          {
            "name": "_enhance_search_results",
            "line": 268
          },
          {
            "name": "_calculate_query_relevance",
            "line": 302
          },
          {
            "name": "enhanced_status",
            "line": 328
          },
          {
            "name": "enhanced_remember",
            "line": 379
          },
          {
            "name": "clear_cache",
            "line": 455
          },
          {
            "name": "get_performance_metrics",
            "line": 460
          },
          {
            "name": "wrapper",
            "line": 477
          }
        ],
        "line_count": 521
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "EnhancedMCPWrapper": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 13,
            "method_coverage": {
              "__init__": true,
              "_init_amms_components": false,
              "operation_context": false,
              "enhanced_search": false,
              "_amms_enhanced_search": false,
              "_legacy_search": false,
              "_apply_cxd_filter": false,
              "_enhance_search_results": false,
              "_calculate_query_relevance": false,
              "enhanced_status": false,
              "enhanced_remember": false,
              "clear_cache": false,
              "get_performance_metrics": false
            }
          }
        },
        "functions": {
          "enhance_mcp_tool": false,
          "enhanced_error_handler": false,
          "__init__": true,
          "_init_amms_components": false,
          "operation_context": false,
          "enhanced_search": false,
          "_amms_enhanced_search": false,
          "_legacy_search": false,
          "_apply_cxd_filter": false,
          "_enhance_search_results": false,
          "_calculate_query_relevance": false,
          "enhanced_status": false,
          "enhanced_remember": false,
          "clear_cache": false,
          "get_performance_metrics": false,
          "wrapper": false
        },
        "overall": 0.058823529411764705
      },
      "gaps": [
        "Class EnhancedMCPWrapper not tested",
        "Function enhance_mcp_tool not tested",
        "Function enhanced_error_handler not tested",
        "Function _init_amms_components not tested",
        "Function operation_context not tested",
        "Function enhanced_search not tested",
        "Function _amms_enhanced_search not tested",
        "Function _legacy_search not tested",
        "Function _apply_cxd_filter not tested",
        "Function _enhance_search_results not tested",
        "Function _calculate_query_relevance not tested",
        "Function enhanced_status not tested",
        "Function enhanced_remember not tested",
        "Function clear_cache not tested",
        "Function get_performance_metrics not tested",
        "Function wrapper not tested"
      ]
    },
    "memmimic.mcp.memmimic_socratic": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_socratic.py",
        "classes": [
          {
            "name": "SocraticDialogue",
            "methods": [
              "__init__",
              "to_memory"
            ],
            "line": 25
          },
          {
            "name": "MemMimicSocraticEngine",
            "methods": [
              "__init__",
              "should_trigger_dialogue",
              "conduct_dialogue",
              "_question_assumptions",
              "_examine_evidence",
              "_explore_perspectives",
              "_dig_deeper",
              "_meta_cognitive_analysis",
              "_synthesize_insights"
            ],
            "line": 67
          }
        ],
        "functions": [
          {
            "name": "get_memory_store",
            "line": 629
          },
          {
            "name": "format_dialogue_output",
            "line": 648
          },
          {
            "name": "main",
            "line": 691
          },
          {
            "name": "__init__",
            "line": 28
          },
          {
            "name": "to_memory",
            "line": 36
          },
          {
            "name": "__init__",
            "line": 70
          },
          {
            "name": "should_trigger_dialogue",
            "line": 163
          },
          {
            "name": "conduct_dialogue",
            "line": 231
          },
          {
            "name": "_question_assumptions",
            "line": 298
          },
          {
            "name": "_examine_evidence",
            "line": 345
          },
          {
            "name": "_explore_perspectives",
            "line": 396
          },
          {
            "name": "_dig_deeper",
            "line": 449
          },
          {
            "name": "_meta_cognitive_analysis",
            "line": 498
          },
          {
            "name": "_synthesize_insights",
            "line": 551
          }
        ],
        "line_count": 745
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SocraticDialogue": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 2,
            "method_coverage": {
              "__init__": true,
              "to_memory": false
            }
          },
          "MemMimicSocraticEngine": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 9,
            "method_coverage": {
              "__init__": true,
              "should_trigger_dialogue": false,
              "conduct_dialogue": false,
              "_question_assumptions": false,
              "_examine_evidence": false,
              "_explore_perspectives": false,
              "_dig_deeper": false,
              "_meta_cognitive_analysis": false,
              "_synthesize_insights": false
            }
          }
        },
        "functions": {
          "get_memory_store": false,
          "format_dialogue_output": false,
          "main": true,
          "__init__": true,
          "to_memory": false,
          "should_trigger_dialogue": false,
          "conduct_dialogue": false,
          "_question_assumptions": false,
          "_examine_evidence": false,
          "_explore_perspectives": false,
          "_dig_deeper": false,
          "_meta_cognitive_analysis": false,
          "_synthesize_insights": false
        },
        "overall": 0.125
      },
      "gaps": [
        "Class SocraticDialogue not tested",
        "Class MemMimicSocraticEngine not tested",
        "Function get_memory_store not tested",
        "Function format_dialogue_output not tested",
        "Function to_memory not tested",
        "Function should_trigger_dialogue not tested",
        "Function conduct_dialogue not tested",
        "Function _question_assumptions not tested",
        "Function _examine_evidence not tested",
        "Function _explore_perspectives not tested",
        "Function _dig_deeper not tested",
        "Function _meta_cognitive_analysis not tested",
        "Function _synthesize_insights not tested"
      ]
    },
    "memmimic.mcp.memmimic_think": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_think.py",
        "classes": [],
        "functions": [
          {
            "name": "main",
            "line": 27
          }
        ],
        "line_count": 106
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "main": true
        },
        "overall": 1.0
      },
      "gaps": []
    },
    "memmimic.mcp.memmimic_status": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_status.py",
        "classes": [],
        "functions": [
          {
            "name": "check_cxd_status",
            "line": 30
          },
          {
            "name": "analyze_memory_statistics",
            "line": 54,
            "async": true
          },
          {
            "name": "analyze_tales_statistics",
            "line": 99
          },
          {
            "name": "main_async",
            "line": 139,
            "async": true
          },
          {
            "name": "main",
            "line": 323
          }
        ],
        "line_count": 329
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "check_cxd_status": false,
          "analyze_memory_statistics": false,
          "analyze_tales_statistics": false,
          "main_async": false,
          "main": true
        },
        "overall": 0.2
      },
      "gaps": [
        "Function check_cxd_status not tested",
        "Function analyze_memory_statistics not tested",
        "Function analyze_tales_statistics not tested",
        "Function main_async not tested"
      ]
    },
    "memmimic.mcp.memmimic_delete_tale": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_delete_tale.py",
        "classes": [],
        "functions": [
          {
            "name": "main",
            "line": 28
          }
        ],
        "line_count": 110
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "main": true
        },
        "overall": 1.0
      },
      "gaps": []
    },
    "memmimic.mcp.memmimic_delete_memory_guided": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_delete_memory_guided.py",
        "classes": [],
        "functions": [
          {
            "name": "find_memory_by_id",
            "line": 28
          },
          {
            "name": "analyze_deletion_impact",
            "line": 47
          },
          {
            "name": "main",
            "line": 119
          }
        ],
        "line_count": 246
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "find_memory_by_id": false,
          "analyze_deletion_impact": false,
          "main": true
        },
        "overall": 0.3333333333333333
      },
      "gaps": [
        "Function find_memory_by_id not tested",
        "Function analyze_deletion_impact not tested"
      ]
    },
    "memmimic.mcp.memmimic_recall_cxd": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_recall_cxd.py",
        "classes": [
          {
            "name": "MemMimicSemanticSearchEngine",
            "methods": [
              "__init__",
              "_initialize_cxd",
              "_get_memory_cache_path",
              "_load_memory_index",
              "_save_memory_index",
              "index_memories",
              "search_semantic"
            ],
            "line": 415
          },
          {
            "name": "SyncMemoryWrapper",
            "methods": [
              "__init__",
              "get_all",
              "search"
            ],
            "line": 364
          }
        ],
        "functions": [
          {
            "name": "check_golden_briefing_needed",
            "line": 65
          },
          {
            "name": "search_golden_memories",
            "line": 92
          },
          {
            "name": "display_golden_briefing",
            "line": 118
          },
          {
            "name": "ensure_wordnet",
            "line": 148
          },
          {
            "name": "get_wordnet_synonyms",
            "line": 200
          },
          {
            "name": "get_multilingual_synonyms",
            "line": 255
          },
          {
            "name": "safe_encode_text",
            "line": 286
          },
          {
            "name": "safe_decode_text",
            "line": 329
          },
          {
            "name": "get_memory_store",
            "line": 349
          },
          {
            "name": "get_enhanced_memory_store",
            "line": 391
          },
          {
            "name": "expand_query_with_wordnet",
            "line": 810
          },
          {
            "name": "wordnet_enhanced_search",
            "line": 870
          },
          {
            "name": "combine_and_score_v3",
            "line": 994
          },
          {
            "name": "apply_cxd_filter",
            "line": 1168
          },
          {
            "name": "search_memories_hybrid",
            "line": 1234
          },
          {
            "name": "format_memory_with_wordnet_info",
            "line": 1401
          },
          {
            "name": "main",
            "line": 1512
          },
          {
            "name": "__init__",
            "line": 421
          },
          {
            "name": "_initialize_cxd",
            "line": 454
          },
          {
            "name": "_get_memory_cache_path",
            "line": 508
          },
          {
            "name": "_load_memory_index",
            "line": 512
          },
          {
            "name": "_save_memory_index",
            "line": 541
          },
          {
            "name": "index_memories",
            "line": 568
          },
          {
            "name": "search_semantic",
            "line": 669
          },
          {
            "name": "__init__",
            "line": 365
          },
          {
            "name": "get_all",
            "line": 368
          },
          {
            "name": "search",
            "line": 376
          }
        ],
        "line_count": 1764
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemMimicSemanticSearchEngine": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 7,
            "method_coverage": {
              "__init__": true,
              "_initialize_cxd": false,
              "_get_memory_cache_path": false,
              "_load_memory_index": false,
              "_save_memory_index": false,
              "index_memories": false,
              "search_semantic": false
            }
          },
          "SyncMemoryWrapper": {
            "tested": false,
            "methods_tested": 2,
            "total_methods": 3,
            "method_coverage": {
              "__init__": true,
              "get_all": false,
              "search": true
            }
          }
        },
        "functions": {
          "check_golden_briefing_needed": false,
          "search_golden_memories": false,
          "display_golden_briefing": false,
          "ensure_wordnet": false,
          "get_wordnet_synonyms": false,
          "get_multilingual_synonyms": false,
          "safe_encode_text": false,
          "safe_decode_text": false,
          "get_memory_store": false,
          "get_enhanced_memory_store": false,
          "expand_query_with_wordnet": false,
          "wordnet_enhanced_search": false,
          "combine_and_score_v3": false,
          "apply_cxd_filter": false,
          "search_memories_hybrid": false,
          "format_memory_with_wordnet_info": false,
          "main": true,
          "__init__": true,
          "_initialize_cxd": false,
          "_get_memory_cache_path": false,
          "_load_memory_index": false,
          "_save_memory_index": false,
          "index_memories": false,
          "search_semantic": false,
          "get_all": true,
          "search": true
        },
        "overall": 0.13793103448275862
      },
      "gaps": [
        "Class MemMimicSemanticSearchEngine not tested",
        "Class SyncMemoryWrapper not tested",
        "Function check_golden_briefing_needed not tested",
        "Function search_golden_memories not tested",
        "Function display_golden_briefing not tested",
        "Function ensure_wordnet not tested",
        "Function get_wordnet_synonyms not tested",
        "Function get_multilingual_synonyms not tested",
        "Function safe_encode_text not tested",
        "Function safe_decode_text not tested",
        "Function get_memory_store not tested",
        "Function get_enhanced_memory_store not tested",
        "Function expand_query_with_wordnet not tested",
        "Function wordnet_enhanced_search not tested",
        "Function combine_and_score_v3 not tested",
        "Function apply_cxd_filter not tested",
        "Function search_memories_hybrid not tested",
        "Function format_memory_with_wordnet_info not tested",
        "Function _initialize_cxd not tested",
        "Function _get_memory_cache_path not tested",
        "Function _load_memory_index not tested",
        "Function _save_memory_index not tested",
        "Function index_memories not tested",
        "Function search_semantic not tested"
      ]
    },
    "memmimic.mcp.memmimic_tales": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_tales.py",
        "classes": [],
        "functions": [
          {
            "name": "list_tales",
            "line": 29
          },
          {
            "name": "search_tales",
            "line": 92
          },
          {
            "name": "load_tale",
            "line": 150
          },
          {
            "name": "show_stats",
            "line": 205
          },
          {
            "name": "main",
            "line": 258
          }
        ],
        "line_count": 306
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "list_tales": false,
          "search_tales": false,
          "load_tale": true,
          "show_stats": false,
          "main": true
        },
        "overall": 0.4
      },
      "gaps": [
        "Function list_tales not tested",
        "Function search_tales not tested",
        "Function show_stats not tested"
      ]
    },
    "memmimic.mcp.memmimic_update_memory_guided": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_update_memory_guided.py",
        "classes": [],
        "functions": [
          {
            "name": "find_memory_by_id",
            "line": 28
          },
          {
            "name": "analyze_memory_context",
            "line": 47
          },
          {
            "name": "main",
            "line": 117
          }
        ],
        "line_count": 221
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "find_memory_by_id": false,
          "analyze_memory_context": false,
          "main": true
        },
        "overall": 0.3333333333333333
      },
      "gaps": [
        "Function find_memory_by_id not tested",
        "Function analyze_memory_context not tested"
      ]
    },
    "memmimic.mcp.mcp_performance_monitor": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/mcp_performance_monitor.py",
        "classes": [
          {
            "name": "PerformanceMetrics",
            "methods": [
              "finalize"
            ],
            "line": 24
          },
          {
            "name": "OperationStats",
            "methods": [
              "update"
            ],
            "line": 54
          },
          {
            "name": "MCPPerformanceMonitor",
            "methods": [
              "__init__",
              "start_operation",
              "finish_operation",
              "get_operation_stats",
              "get_system_health",
              "export_metrics",
              "_format_operation_stats",
              "_check_performance_alerts",
              "_get_memory_usage",
              "_get_cpu_usage",
              "_save_metrics",
              "_load_metrics",
              "_export_prometheus_metrics"
            ],
            "line": 136
          }
        ],
        "functions": [
          {
            "name": "get_performance_monitor",
            "line": 615
          },
          {
            "name": "track_operation",
            "line": 623
          },
          {
            "name": "finalize",
            "line": 47
          },
          {
            "name": "update",
            "line": 81
          },
          {
            "name": "__init__",
            "line": 149
          },
          {
            "name": "start_operation",
            "line": 183
          },
          {
            "name": "finish_operation",
            "line": 219
          },
          {
            "name": "get_operation_stats",
            "line": 273
          },
          {
            "name": "get_system_health",
            "line": 299
          },
          {
            "name": "export_metrics",
            "line": 354
          },
          {
            "name": "_format_operation_stats",
            "line": 380
          },
          {
            "name": "_check_performance_alerts",
            "line": 415
          },
          {
            "name": "_get_memory_usage",
            "line": 453
          },
          {
            "name": "_get_cpu_usage",
            "line": 466
          },
          {
            "name": "_save_metrics",
            "line": 478
          },
          {
            "name": "_load_metrics",
            "line": 525
          },
          {
            "name": "_export_prometheus_metrics",
            "line": 569
          },
          {
            "name": "decorator",
            "line": 626
          },
          {
            "name": "wrapper",
            "line": 627
          }
        ],
        "line_count": 676
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "PerformanceMetrics": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "finalize": false
            }
          },
          "OperationStats": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "update": false
            }
          },
          "MCPPerformanceMonitor": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 13,
            "method_coverage": {
              "__init__": true,
              "start_operation": false,
              "finish_operation": false,
              "get_operation_stats": false,
              "get_system_health": false,
              "export_metrics": false,
              "_format_operation_stats": false,
              "_check_performance_alerts": false,
              "_get_memory_usage": false,
              "_get_cpu_usage": false,
              "_save_metrics": false,
              "_load_metrics": false,
              "_export_prometheus_metrics": false
            }
          }
        },
        "functions": {
          "get_performance_monitor": false,
          "track_operation": false,
          "finalize": false,
          "update": true,
          "__init__": true,
          "start_operation": false,
          "finish_operation": false,
          "get_operation_stats": false,
          "get_system_health": false,
          "export_metrics": false,
          "_format_operation_stats": false,
          "_check_performance_alerts": false,
          "_get_memory_usage": false,
          "_get_cpu_usage": false,
          "_save_metrics": false,
          "_load_metrics": false,
          "_export_prometheus_metrics": false,
          "decorator": true,
          "wrapper": false
        },
        "overall": 0.18181818181818182
      },
      "gaps": [
        "Class PerformanceMetrics methods not tested: ['finalize']",
        "Class OperationStats not tested",
        "Class MCPPerformanceMonitor not tested",
        "Function get_performance_monitor not tested",
        "Function track_operation not tested",
        "Function finalize not tested",
        "Function start_operation not tested",
        "Function finish_operation not tested",
        "Function get_operation_stats not tested",
        "Function get_system_health not tested",
        "Function export_metrics not tested",
        "Function _format_operation_stats not tested",
        "Function _check_performance_alerts not tested",
        "Function _get_memory_usage not tested",
        "Function _get_cpu_usage not tested",
        "Function _save_metrics not tested",
        "Function _load_metrics not tested",
        "Function _export_prometheus_metrics not tested",
        "Function wrapper not tested"
      ]
    },
    "memmimic.mcp.memmimic_analyze_patterns": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_analyze_patterns.py",
        "classes": [],
        "functions": [
          {
            "name": "get_memory_store",
            "line": 25
          },
          {
            "name": "init_cxd_classifier",
            "line": 44
          },
          {
            "name": "classify_memory_batch",
            "line": 58
          },
          {
            "name": "analyze_temporal_patterns",
            "line": 92
          },
          {
            "name": "analyze_content_patterns",
            "line": 130
          },
          {
            "name": "analyze_usage_patterns",
            "line": 213
          },
          {
            "name": "generate_insights",
            "line": 259
          },
          {
            "name": "generate_recommendations",
            "line": 342
          },
          {
            "name": "format_analysis_output",
            "line": 408
          },
          {
            "name": "main",
            "line": 545
          }
        ],
        "line_count": 606
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "get_memory_store": false,
          "init_cxd_classifier": false,
          "classify_memory_batch": false,
          "analyze_temporal_patterns": false,
          "analyze_content_patterns": false,
          "analyze_usage_patterns": false,
          "generate_insights": false,
          "generate_recommendations": false,
          "format_analysis_output": false,
          "main": true
        },
        "overall": 0.1
      },
      "gaps": [
        "Function get_memory_store not tested",
        "Function init_cxd_classifier not tested",
        "Function classify_memory_batch not tested",
        "Function analyze_temporal_patterns not tested",
        "Function analyze_content_patterns not tested",
        "Function analyze_usage_patterns not tested",
        "Function generate_insights not tested",
        "Function generate_recommendations not tested",
        "Function format_analysis_output not tested"
      ]
    },
    "memmimic.mcp.memmimic_context_tale": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_context_tale.py",
        "classes": [],
        "functions": [
          {
            "name": "generate_narrative",
            "line": 28
          },
          {
            "name": "main",
            "line": 163
          }
        ],
        "line_count": 204
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "generate_narrative": false,
          "main": true
        },
        "overall": 0.5
      },
      "gaps": [
        "Function generate_narrative not tested"
      ]
    },
    "memmimic.mcp.memmimic_remember": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_remember.py",
        "classes": [],
        "functions": [
          {
            "name": "init_cxd_classifier",
            "line": 29
          },
          {
            "name": "classify_content_with_cxd",
            "line": 44
          },
          {
            "name": "main_async",
            "line": 71,
            "async": true
          },
          {
            "name": "main",
            "line": 130
          }
        ],
        "line_count": 136
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "init_cxd_classifier": false,
          "classify_content_with_cxd": false,
          "main_async": false,
          "main": true
        },
        "overall": 0.25
      },
      "gaps": [
        "Function init_cxd_classifier not tested",
        "Function classify_content_with_cxd not tested",
        "Function main_async not tested"
      ]
    },
    "memmimic.mcp.memmimic_save_tale": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_save_tale.py",
        "classes": [],
        "functions": [
          {
            "name": "auto_detect_save_operation",
            "line": 29
          },
          {
            "name": "create_new_tale",
            "line": 48
          },
          {
            "name": "update_existing_tale",
            "line": 93
          },
          {
            "name": "main",
            "line": 152
          }
        ],
        "line_count": 199
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "auto_detect_save_operation": false,
          "create_new_tale": false,
          "update_existing_tale": false,
          "main": true
        },
        "overall": 0.25
      },
      "gaps": [
        "Function auto_detect_save_operation not tested",
        "Function create_new_tale not tested",
        "Function update_existing_tale not tested"
      ]
    },
    "memmimic.mcp.memmimic_remember_with_quality": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/memmimic_remember_with_quality.py",
        "classes": [],
        "functions": [
          {
            "name": "init_cxd_classifier",
            "line": 31
          },
          {
            "name": "classify_content_with_cxd",
            "line": 45
          },
          {
            "name": "main_async",
            "line": 65,
            "async": true
          },
          {
            "name": "save_memory_with_quality_check",
            "line": 115,
            "async": true
          },
          {
            "name": "save_memory_directly",
            "line": 186,
            "async": true
          },
          {
            "name": "handle_review_list",
            "line": 214,
            "async": true
          },
          {
            "name": "handle_approval",
            "line": 237,
            "async": true
          },
          {
            "name": "handle_rejection",
            "line": 251,
            "async": true
          },
          {
            "name": "main",
            "line": 265
          }
        ],
        "line_count": 271
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {},
        "functions": {
          "init_cxd_classifier": false,
          "classify_content_with_cxd": false,
          "main_async": false,
          "save_memory_with_quality_check": false,
          "save_memory_directly": false,
          "handle_review_list": false,
          "handle_approval": false,
          "handle_rejection": false,
          "main": true
        },
        "overall": 0.1111111111111111
      },
      "gaps": [
        "Function init_cxd_classifier not tested",
        "Function classify_content_with_cxd not tested",
        "Function main_async not tested",
        "Function save_memory_with_quality_check not tested",
        "Function save_memory_directly not tested",
        "Function handle_review_list not tested",
        "Function handle_approval not tested",
        "Function handle_rejection not tested"
      ]
    },
    "memmimic.utils.caching": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/utils/caching.py",
        "classes": [
          {
            "name": "MemMimicCache",
            "methods": [
              "__init__",
              "get",
              "set",
              "_evict_lru",
              "clear",
              "get_stats"
            ],
            "line": 23
          }
        ],
        "functions": [
          {
            "name": "_generate_cache_key",
            "line": 128
          },
          {
            "name": "cached_cxd_operation",
            "line": 146
          },
          {
            "name": "cached_memory_operation",
            "line": 181
          },
          {
            "name": "cached_embedding_operation",
            "line": 216
          },
          {
            "name": "lru_cached",
            "line": 252
          },
          {
            "name": "clear_all_caches",
            "line": 265
          },
          {
            "name": "get_cache_statistics",
            "line": 273
          },
          {
            "name": "warm_up_cache",
            "line": 287
          },
          {
            "name": "__init__",
            "line": 30
          },
          {
            "name": "get",
            "line": 48
          },
          {
            "name": "set",
            "line": 69
          },
          {
            "name": "_evict_lru",
            "line": 86
          },
          {
            "name": "clear",
            "line": 101
          },
          {
            "name": "get_stats",
            "line": 106
          },
          {
            "name": "decorator",
            "line": 156
          },
          {
            "name": "decorator",
            "line": 191
          },
          {
            "name": "decorator",
            "line": 226
          },
          {
            "name": "wrapper",
            "line": 158
          },
          {
            "name": "wrapper",
            "line": 193
          },
          {
            "name": "wrapper",
            "line": 228
          }
        ],
        "line_count": 298
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemMimicCache": {
            "tested": true,
            "methods_tested": 4,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "get": true,
              "set": true,
              "_evict_lru": false,
              "clear": false,
              "get_stats": true
            }
          }
        },
        "functions": {
          "_generate_cache_key": false,
          "cached_cxd_operation": true,
          "cached_memory_operation": true,
          "cached_embedding_operation": true,
          "lru_cached": true,
          "clear_all_caches": false,
          "get_cache_statistics": false,
          "warm_up_cache": false,
          "__init__": true,
          "get": true,
          "set": true,
          "_evict_lru": false,
          "clear": false,
          "get_stats": true,
          "decorator": true,
          "wrapper": false
        },
        "overall": 0.47619047619047616
      },
      "gaps": [
        "Class MemMimicCache methods not tested: ['_evict_lru', 'clear']",
        "Function _generate_cache_key not tested",
        "Function clear_all_caches not tested",
        "Function get_cache_statistics not tested",
        "Function warm_up_cache not tested",
        "Function _evict_lru not tested",
        "Function clear not tested",
        "Function wrapper not tested"
      ]
    },
    "memmimic.mcp.handlers.response_formatter": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/handlers/response_formatter.py",
        "classes": [
          {
            "name": "MCPResponseFormatter",
            "methods": [
              "__init__",
              "format_search_results",
              "format_error_response",
              "format_status_response",
              "_format_single_result",
              "_format_cxd_classification",
              "_format_search_context",
              "_safe_decode_text"
            ],
            "line": 19
          }
        ],
        "functions": [
          {
            "name": "create_legacy_format_response",
            "line": 231
          },
          {
            "name": "__init__",
            "line": 27
          },
          {
            "name": "format_search_results",
            "line": 46
          },
          {
            "name": "format_error_response",
            "line": 103
          },
          {
            "name": "format_status_response",
            "line": 127
          },
          {
            "name": "_format_single_result",
            "line": 146
          },
          {
            "name": "_format_cxd_classification",
            "line": 174
          },
          {
            "name": "_format_search_context",
            "line": 182
          },
          {
            "name": "_safe_decode_text",
            "line": 195
          }
        ],
        "line_count": 316
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration"
      ],
      "test_coverage": {
        "classes": {
          "MCPResponseFormatter": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 8,
            "method_coverage": {
              "__init__": false,
              "format_search_results": false,
              "format_error_response": false,
              "format_status_response": false,
              "_format_single_result": false,
              "_format_cxd_classification": false,
              "_format_search_context": false,
              "_safe_decode_text": false
            }
          }
        },
        "functions": {
          "create_legacy_format_response": true,
          "__init__": true,
          "format_search_results": false,
          "format_error_response": false,
          "format_status_response": false,
          "_format_single_result": false,
          "_format_cxd_classification": false,
          "_format_search_context": false,
          "_safe_decode_text": false
        },
        "overall": 0.3
      },
      "gaps": [
        "Class MCPResponseFormatter methods not tested: ['__init__', 'format_search_results', 'format_error_response', 'format_status_response', '_format_single_result', '_format_cxd_classification', '_format_search_context', '_safe_decode_text']",
        "Function format_search_results not tested",
        "Function format_error_response not tested",
        "Function format_status_response not tested",
        "Function _format_single_result not tested",
        "Function _format_cxd_classification not tested",
        "Function _format_search_context not tested",
        "Function _safe_decode_text not tested"
      ]
    },
    "memmimic.mcp.handlers.recall_handler": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/handlers/recall_handler.py",
        "classes": [
          {
            "name": "MemoryRecallMCPHandler",
            "methods": [
              "__init__",
              "handle_status_request",
              "set_legacy_format",
              "warm_cache"
            ],
            "line": 18
          }
        ],
        "functions": [
          {
            "name": "create_memory_recall_handler",
            "line": 193
          },
          {
            "name": "search_memories_hybrid",
            "line": 208
          },
          {
            "name": "__init__",
            "line": 26
          },
          {
            "name": "handle_recall_request",
            "line": 45,
            "async": true
          },
          {
            "name": "handle_status_request",
            "line": 111
          },
          {
            "name": "set_legacy_format",
            "line": 157
          },
          {
            "name": "warm_cache",
            "line": 167
          },
          {
            "name": "_handle_recall",
            "line": 55
          },
          {
            "name": "_handle_status",
            "line": 121
          }
        ],
        "line_count": 247
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration"
      ],
      "test_coverage": {
        "classes": {
          "MemoryRecallMCPHandler": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 4,
            "method_coverage": {
              "__init__": false,
              "handle_status_request": false,
              "set_legacy_format": false,
              "warm_cache": false
            }
          }
        },
        "functions": {
          "create_memory_recall_handler": true,
          "search_memories_hybrid": false,
          "__init__": true,
          "handle_recall_request": true,
          "handle_status_request": false,
          "set_legacy_format": false,
          "warm_cache": false,
          "_handle_recall": false,
          "_handle_status": false
        },
        "overall": 0.4
      },
      "gaps": [
        "Class MemoryRecallMCPHandler methods not tested: ['__init__', 'handle_status_request', 'set_legacy_format', 'warm_cache']",
        "Function search_memories_hybrid not tested",
        "Function handle_status_request not tested",
        "Function set_legacy_format not tested",
        "Function warm_cache not tested",
        "Function _handle_recall not tested",
        "Function _handle_status not tested"
      ]
    },
    "memmimic.mcp.handlers.mcp_base": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/mcp/handlers/mcp_base.py",
        "classes": [
          {
            "name": "MCPResponse",
            "methods": [
              "__post_init__"
            ],
            "line": 19
          },
          {
            "name": "MCPBase",
            "methods": [
              "__init__",
              "validate_request",
              "create_success_response",
              "create_error_response",
              "execute_with_metrics",
              "_update_timing_metrics",
              "get_metrics",
              "reset_metrics",
              "health_check"
            ],
            "line": 35
          }
        ],
        "functions": [
          {
            "name": "parse_mcp_request",
            "line": 250
          },
          {
            "name": "format_mcp_response",
            "line": 275
          },
          {
            "name": "extract_search_params",
            "line": 300
          },
          {
            "name": "__post_init__",
            "line": 28
          },
          {
            "name": "__init__",
            "line": 43
          },
          {
            "name": "validate_request",
            "line": 65
          },
          {
            "name": "create_success_response",
            "line": 100
          },
          {
            "name": "create_error_response",
            "line": 118
          },
          {
            "name": "execute_with_metrics",
            "line": 139
          },
          {
            "name": "_update_timing_metrics",
            "line": 182
          },
          {
            "name": "get_metrics",
            "line": 192
          },
          {
            "name": "reset_metrics",
            "line": 215
          },
          {
            "name": "health_check",
            "line": 225
          }
        ],
        "line_count": 341
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration"
      ],
      "test_coverage": {
        "classes": {
          "MCPResponse": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "__post_init__": false
            }
          },
          "MCPBase": {
            "tested": true,
            "methods_tested": 2,
            "total_methods": 9,
            "method_coverage": {
              "__init__": false,
              "validate_request": false,
              "create_success_response": false,
              "create_error_response": false,
              "execute_with_metrics": false,
              "_update_timing_metrics": false,
              "get_metrics": true,
              "reset_metrics": false,
              "health_check": true
            }
          }
        },
        "functions": {
          "parse_mcp_request": false,
          "format_mcp_response": false,
          "extract_search_params": true,
          "__post_init__": false,
          "__init__": true,
          "validate_request": false,
          "create_success_response": false,
          "create_error_response": false,
          "execute_with_metrics": false,
          "_update_timing_metrics": false,
          "get_metrics": true,
          "reset_metrics": false,
          "health_check": true
        },
        "overall": 0.4
      },
      "gaps": [
        "Class MCPResponse methods not tested: ['__post_init__']",
        "Class MCPBase methods not tested: ['__init__', 'validate_request', 'create_success_response', 'create_error_response', 'execute_with_metrics', '_update_timing_metrics', 'reset_metrics']",
        "Function parse_mcp_request not tested",
        "Function format_mcp_response not tested",
        "Function __post_init__ not tested",
        "Function validate_request not tested",
        "Function create_success_response not tested",
        "Function create_error_response not tested",
        "Function execute_with_metrics not tested",
        "Function _update_timing_metrics not tested",
        "Function reset_metrics not tested"
      ]
    },
    "memmimic.memory.active.database_pool": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active/database_pool.py",
        "classes": [
          {
            "name": "PooledConnection",
            "methods": [
              "mark_used",
              "age_seconds",
              "idle_seconds"
            ],
            "line": 27
          },
          {
            "name": "ConnectionPoolConfig",
            "methods": [],
            "line": 52
          },
          {
            "name": "ConnectionPool",
            "methods": [
              "__init__",
              "get_connection",
              "return_connection",
              "get_connection_context",
              "execute_query",
              "execute_transaction",
              "transaction_context",
              "get_pool_stats",
              "health_check",
              "_initialize_pool",
              "_create_new_connection",
              "_close_connection",
              "_is_connection_healthy",
              "_start_health_monitoring",
              "_perform_health_maintenance",
              "shutdown",
              "__del__"
            ],
            "line": 77
          }
        ],
        "functions": [
          {
            "name": "create_database_pool",
            "line": 586
          },
          {
            "name": "mark_used",
            "line": 37
          },
          {
            "name": "age_seconds",
            "line": 42
          },
          {
            "name": "idle_seconds",
            "line": 46
          },
          {
            "name": "__init__",
            "line": 90
          },
          {
            "name": "get_connection",
            "line": 123
          },
          {
            "name": "return_connection",
            "line": 179
          },
          {
            "name": "get_connection_context",
            "line": 216
          },
          {
            "name": "execute_query",
            "line": 229
          },
          {
            "name": "execute_transaction",
            "line": 257
          },
          {
            "name": "transaction_context",
            "line": 289
          },
          {
            "name": "get_pool_stats",
            "line": 324
          },
          {
            "name": "health_check",
            "line": 395
          },
          {
            "name": "_initialize_pool",
            "line": 422
          },
          {
            "name": "_create_new_connection",
            "line": 435
          },
          {
            "name": "_close_connection",
            "line": 469
          },
          {
            "name": "_is_connection_healthy",
            "line": 487
          },
          {
            "name": "_start_health_monitoring",
            "line": 506
          },
          {
            "name": "_perform_health_maintenance",
            "line": 522
          },
          {
            "name": "shutdown",
            "line": 553
          },
          {
            "name": "__del__",
            "line": 578
          },
          {
            "name": "health_monitor",
            "line": 511
          }
        ],
        "line_count": 597
      },
      "test_files": [
        "test_quick_performance",
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "PooledConnection": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 3,
            "method_coverage": {
              "mark_used": false,
              "age_seconds": false,
              "idle_seconds": false
            }
          },
          "ConnectionPoolConfig": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ConnectionPool": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 17,
            "method_coverage": {
              "__init__": true,
              "get_connection": false,
              "return_connection": false,
              "get_connection_context": false,
              "execute_query": false,
              "execute_transaction": false,
              "transaction_context": false,
              "get_pool_stats": false,
              "health_check": false,
              "_initialize_pool": false,
              "_create_new_connection": false,
              "_close_connection": false,
              "_is_connection_healthy": false,
              "_start_health_monitoring": false,
              "_perform_health_maintenance": false,
              "shutdown": false,
              "__del__": false
            }
          }
        },
        "functions": {
          "create_database_pool": true,
          "mark_used": false,
          "age_seconds": true,
          "idle_seconds": true,
          "__init__": true,
          "get_connection": true,
          "return_connection": true,
          "get_connection_context": false,
          "execute_query": true,
          "execute_transaction": true,
          "transaction_context": false,
          "get_pool_stats": true,
          "health_check": true,
          "_initialize_pool": false,
          "_create_new_connection": false,
          "_close_connection": false,
          "_is_connection_healthy": false,
          "_start_health_monitoring": false,
          "_perform_health_maintenance": false,
          "shutdown": true,
          "__del__": false,
          "health_monitor": false
        },
        "overall": 0.52
      },
      "gaps": [
        "Class PooledConnection not tested",
        "Class ConnectionPool methods not tested: ['get_connection', 'return_connection', 'get_connection_context', 'execute_query', 'execute_transaction', 'transaction_context', 'get_pool_stats', 'health_check', '_initialize_pool', '_create_new_connection', '_close_connection', '_is_connection_healthy', '_start_health_monitoring', '_perform_health_maintenance', 'shutdown', '__del__']",
        "Function mark_used not tested",
        "Function get_connection_context not tested",
        "Function transaction_context not tested",
        "Function _initialize_pool not tested",
        "Function _create_new_connection not tested",
        "Function _close_connection not tested",
        "Function _is_connection_healthy not tested",
        "Function _start_health_monitoring not tested",
        "Function _perform_health_maintenance not tested",
        "Function __del__ not tested",
        "Function health_monitor not tested"
      ]
    },
    "memmimic.memory.active.optimization_engine": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active/optimization_engine.py",
        "classes": [
          {
            "name": "OptimizationConfig",
            "methods": [],
            "line": 26
          },
          {
            "name": "AutomaticOptimizationEngine",
            "methods": [
              "__init__",
              "evaluate_memory_importance",
              "suggest_archival_candidates",
              "suggest_deletion_candidates",
              "optimize_memory_distribution",
              "predict_memory_usage",
              "record_memory_access",
              "_get_type_importance_factor",
              "_optimize_cache",
              "_optimize_indexes",
              "_calculate_prediction_confidence",
              "_evaluate_optimization_effectiveness",
              "_start_background_optimization",
              "shutdown"
            ],
            "line": 49
          }
        ],
        "functions": [
          {
            "name": "current_capacity_estimate",
            "line": 568
          },
          {
            "name": "create_optimization_engine",
            "line": 574
          },
          {
            "name": "__init__",
            "line": 61
          },
          {
            "name": "evaluate_memory_importance",
            "line": 107
          },
          {
            "name": "suggest_archival_candidates",
            "line": 167
          },
          {
            "name": "suggest_deletion_candidates",
            "line": 206
          },
          {
            "name": "optimize_memory_distribution",
            "line": 247
          },
          {
            "name": "predict_memory_usage",
            "line": 312
          },
          {
            "name": "record_memory_access",
            "line": 395
          },
          {
            "name": "_get_type_importance_factor",
            "line": 427
          },
          {
            "name": "_optimize_cache",
            "line": 442
          },
          {
            "name": "_optimize_indexes",
            "line": 476
          },
          {
            "name": "_calculate_prediction_confidence",
            "line": 499
          },
          {
            "name": "_evaluate_optimization_effectiveness",
            "line": 517
          },
          {
            "name": "_start_background_optimization",
            "line": 527
          },
          {
            "name": "shutdown",
            "line": 555
          },
          {
            "name": "optimization_worker",
            "line": 529
          },
          {
            "name": "predict_trend",
            "line": 338
          }
        ],
        "line_count": 600
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "OptimizationConfig": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "AutomaticOptimizationEngine": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 14,
            "method_coverage": {
              "__init__": true,
              "evaluate_memory_importance": false,
              "suggest_archival_candidates": false,
              "suggest_deletion_candidates": false,
              "optimize_memory_distribution": false,
              "predict_memory_usage": false,
              "record_memory_access": false,
              "_get_type_importance_factor": false,
              "_optimize_cache": false,
              "_optimize_indexes": false,
              "_calculate_prediction_confidence": false,
              "_evaluate_optimization_effectiveness": false,
              "_start_background_optimization": false,
              "shutdown": false
            }
          }
        },
        "functions": {
          "current_capacity_estimate": false,
          "create_optimization_engine": false,
          "__init__": true,
          "evaluate_memory_importance": true,
          "suggest_archival_candidates": true,
          "suggest_deletion_candidates": false,
          "optimize_memory_distribution": true,
          "predict_memory_usage": true,
          "record_memory_access": true,
          "_get_type_importance_factor": false,
          "_optimize_cache": false,
          "_optimize_indexes": false,
          "_calculate_prediction_confidence": false,
          "_evaluate_optimization_effectiveness": false,
          "_start_background_optimization": false,
          "shutdown": true,
          "optimization_worker": false,
          "predict_trend": false
        },
        "overall": 0.45
      },
      "gaps": [
        "Class AutomaticOptimizationEngine methods not tested: ['evaluate_memory_importance', 'suggest_archival_candidates', 'suggest_deletion_candidates', 'optimize_memory_distribution', 'predict_memory_usage', 'record_memory_access', '_get_type_importance_factor', '_optimize_cache', '_optimize_indexes', '_calculate_prediction_confidence', '_evaluate_optimization_effectiveness', '_start_background_optimization', 'shutdown']",
        "Function current_capacity_estimate not tested",
        "Function create_optimization_engine not tested",
        "Function suggest_deletion_candidates not tested",
        "Function _get_type_importance_factor not tested",
        "Function _optimize_cache not tested",
        "Function _optimize_indexes not tested",
        "Function _calculate_prediction_confidence not tested",
        "Function _evaluate_optimization_effectiveness not tested",
        "Function _start_background_optimization not tested",
        "Function optimization_worker not tested",
        "Function predict_trend not tested"
      ]
    },
    "memmimic.memory.active.cache_manager": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active/cache_manager.py",
        "classes": [
          {
            "name": "MemoryEstimator",
            "methods": [
              "estimate_size"
            ],
            "line": 25
          },
          {
            "name": "LRUMemoryCache",
            "methods": [
              "__init__",
              "get",
              "put",
              "remove",
              "clear",
              "get_stats",
              "evict_expired",
              "force_eviction",
              "_remove_entry",
              "_estimate_entry_size",
              "_ensure_capacity",
              "_evict_lru",
              "_start_background_cleanup",
              "shutdown",
              "__del__"
            ],
            "line": 66
          },
          {
            "name": "CachePool",
            "methods": [
              "__init__",
              "get_cache",
              "get_pool_stats",
              "shutdown_all"
            ],
            "line": 468
          }
        ],
        "functions": [
          {
            "name": "create_cache_manager",
            "line": 517
          },
          {
            "name": "estimate_size",
            "line": 29
          },
          {
            "name": "__init__",
            "line": 79
          },
          {
            "name": "get",
            "line": 115
          },
          {
            "name": "put",
            "line": 163
          },
          {
            "name": "remove",
            "line": 224
          },
          {
            "name": "clear",
            "line": 246
          },
          {
            "name": "get_stats",
            "line": 260
          },
          {
            "name": "evict_expired",
            "line": 326
          },
          {
            "name": "force_eviction",
            "line": 354
          },
          {
            "name": "_remove_entry",
            "line": 387
          },
          {
            "name": "_estimate_entry_size",
            "line": 394
          },
          {
            "name": "_ensure_capacity",
            "line": 402
          },
          {
            "name": "_evict_lru",
            "line": 413
          },
          {
            "name": "_start_background_cleanup",
            "line": 421
          },
          {
            "name": "shutdown",
            "line": 444
          },
          {
            "name": "__del__",
            "line": 460
          },
          {
            "name": "__init__",
            "line": 471
          },
          {
            "name": "get_cache",
            "line": 486
          },
          {
            "name": "get_pool_stats",
            "line": 490
          },
          {
            "name": "shutdown_all",
            "line": 510
          },
          {
            "name": "cleanup_worker",
            "line": 423
          }
        ],
        "line_count": 550
      },
      "test_files": [
        "test_quick_performance",
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MemoryEstimator": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "estimate_size": false
            }
          },
          "LRUMemoryCache": {
            "tested": true,
            "methods_tested": 3,
            "total_methods": 15,
            "method_coverage": {
              "__init__": true,
              "get": true,
              "put": false,
              "remove": false,
              "clear": false,
              "get_stats": true,
              "evict_expired": false,
              "force_eviction": false,
              "_remove_entry": false,
              "_estimate_entry_size": false,
              "_ensure_capacity": false,
              "_evict_lru": false,
              "_start_background_cleanup": false,
              "shutdown": false,
              "__del__": false
            }
          },
          "CachePool": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 4,
            "method_coverage": {
              "__init__": true,
              "get_cache": false,
              "get_pool_stats": false,
              "shutdown_all": false
            }
          }
        },
        "functions": {
          "create_cache_manager": true,
          "estimate_size": false,
          "__init__": true,
          "get": true,
          "put": true,
          "remove": true,
          "clear": false,
          "get_stats": true,
          "evict_expired": false,
          "force_eviction": false,
          "_remove_entry": false,
          "_estimate_entry_size": false,
          "_ensure_capacity": false,
          "_evict_lru": false,
          "_start_background_cleanup": false,
          "shutdown": true,
          "__del__": false,
          "get_cache": false,
          "get_pool_stats": true,
          "shutdown_all": false,
          "cleanup_worker": false
        },
        "overall": 0.36
      },
      "gaps": [
        "Class MemoryEstimator not tested",
        "Class LRUMemoryCache methods not tested: ['put', 'remove', 'clear', 'evict_expired', 'force_eviction', '_remove_entry', '_estimate_entry_size', '_ensure_capacity', '_evict_lru', '_start_background_cleanup', 'shutdown', '__del__']",
        "Class CachePool not tested",
        "Function estimate_size not tested",
        "Function clear not tested",
        "Function evict_expired not tested",
        "Function force_eviction not tested",
        "Function _remove_entry not tested",
        "Function _estimate_entry_size not tested",
        "Function _ensure_capacity not tested",
        "Function _evict_lru not tested",
        "Function _start_background_cleanup not tested",
        "Function __del__ not tested",
        "Function get_cache not tested",
        "Function shutdown_all not tested",
        "Function cleanup_worker not tested"
      ]
    },
    "memmimic.memory.active.indexing_engine": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active/indexing_engine.py",
        "classes": [
          {
            "name": "BTreeIndex",
            "methods": [
              "__init__",
              "insert",
              "search",
              "range_search",
              "remove",
              "_is_full",
              "_split_child",
              "_insert_non_full",
              "_search_node",
              "_range_search_node",
              "_remove_from_node"
            ],
            "line": 26
          },
          {
            "name": "BTreeNode",
            "methods": [
              "__init__"
            ],
            "line": 229
          },
          {
            "name": "HashIndex",
            "methods": [
              "__init__",
              "_hash",
              "insert",
              "search",
              "remove",
              "get_collision_rate"
            ],
            "line": 239
          },
          {
            "name": "FullTextIndex",
            "methods": [
              "__init__",
              "_tokenize",
              "index_content",
              "search_content",
              "remove_memory",
              "get_indexed_terms_count"
            ],
            "line": 319
          },
          {
            "name": "TemporalIndex",
            "methods": [
              "__init__",
              "_get_bucket_key",
              "index_timestamp",
              "search_timerange",
              "remove_memory",
              "get_bucket_count"
            ],
            "line": 406
          },
          {
            "name": "BTreeIndexingEngine",
            "methods": [
              "__init__",
              "index_memory",
              "remove_memory",
              "update_memory",
              "search_memories",
              "get_metrics",
              "optimize_indexes",
              "health_check",
              "_update_index_metrics",
              "_update_query_metrics"
            ],
            "line": 485
          }
        ],
        "functions": [
          {
            "name": "create_indexing_engine",
            "line": 792
          },
          {
            "name": "__init__",
            "line": 29
          },
          {
            "name": "insert",
            "line": 41
          },
          {
            "name": "search",
            "line": 56
          },
          {
            "name": "range_search",
            "line": 63
          },
          {
            "name": "remove",
            "line": 73
          },
          {
            "name": "_is_full",
            "line": 89
          },
          {
            "name": "_split_child",
            "line": 93
          },
          {
            "name": "_insert_non_full",
            "line": 124
          },
          {
            "name": "_search_node",
            "line": 156
          },
          {
            "name": "_range_search_node",
            "line": 170
          },
          {
            "name": "_remove_from_node",
            "line": 195
          },
          {
            "name": "__init__",
            "line": 232
          },
          {
            "name": "__init__",
            "line": 242
          },
          {
            "name": "_hash",
            "line": 254
          },
          {
            "name": "insert",
            "line": 258
          },
          {
            "name": "search",
            "line": 276
          },
          {
            "name": "remove",
            "line": 288
          },
          {
            "name": "get_collision_rate",
            "line": 308
          },
          {
            "name": "__init__",
            "line": 322
          },
          {
            "name": "_tokenize",
            "line": 338
          },
          {
            "name": "index_content",
            "line": 343
          },
          {
            "name": "search_content",
            "line": 362
          },
          {
            "name": "remove_memory",
            "line": 384
          },
          {
            "name": "get_indexed_terms_count",
            "line": 400
          },
          {
            "name": "__init__",
            "line": 409
          },
          {
            "name": "_get_bucket_key",
            "line": 422
          },
          {
            "name": "index_timestamp",
            "line": 428
          },
          {
            "name": "search_timerange",
            "line": 445
          },
          {
            "name": "remove_memory",
            "line": 464
          },
          {
            "name": "get_bucket_count",
            "line": 479
          },
          {
            "name": "__init__",
            "line": 493
          },
          {
            "name": "index_memory",
            "line": 526
          },
          {
            "name": "remove_memory",
            "line": 567
          },
          {
            "name": "update_memory",
            "line": 594
          },
          {
            "name": "search_memories",
            "line": 611
          },
          {
            "name": "get_metrics",
            "line": 673
          },
          {
            "name": "optimize_indexes",
            "line": 697
          },
          {
            "name": "health_check",
            "line": 727
          },
          {
            "name": "_update_index_metrics",
            "line": 769
          },
          {
            "name": "_update_query_metrics",
            "line": 780
          }
        ],
        "line_count": 802
      },
      "test_files": [
        "test_quick_performance",
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "BTreeIndex": {
            "tested": true,
            "methods_tested": 3,
            "total_methods": 11,
            "method_coverage": {
              "__init__": true,
              "insert": true,
              "search": true,
              "range_search": false,
              "remove": false,
              "_is_full": false,
              "_split_child": false,
              "_insert_non_full": false,
              "_search_node": false,
              "_range_search_node": false,
              "_remove_from_node": false
            }
          },
          "BTreeNode": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "HashIndex": {
            "tested": false,
            "methods_tested": 3,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "_hash": false,
              "insert": true,
              "search": true,
              "remove": false,
              "get_collision_rate": false
            }
          },
          "FullTextIndex": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "_tokenize": false,
              "index_content": false,
              "search_content": false,
              "remove_memory": false,
              "get_indexed_terms_count": false
            }
          },
          "TemporalIndex": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "_get_bucket_key": false,
              "index_timestamp": false,
              "search_timerange": false,
              "remove_memory": false,
              "get_bucket_count": false
            }
          },
          "BTreeIndexingEngine": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 10,
            "method_coverage": {
              "__init__": true,
              "index_memory": false,
              "remove_memory": false,
              "update_memory": false,
              "search_memories": false,
              "get_metrics": false,
              "optimize_indexes": false,
              "health_check": false,
              "_update_index_metrics": false,
              "_update_query_metrics": false
            }
          }
        },
        "functions": {
          "create_indexing_engine": true,
          "__init__": true,
          "insert": true,
          "search": true,
          "range_search": false,
          "remove": true,
          "_is_full": false,
          "_split_child": false,
          "_insert_non_full": false,
          "_search_node": false,
          "_range_search_node": false,
          "_remove_from_node": false,
          "_hash": true,
          "get_collision_rate": false,
          "_tokenize": false,
          "index_content": false,
          "search_content": false,
          "remove_memory": false,
          "get_indexed_terms_count": false,
          "_get_bucket_key": false,
          "index_timestamp": false,
          "search_timerange": false,
          "get_bucket_count": false,
          "index_memory": true,
          "update_memory": true,
          "search_memories": true,
          "get_metrics": false,
          "optimize_indexes": true,
          "health_check": true,
          "_update_index_metrics": false,
          "_update_query_metrics": false
        },
        "overall": 0.2765957446808511
      },
      "gaps": [
        "Class BTreeIndex methods not tested: ['range_search', 'remove', '_is_full', '_split_child', '_insert_non_full', '_search_node', '_range_search_node', '_remove_from_node']",
        "Class BTreeNode not tested",
        "Class HashIndex not tested",
        "Class FullTextIndex not tested",
        "Class TemporalIndex not tested",
        "Class BTreeIndexingEngine methods not tested: ['index_memory', 'remove_memory', 'update_memory', 'search_memories', 'get_metrics', 'optimize_indexes', 'health_check', '_update_index_metrics', '_update_query_metrics']",
        "Function range_search not tested",
        "Function _is_full not tested",
        "Function _split_child not tested",
        "Function _insert_non_full not tested",
        "Function _search_node not tested",
        "Function _range_search_node not tested",
        "Function _remove_from_node not tested",
        "Function get_collision_rate not tested",
        "Function _tokenize not tested",
        "Function index_content not tested",
        "Function search_content not tested",
        "Function remove_memory not tested",
        "Function get_indexed_terms_count not tested",
        "Function _get_bucket_key not tested",
        "Function index_timestamp not tested",
        "Function search_timerange not tested",
        "Function get_bucket_count not tested",
        "Function get_metrics not tested",
        "Function _update_index_metrics not tested",
        "Function _update_query_metrics not tested"
      ]
    },
    "memmimic.memory.active.performance_monitor": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active/performance_monitor.py",
        "classes": [
          {
            "name": "PerformanceThresholds",
            "methods": [],
            "line": 26
          },
          {
            "name": "PerformanceAlert",
            "methods": [
              "to_dict"
            ],
            "line": 48
          },
          {
            "name": "RealTimePerformanceMonitor",
            "methods": [
              "__init__",
              "record_query",
              "record_cache_operation",
              "record_memory_usage",
              "get_current_snapshot",
              "get_historical_data",
              "check_thresholds",
              "get_performance_trends",
              "_calculate_avg_query_time",
              "_calculate_queries_per_second",
              "_calculate_query_success_rate",
              "_calculate_cache_hit_rate",
              "_calculate_cache_utilization",
              "_calculate_error_rate",
              "_calculate_health_score",
              "_trigger_alert",
              "_start_background_monitoring",
              "_clear_resolved_alerts",
              "shutdown"
            ],
            "line": 73
          }
        ],
        "functions": [
          {
            "name": "create_performance_monitor",
            "line": 630
          },
          {
            "name": "to_dict",
            "line": 59
          },
          {
            "name": "__init__",
            "line": 86
          },
          {
            "name": "record_query",
            "line": 138
          },
          {
            "name": "record_cache_operation",
            "line": 177
          },
          {
            "name": "record_memory_usage",
            "line": 202
          },
          {
            "name": "get_current_snapshot",
            "line": 233
          },
          {
            "name": "get_historical_data",
            "line": 300
          },
          {
            "name": "check_thresholds",
            "line": 325
          },
          {
            "name": "get_performance_trends",
            "line": 402
          },
          {
            "name": "_calculate_avg_query_time",
            "line": 472
          },
          {
            "name": "_calculate_queries_per_second",
            "line": 478
          },
          {
            "name": "_calculate_query_success_rate",
            "line": 494
          },
          {
            "name": "_calculate_cache_hit_rate",
            "line": 502
          },
          {
            "name": "_calculate_cache_utilization",
            "line": 510
          },
          {
            "name": "_calculate_error_rate",
            "line": 515
          },
          {
            "name": "_calculate_health_score",
            "line": 525
          },
          {
            "name": "_trigger_alert",
            "line": 544
          },
          {
            "name": "_start_background_monitoring",
            "line": 574
          },
          {
            "name": "_clear_resolved_alerts",
            "line": 602
          },
          {
            "name": "shutdown",
            "line": 617
          },
          {
            "name": "monitor_worker",
            "line": 576
          },
          {
            "name": "calculate_trend",
            "line": 426
          }
        ],
        "line_count": 649
      },
      "test_files": [
        "test_quick_performance",
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "PerformanceThresholds": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PerformanceAlert": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "to_dict": false
            }
          },
          "RealTimePerformanceMonitor": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 19,
            "method_coverage": {
              "__init__": true,
              "record_query": false,
              "record_cache_operation": false,
              "record_memory_usage": false,
              "get_current_snapshot": false,
              "get_historical_data": false,
              "check_thresholds": false,
              "get_performance_trends": false,
              "_calculate_avg_query_time": false,
              "_calculate_queries_per_second": false,
              "_calculate_query_success_rate": false,
              "_calculate_cache_hit_rate": false,
              "_calculate_cache_utilization": false,
              "_calculate_error_rate": false,
              "_calculate_health_score": false,
              "_trigger_alert": false,
              "_start_background_monitoring": false,
              "_clear_resolved_alerts": false,
              "shutdown": false
            }
          }
        },
        "functions": {
          "create_performance_monitor": true,
          "to_dict": false,
          "__init__": true,
          "record_query": true,
          "record_cache_operation": true,
          "record_memory_usage": true,
          "get_current_snapshot": true,
          "get_historical_data": false,
          "check_thresholds": true,
          "get_performance_trends": true,
          "_calculate_avg_query_time": false,
          "_calculate_queries_per_second": false,
          "_calculate_query_success_rate": false,
          "_calculate_cache_hit_rate": false,
          "_calculate_cache_utilization": false,
          "_calculate_error_rate": false,
          "_calculate_health_score": false,
          "_trigger_alert": false,
          "_start_background_monitoring": false,
          "_clear_resolved_alerts": false,
          "shutdown": true,
          "monitor_worker": false,
          "calculate_trend": false
        },
        "overall": 0.4230769230769231
      },
      "gaps": [
        "Class PerformanceAlert not tested",
        "Class RealTimePerformanceMonitor methods not tested: ['record_query', 'record_cache_operation', 'record_memory_usage', 'get_current_snapshot', 'get_historical_data', 'check_thresholds', 'get_performance_trends', '_calculate_avg_query_time', '_calculate_queries_per_second', '_calculate_query_success_rate', '_calculate_cache_hit_rate', '_calculate_cache_utilization', '_calculate_error_rate', '_calculate_health_score', '_trigger_alert', '_start_background_monitoring', '_clear_resolved_alerts', 'shutdown']",
        "Function to_dict not tested",
        "Function get_historical_data not tested",
        "Function _calculate_avg_query_time not tested",
        "Function _calculate_queries_per_second not tested",
        "Function _calculate_query_success_rate not tested",
        "Function _calculate_cache_hit_rate not tested",
        "Function _calculate_cache_utilization not tested",
        "Function _calculate_error_rate not tested",
        "Function _calculate_health_score not tested",
        "Function _trigger_alert not tested",
        "Function _start_background_monitoring not tested",
        "Function _clear_resolved_alerts not tested",
        "Function monitor_worker not tested",
        "Function calculate_trend not tested"
      ]
    },
    "memmimic.memory.active.interfaces": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/active/interfaces.py",
        "classes": [
          {
            "name": "IndexType",
            "methods": [],
            "line": 16
          },
          {
            "name": "MemoryStatus",
            "methods": [],
            "line": 24
          },
          {
            "name": "MemoryQuery",
            "methods": [],
            "line": 33
          },
          {
            "name": "IndexingConfig",
            "methods": [],
            "line": 46
          },
          {
            "name": "IndexingMetrics",
            "methods": [
              "reset"
            ],
            "line": 70
          },
          {
            "name": "MemoryIndexingEngine",
            "methods": [
              "index_memory",
              "remove_memory",
              "update_memory",
              "search_memories",
              "get_metrics",
              "optimize_indexes",
              "health_check"
            ],
            "line": 98
          },
          {
            "name": "CacheEntry",
            "methods": [
              "is_expired"
            ],
            "line": 140
          },
          {
            "name": "CacheManager",
            "methods": [
              "get",
              "put",
              "remove",
              "clear",
              "get_stats",
              "evict_expired"
            ],
            "line": 156
          },
          {
            "name": "DatabasePool",
            "methods": [
              "get_connection",
              "return_connection",
              "execute_query",
              "execute_transaction",
              "get_pool_stats",
              "health_check"
            ],
            "line": 190
          },
          {
            "name": "PerformanceSnapshot",
            "methods": [],
            "line": 225
          },
          {
            "name": "PerformanceMonitor",
            "methods": [
              "record_query",
              "record_cache_operation",
              "record_memory_usage",
              "get_current_snapshot",
              "get_historical_data",
              "check_thresholds"
            ],
            "line": 252
          },
          {
            "name": "LifecycleCoordinator",
            "methods": [
              "evaluate_memory_importance",
              "suggest_archival_candidates",
              "suggest_deletion_candidates",
              "optimize_memory_distribution",
              "predict_memory_usage"
            ],
            "line": 286
          },
          {
            "name": "ActiveMemoryError",
            "methods": [
              "__init__"
            ],
            "line": 316
          },
          {
            "name": "IndexingError",
            "methods": [],
            "line": 328
          },
          {
            "name": "CacheError",
            "methods": [],
            "line": 333
          },
          {
            "name": "DatabasePoolError",
            "methods": [],
            "line": 338
          },
          {
            "name": "PerformanceError",
            "methods": [],
            "line": 343
          },
          {
            "name": "LifecycleError",
            "methods": [],
            "line": 348
          },
          {
            "name": "ThreadSafeCounter",
            "methods": [
              "__init__",
              "increment",
              "decrement",
              "get",
              "set"
            ],
            "line": 354
          },
          {
            "name": "ThreadSafeMetrics",
            "methods": [
              "__init__",
              "increment_counter",
              "set_gauge",
              "get_metric",
              "get_all_metrics"
            ],
            "line": 380
          }
        ],
        "functions": [
          {
            "name": "reset",
            "line": 89
          },
          {
            "name": "index_memory",
            "line": 102
          },
          {
            "name": "remove_memory",
            "line": 108
          },
          {
            "name": "update_memory",
            "line": 113
          },
          {
            "name": "search_memories",
            "line": 119
          },
          {
            "name": "get_metrics",
            "line": 124
          },
          {
            "name": "optimize_indexes",
            "line": 129
          },
          {
            "name": "health_check",
            "line": 134
          },
          {
            "name": "is_expired",
            "line": 149
          },
          {
            "name": "get",
            "line": 160
          },
          {
            "name": "put",
            "line": 165
          },
          {
            "name": "remove",
            "line": 170
          },
          {
            "name": "clear",
            "line": 175
          },
          {
            "name": "get_stats",
            "line": 180
          },
          {
            "name": "evict_expired",
            "line": 185
          },
          {
            "name": "get_connection",
            "line": 194
          },
          {
            "name": "return_connection",
            "line": 199
          },
          {
            "name": "execute_query",
            "line": 204
          },
          {
            "name": "execute_transaction",
            "line": 209
          },
          {
            "name": "get_pool_stats",
            "line": 214
          },
          {
            "name": "health_check",
            "line": 219
          },
          {
            "name": "record_query",
            "line": 256
          },
          {
            "name": "record_cache_operation",
            "line": 261
          },
          {
            "name": "record_memory_usage",
            "line": 266
          },
          {
            "name": "get_current_snapshot",
            "line": 271
          },
          {
            "name": "get_historical_data",
            "line": 276
          },
          {
            "name": "check_thresholds",
            "line": 281
          },
          {
            "name": "evaluate_memory_importance",
            "line": 290
          },
          {
            "name": "suggest_archival_candidates",
            "line": 295
          },
          {
            "name": "suggest_deletion_candidates",
            "line": 300
          },
          {
            "name": "optimize_memory_distribution",
            "line": 305
          },
          {
            "name": "predict_memory_usage",
            "line": 310
          },
          {
            "name": "__init__",
            "line": 319
          },
          {
            "name": "__init__",
            "line": 357
          },
          {
            "name": "increment",
            "line": 361
          },
          {
            "name": "decrement",
            "line": 366
          },
          {
            "name": "get",
            "line": 371
          },
          {
            "name": "set",
            "line": 375
          },
          {
            "name": "__init__",
            "line": 383
          },
          {
            "name": "increment_counter",
            "line": 387
          },
          {
            "name": "set_gauge",
            "line": 396
          },
          {
            "name": "get_metric",
            "line": 400
          },
          {
            "name": "get_all_metrics",
            "line": 407
          }
        ],
        "line_count": 415
      },
      "test_files": [
        "test_quick_performance",
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_active_memory_performance",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "IndexType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryStatus": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MemoryQuery": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "IndexingConfig": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "IndexingMetrics": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "reset": false
            }
          },
          "MemoryIndexingEngine": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 7,
            "method_coverage": {
              "index_memory": false,
              "remove_memory": false,
              "update_memory": false,
              "search_memories": false,
              "get_metrics": false,
              "optimize_indexes": false,
              "health_check": false
            }
          },
          "CacheEntry": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "is_expired": false
            }
          },
          "CacheManager": {
            "tested": true,
            "methods_tested": 2,
            "total_methods": 6,
            "method_coverage": {
              "get": true,
              "put": false,
              "remove": false,
              "clear": false,
              "get_stats": true,
              "evict_expired": false
            }
          },
          "DatabasePool": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 6,
            "method_coverage": {
              "get_connection": false,
              "return_connection": false,
              "execute_query": false,
              "execute_transaction": false,
              "get_pool_stats": false,
              "health_check": false
            }
          },
          "PerformanceSnapshot": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PerformanceMonitor": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 6,
            "method_coverage": {
              "record_query": false,
              "record_cache_operation": false,
              "record_memory_usage": false,
              "get_current_snapshot": false,
              "get_historical_data": false,
              "check_thresholds": false
            }
          },
          "LifecycleCoordinator": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 5,
            "method_coverage": {
              "evaluate_memory_importance": false,
              "suggest_archival_candidates": false,
              "suggest_deletion_candidates": false,
              "optimize_memory_distribution": false,
              "predict_memory_usage": false
            }
          },
          "ActiveMemoryError": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "__init__": true
            }
          },
          "IndexingError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CacheError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "DatabasePoolError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PerformanceError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "LifecycleError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ThreadSafeCounter": {
            "tested": false,
            "methods_tested": 3,
            "total_methods": 5,
            "method_coverage": {
              "__init__": true,
              "increment": false,
              "decrement": false,
              "get": true,
              "set": true
            }
          },
          "ThreadSafeMetrics": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 5,
            "method_coverage": {
              "__init__": true,
              "increment_counter": false,
              "set_gauge": false,
              "get_metric": false,
              "get_all_metrics": false
            }
          }
        },
        "functions": {
          "reset": false,
          "index_memory": true,
          "remove_memory": false,
          "update_memory": true,
          "search_memories": true,
          "get_metrics": false,
          "optimize_indexes": true,
          "health_check": true,
          "is_expired": false,
          "get": true,
          "put": true,
          "remove": true,
          "clear": false,
          "get_stats": true,
          "evict_expired": false,
          "get_connection": true,
          "return_connection": true,
          "execute_query": true,
          "execute_transaction": true,
          "get_pool_stats": true,
          "record_query": true,
          "record_cache_operation": true,
          "record_memory_usage": true,
          "get_current_snapshot": true,
          "get_historical_data": false,
          "check_thresholds": true,
          "evaluate_memory_importance": true,
          "suggest_archival_candidates": true,
          "suggest_deletion_candidates": false,
          "optimize_memory_distribution": true,
          "predict_memory_usage": true,
          "__init__": true,
          "increment": false,
          "decrement": false,
          "set": true,
          "increment_counter": false,
          "set_gauge": false,
          "get_metric": false,
          "get_all_metrics": false
        },
        "overall": 0.4603174603174603
      },
      "gaps": [
        "Class IndexType not tested",
        "Class MemoryStatus not tested",
        "Class IndexingMetrics not tested",
        "Class MemoryIndexingEngine not tested",
        "Class CacheEntry not tested",
        "Class CacheManager methods not tested: ['put', 'remove', 'clear', 'evict_expired']",
        "Class DatabasePool not tested",
        "Class PerformanceSnapshot not tested",
        "Class PerformanceMonitor methods not tested: ['record_query', 'record_cache_operation', 'record_memory_usage', 'get_current_snapshot', 'get_historical_data', 'check_thresholds']",
        "Class LifecycleCoordinator not tested",
        "Class ActiveMemoryError not tested",
        "Class IndexingError not tested",
        "Class CacheError not tested",
        "Class DatabasePoolError not tested",
        "Class PerformanceError not tested",
        "Class LifecycleError not tested",
        "Class ThreadSafeCounter not tested",
        "Class ThreadSafeMetrics not tested",
        "Function reset not tested",
        "Function remove_memory not tested",
        "Function get_metrics not tested",
        "Function is_expired not tested",
        "Function clear not tested",
        "Function evict_expired not tested",
        "Function get_historical_data not tested",
        "Function suggest_deletion_candidates not tested",
        "Function increment not tested",
        "Function decrement not tested",
        "Function increment_counter not tested",
        "Function set_gauge not tested",
        "Function get_metric not tested",
        "Function get_all_metrics not tested"
      ]
    },
    "memmimic.memory.storage.amms_storage": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/storage/amms_storage.py",
        "classes": [
          {
            "name": "Memory",
            "methods": [],
            "line": 27
          },
          {
            "name": "AMMSStorage",
            "methods": [
              "__init__",
              "_init_database",
              "_initialize_connection_pool",
              "_get_connection_from_pool",
              "_return_connection_to_pool",
              "_get_connection",
              "get_stats",
              "_update_avg_response_time",
              "_get_or_create_loop",
              "_run_async_safe",
              "search",
              "get_all",
              "list_all",
              "add",
              "delete",
              "update_memory"
            ],
            "line": 37
          }
        ],
        "functions": [
          {
            "name": "create_amms_storage",
            "line": 492
          },
          {
            "name": "__init__",
            "line": 44
          },
          {
            "name": "_init_database",
            "line": 85
          },
          {
            "name": "_initialize_connection_pool",
            "line": 124
          },
          {
            "name": "_get_connection_from_pool",
            "line": 141
          },
          {
            "name": "_return_connection_to_pool",
            "line": 162
          },
          {
            "name": "_get_connection",
            "line": 171
          },
          {
            "name": "store_memory",
            "line": 185,
            "async": true
          },
          {
            "name": "retrieve_memory",
            "line": 231,
            "async": true
          },
          {
            "name": "search_memories",
            "line": 274,
            "async": true
          },
          {
            "name": "list_memories",
            "line": 320,
            "async": true
          },
          {
            "name": "count_memories",
            "line": 356,
            "async": true
          },
          {
            "name": "delete_memory",
            "line": 366,
            "async": true
          },
          {
            "name": "get_stats",
            "line": 376
          },
          {
            "name": "_update_avg_response_time",
            "line": 391
          },
          {
            "name": "_get_or_create_loop",
            "line": 400
          },
          {
            "name": "_run_async_safe",
            "line": 422
          },
          {
            "name": "search",
            "line": 437
          },
          {
            "name": "get_all",
            "line": 441
          },
          {
            "name": "list_all",
            "line": 445
          },
          {
            "name": "add",
            "line": 449
          },
          {
            "name": "delete",
            "line": 453
          },
          {
            "name": "update_memory",
            "line": 457
          },
          {
            "name": "close",
            "line": 470,
            "async": true
          },
          {
            "name": "_update",
            "line": 459,
            "async": true
          },
          {
            "name": "run_loop",
            "line": 405
          }
        ],
        "line_count": 494
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_performance_config",
        "test_amms_storage_comprehensive",
        "test_error_handling",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "Memory": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "AMMSStorage": {
            "tested": true,
            "methods_tested": 5,
            "total_methods": 16,
            "method_coverage": {
              "__init__": true,
              "_init_database": false,
              "_initialize_connection_pool": false,
              "_get_connection_from_pool": false,
              "_return_connection_to_pool": false,
              "_get_connection": false,
              "get_stats": true,
              "_update_avg_response_time": false,
              "_get_or_create_loop": false,
              "_run_async_safe": false,
              "search": true,
              "get_all": false,
              "list_all": false,
              "add": true,
              "delete": true,
              "update_memory": false
            }
          }
        },
        "functions": {
          "create_amms_storage": false,
          "__init__": true,
          "_init_database": false,
          "_initialize_connection_pool": false,
          "_get_connection_from_pool": false,
          "_return_connection_to_pool": false,
          "_get_connection": false,
          "store_memory": true,
          "retrieve_memory": true,
          "search_memories": true,
          "list_memories": false,
          "count_memories": false,
          "delete_memory": true,
          "get_stats": true,
          "_update_avg_response_time": false,
          "_get_or_create_loop": false,
          "_run_async_safe": false,
          "search": true,
          "get_all": true,
          "list_all": false,
          "add": true,
          "delete": true,
          "update_memory": true,
          "close": true,
          "_update": false,
          "run_loop": false
        },
        "overall": 0.5
      },
      "gaps": [
        "Class AMMSStorage methods not tested: ['_init_database', '_initialize_connection_pool', '_get_connection_from_pool', '_return_connection_to_pool', '_get_connection', '_update_avg_response_time', '_get_or_create_loop', '_run_async_safe', 'get_all', 'list_all', 'update_memory']",
        "Function create_amms_storage not tested",
        "Function _init_database not tested",
        "Function _initialize_connection_pool not tested",
        "Function _get_connection_from_pool not tested",
        "Function _return_connection_to_pool not tested",
        "Function _get_connection not tested",
        "Function list_memories not tested",
        "Function count_memories not tested",
        "Function _update_avg_response_time not tested",
        "Function _get_or_create_loop not tested",
        "Function _run_async_safe not tested",
        "Function list_all not tested",
        "Function _update not tested",
        "Function run_loop not tested"
      ]
    },
    "memmimic.memory.search.search_config": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/search_config.py",
        "classes": [
          {
            "name": "DefaultSearchConfig",
            "methods": [
              "__post_init__",
              "_load_environment_overrides",
              "_parse_similarity_metric",
              "_parse_bool",
              "_validate_configuration",
              "get_similarity_metric",
              "get_cache_ttl",
              "get_max_results",
              "get_weighted_scores",
              "is_cxd_enabled",
              "get_performance_settings",
              "to_dict"
            ],
            "line": 14
          }
        ],
        "functions": [
          {
            "name": "create_search_config",
            "line": 183
          },
          {
            "name": "load_config_from_file",
            "line": 188
          },
          {
            "name": "__post_init__",
            "line": 47
          },
          {
            "name": "_load_environment_overrides",
            "line": 52
          },
          {
            "name": "_parse_similarity_metric",
            "line": 78
          },
          {
            "name": "_parse_bool",
            "line": 86
          },
          {
            "name": "_validate_configuration",
            "line": 90
          },
          {
            "name": "get_similarity_metric",
            "line": 129
          },
          {
            "name": "get_cache_ttl",
            "line": 133
          },
          {
            "name": "get_max_results",
            "line": 137
          },
          {
            "name": "get_weighted_scores",
            "line": 142
          },
          {
            "name": "is_cxd_enabled",
            "line": 146
          },
          {
            "name": "get_performance_settings",
            "line": 150
          },
          {
            "name": "to_dict",
            "line": 159
          }
        ],
        "line_count": 232
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration",
        "memory.search.test_integration",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "DefaultSearchConfig": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 12,
            "method_coverage": {
              "__post_init__": false,
              "_load_environment_overrides": false,
              "_parse_similarity_metric": false,
              "_parse_bool": false,
              "_validate_configuration": false,
              "get_similarity_metric": false,
              "get_cache_ttl": false,
              "get_max_results": false,
              "get_weighted_scores": false,
              "is_cxd_enabled": false,
              "get_performance_settings": false,
              "to_dict": false
            }
          }
        },
        "functions": {
          "create_search_config": false,
          "load_config_from_file": false,
          "__post_init__": false,
          "_load_environment_overrides": false,
          "_parse_similarity_metric": false,
          "_parse_bool": false,
          "_validate_configuration": false,
          "get_similarity_metric": false,
          "get_cache_ttl": false,
          "get_max_results": false,
          "get_weighted_scores": false,
          "is_cxd_enabled": false,
          "get_performance_settings": false,
          "to_dict": false
        },
        "overall": 0.06666666666666667
      },
      "gaps": [
        "Class DefaultSearchConfig methods not tested: ['__post_init__', '_load_environment_overrides', '_parse_similarity_metric', '_parse_bool', '_validate_configuration', 'get_similarity_metric', 'get_cache_ttl', 'get_max_results', 'get_weighted_scores', 'is_cxd_enabled', 'get_performance_settings', 'to_dict']",
        "Function create_search_config not tested",
        "Function load_config_from_file not tested",
        "Function __post_init__ not tested",
        "Function _load_environment_overrides not tested",
        "Function _parse_similarity_metric not tested",
        "Function _parse_bool not tested",
        "Function _validate_configuration not tested",
        "Function get_similarity_metric not tested",
        "Function get_cache_ttl not tested",
        "Function get_max_results not tested",
        "Function get_weighted_scores not tested",
        "Function is_cxd_enabled not tested",
        "Function get_performance_settings not tested",
        "Function to_dict not tested"
      ]
    },
    "memmimic.memory.search.wordnet_expander": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/wordnet_expander.py",
        "classes": [
          {
            "name": "WordNetExpander",
            "methods": [
              "__init__",
              "get_wordnet_synonyms",
              "get_multilingual_synonyms",
              "expand_query",
              "search_with_expansion"
            ],
            "line": 70
          }
        ],
        "functions": [
          {
            "name": "ensure_wordnet",
            "line": 24
          },
          {
            "name": "get_wordnet_synonyms",
            "line": 289
          },
          {
            "name": "expand_query_with_wordnet",
            "line": 296
          },
          {
            "name": "__init__",
            "line": 77
          },
          {
            "name": "get_wordnet_synonyms",
            "line": 85
          },
          {
            "name": "get_multilingual_synonyms",
            "line": 139
          },
          {
            "name": "expand_query",
            "line": 175
          },
          {
            "name": "search_with_expansion",
            "line": 220
          }
        ],
        "line_count": 299
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "WordNetExpander": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 5,
            "method_coverage": {
              "__init__": false,
              "get_wordnet_synonyms": false,
              "get_multilingual_synonyms": false,
              "expand_query": false,
              "search_with_expansion": false
            }
          }
        },
        "functions": {
          "ensure_wordnet": false,
          "get_wordnet_synonyms": false,
          "expand_query_with_wordnet": false,
          "__init__": true,
          "get_multilingual_synonyms": false,
          "expand_query": true,
          "search_with_expansion": false
        },
        "overall": 0.3333333333333333
      },
      "gaps": [
        "Class WordNetExpander methods not tested: ['__init__', 'get_wordnet_synonyms', 'get_multilingual_synonyms', 'expand_query', 'search_with_expansion']",
        "Function ensure_wordnet not tested",
        "Function get_wordnet_synonyms not tested",
        "Function expand_query_with_wordnet not tested",
        "Function get_multilingual_synonyms not tested",
        "Function search_with_expansion not tested"
      ]
    },
    "memmimic.memory.search.performance_cache": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/performance_cache.py",
        "classes": [
          {
            "name": "LRUMemoryCache",
            "methods": [
              "__init__",
              "get",
              "set",
              "invalidate",
              "get_stats",
              "warm_cache",
              "clear",
              "_is_expired",
              "_remove_expired_entry",
              "_evict_lru",
              "_cleanup_expired",
              "_generate_cache_key"
            ],
            "line": 23
          }
        ],
        "functions": [
          {
            "name": "generate_search_cache_key",
            "line": 297
          },
          {
            "name": "create_performance_cache",
            "line": 330
          },
          {
            "name": "__init__",
            "line": 34
          },
          {
            "name": "get",
            "line": 60
          },
          {
            "name": "set",
            "line": 103
          },
          {
            "name": "invalidate",
            "line": 146
          },
          {
            "name": "get_stats",
            "line": 179
          },
          {
            "name": "warm_cache",
            "line": 212
          },
          {
            "name": "clear",
            "line": 240
          },
          {
            "name": "_is_expired",
            "line": 253
          },
          {
            "name": "_remove_expired_entry",
            "line": 260
          },
          {
            "name": "_evict_lru",
            "line": 266
          },
          {
            "name": "_cleanup_expired",
            "line": 276
          },
          {
            "name": "_generate_cache_key",
            "line": 291
          }
        ],
        "line_count": 357
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration",
        "memory.search.test_integration",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "LRUMemoryCache": {
            "tested": true,
            "methods_tested": 2,
            "total_methods": 12,
            "method_coverage": {
              "__init__": false,
              "get": true,
              "set": false,
              "invalidate": false,
              "get_stats": true,
              "warm_cache": false,
              "clear": false,
              "_is_expired": false,
              "_remove_expired_entry": false,
              "_evict_lru": false,
              "_cleanup_expired": false,
              "_generate_cache_key": false
            }
          }
        },
        "functions": {
          "generate_search_cache_key": true,
          "create_performance_cache": true,
          "__init__": true,
          "get": true,
          "set": true,
          "invalidate": false,
          "get_stats": true,
          "warm_cache": true,
          "clear": false,
          "_is_expired": false,
          "_remove_expired_entry": false,
          "_evict_lru": false,
          "_cleanup_expired": false,
          "_generate_cache_key": false
        },
        "overall": 0.5333333333333333
      },
      "gaps": [
        "Class LRUMemoryCache methods not tested: ['__init__', 'set', 'invalidate', 'warm_cache', 'clear', '_is_expired', '_remove_expired_entry', '_evict_lru', '_cleanup_expired', '_generate_cache_key']",
        "Function invalidate not tested",
        "Function clear not tested",
        "Function _is_expired not tested",
        "Function _remove_expired_entry not tested",
        "Function _evict_lru not tested",
        "Function _cleanup_expired not tested",
        "Function _generate_cache_key not tested"
      ]
    },
    "memmimic.memory.search.cxd_integration": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/cxd_integration.py",
        "classes": [
          {
            "name": "ProductionCXDIntegrationBridge",
            "methods": [
              "__init__",
              "enhance_results",
              "classify_content",
              "_batch_enhance_results",
              "_single_enhance_results",
              "_enhance_single_result",
              "_perform_classification",
              "_create_fallback_classification",
              "_calculate_cxd_relevance_boost",
              "_apply_fallback_classification",
              "_generate_cache_key",
              "_get_cached_classification",
              "_cache_classification",
              "_update_classification_metrics",
              "get_metrics",
              "clear_cache",
              "health_check"
            ],
            "line": 22
          }
        ],
        "functions": [
          {
            "name": "create_cxd_integration_bridge",
            "line": 448
          },
          {
            "name": "__init__",
            "line": 34
          },
          {
            "name": "enhance_results",
            "line": 81
          },
          {
            "name": "classify_content",
            "line": 120
          },
          {
            "name": "_batch_enhance_results",
            "line": 156
          },
          {
            "name": "_single_enhance_results",
            "line": 185
          },
          {
            "name": "_enhance_single_result",
            "line": 209
          },
          {
            "name": "_perform_classification",
            "line": 237
          },
          {
            "name": "_create_fallback_classification",
            "line": 271
          },
          {
            "name": "_calculate_cxd_relevance_boost",
            "line": 298
          },
          {
            "name": "_apply_fallback_classification",
            "line": 329
          },
          {
            "name": "_generate_cache_key",
            "line": 351
          },
          {
            "name": "_get_cached_classification",
            "line": 358
          },
          {
            "name": "_cache_classification",
            "line": 377
          },
          {
            "name": "_update_classification_metrics",
            "line": 389
          },
          {
            "name": "get_metrics",
            "line": 399
          },
          {
            "name": "clear_cache",
            "line": 420
          },
          {
            "name": "health_check",
            "line": 426
          }
        ],
        "line_count": 459
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "ProductionCXDIntegrationBridge": {
            "tested": true,
            "methods_tested": 2,
            "total_methods": 17,
            "method_coverage": {
              "__init__": false,
              "enhance_results": false,
              "classify_content": false,
              "_batch_enhance_results": false,
              "_single_enhance_results": false,
              "_enhance_single_result": false,
              "_perform_classification": false,
              "_create_fallback_classification": false,
              "_calculate_cxd_relevance_boost": false,
              "_apply_fallback_classification": false,
              "_generate_cache_key": false,
              "_get_cached_classification": false,
              "_cache_classification": false,
              "_update_classification_metrics": false,
              "get_metrics": true,
              "clear_cache": false,
              "health_check": true
            }
          }
        },
        "functions": {
          "create_cxd_integration_bridge": true,
          "__init__": true,
          "enhance_results": true,
          "classify_content": true,
          "_batch_enhance_results": false,
          "_single_enhance_results": false,
          "_enhance_single_result": false,
          "_perform_classification": false,
          "_create_fallback_classification": false,
          "_calculate_cxd_relevance_boost": false,
          "_apply_fallback_classification": false,
          "_generate_cache_key": false,
          "_get_cached_classification": false,
          "_cache_classification": false,
          "_update_classification_metrics": false,
          "get_metrics": true,
          "clear_cache": false,
          "health_check": true
        },
        "overall": 0.3684210526315789
      },
      "gaps": [
        "Class ProductionCXDIntegrationBridge methods not tested: ['__init__', 'enhance_results', 'classify_content', '_batch_enhance_results', '_single_enhance_results', '_enhance_single_result', '_perform_classification', '_create_fallback_classification', '_calculate_cxd_relevance_boost', '_apply_fallback_classification', '_generate_cache_key', '_get_cached_classification', '_cache_classification', '_update_classification_metrics', 'clear_cache']",
        "Function _batch_enhance_results not tested",
        "Function _single_enhance_results not tested",
        "Function _enhance_single_result not tested",
        "Function _perform_classification not tested",
        "Function _create_fallback_classification not tested",
        "Function _calculate_cxd_relevance_boost not tested",
        "Function _apply_fallback_classification not tested",
        "Function _generate_cache_key not tested",
        "Function _get_cached_classification not tested",
        "Function _cache_classification not tested",
        "Function _update_classification_metrics not tested",
        "Function clear_cache not tested"
      ]
    },
    "memmimic.memory.search.response_formatter": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/response_formatter.py",
        "classes": [
          {
            "name": "MCPResponseFormatter",
            "methods": [
              "__init__",
              "format_search_results",
              "format_cxd_search_results",
              "format_error_response",
              "_format_detailed_results",
              "_format_compact_results",
              "_format_summary_results",
              "_format_search_result",
              "_format_search_query",
              "_format_search_context",
              "_format_cxd_classification",
              "_generate_cxd_analysis"
            ],
            "line": 21
          }
        ],
        "functions": [
          {
            "name": "create_mcp_response_formatter",
            "line": 365
          },
          {
            "name": "__init__",
            "line": 29
          },
          {
            "name": "format_search_results",
            "line": 40
          },
          {
            "name": "format_cxd_search_results",
            "line": 74
          },
          {
            "name": "format_error_response",
            "line": 113
          },
          {
            "name": "_format_detailed_results",
            "line": 171
          },
          {
            "name": "_format_compact_results",
            "line": 184
          },
          {
            "name": "_format_summary_results",
            "line": 206
          },
          {
            "name": "_format_search_result",
            "line": 236
          },
          {
            "name": "_format_search_query",
            "line": 257
          },
          {
            "name": "_format_search_context",
            "line": 268
          },
          {
            "name": "_format_cxd_classification",
            "line": 278
          },
          {
            "name": "_generate_cxd_analysis",
            "line": 286
          }
        ],
        "line_count": 375
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_mcp_handlers",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "MCPResponseFormatter": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 12,
            "method_coverage": {
              "__init__": false,
              "format_search_results": false,
              "format_cxd_search_results": false,
              "format_error_response": false,
              "_format_detailed_results": false,
              "_format_compact_results": false,
              "_format_summary_results": false,
              "_format_search_result": false,
              "_format_search_query": false,
              "_format_search_context": false,
              "_format_cxd_classification": false,
              "_generate_cxd_analysis": false
            }
          }
        },
        "functions": {
          "create_mcp_response_formatter": false,
          "__init__": true,
          "format_search_results": true,
          "format_cxd_search_results": true,
          "format_error_response": true,
          "_format_detailed_results": false,
          "_format_compact_results": false,
          "_format_summary_results": false,
          "_format_search_result": false,
          "_format_search_query": false,
          "_format_search_context": false,
          "_format_cxd_classification": false,
          "_generate_cxd_analysis": false
        },
        "overall": 0.35714285714285715
      },
      "gaps": [
        "Class MCPResponseFormatter methods not tested: ['__init__', 'format_search_results', 'format_cxd_search_results', 'format_error_response', '_format_detailed_results', '_format_compact_results', '_format_summary_results', '_format_search_result', '_format_search_query', '_format_search_context', '_format_cxd_classification', '_generate_cxd_analysis']",
        "Function create_mcp_response_formatter not tested",
        "Function _format_detailed_results not tested",
        "Function _format_compact_results not tested",
        "Function _format_summary_results not tested",
        "Function _format_search_result not tested",
        "Function _format_search_query not tested",
        "Function _format_search_context not tested",
        "Function _format_cxd_classification not tested",
        "Function _generate_cxd_analysis not tested"
      ]
    },
    "memmimic.memory.search.hybrid_search": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/hybrid_search.py",
        "classes": [
          {
            "name": "HybridSearchEngine",
            "methods": [
              "__init__",
              "_get_memory_store",
              "search_memories_hybrid",
              "_apply_cxd_filter",
              "_format_results"
            ],
            "line": 24
          }
        ],
        "functions": [
          {
            "name": "search_memories_hybrid",
            "line": 178
          },
          {
            "name": "__init__",
            "line": 32
          },
          {
            "name": "_get_memory_store",
            "line": 42
          },
          {
            "name": "search_memories_hybrid",
            "line": 51
          },
          {
            "name": "_apply_cxd_filter",
            "line": 121
          },
          {
            "name": "_format_results",
            "line": 144
          }
        ],
        "line_count": 195
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "HybridSearchEngine": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 5,
            "method_coverage": {
              "__init__": false,
              "_get_memory_store": false,
              "search_memories_hybrid": false,
              "_apply_cxd_filter": false,
              "_format_results": false
            }
          }
        },
        "functions": {
          "search_memories_hybrid": false,
          "__init__": true,
          "_get_memory_store": false,
          "_apply_cxd_filter": false,
          "_format_results": false
        },
        "overall": 0.14285714285714285
      },
      "gaps": [
        "Class HybridSearchEngine not tested",
        "Function search_memories_hybrid not tested",
        "Function _get_memory_store not tested",
        "Function _apply_cxd_filter not tested",
        "Function _format_results not tested"
      ]
    },
    "memmimic.memory.search.result_processor": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/result_processor.py",
        "classes": [
          {
            "name": "RankingAlgorithm",
            "methods": [],
            "line": 22
          },
          {
            "name": "RankingWeights",
            "methods": [],
            "line": 32
          },
          {
            "name": "AdvancedResultProcessor",
            "methods": [
              "__init__",
              "rank_results",
              "filter_results",
              "_select_ranking_algorithm",
              "_rank_by_relevance",
              "_rank_by_relevance_and_cxd",
              "_rank_with_temporal_boost",
              "_rank_by_metadata_quality",
              "_rank_hybrid",
              "_calculate_recency_score",
              "_calculate_metadata_quality",
              "_should_include_result",
              "_should_promote_diversity",
              "_promote_result_diversity",
              "_update_metrics",
              "get_metrics",
              "configure_ranking_weights"
            ],
            "line": 40
          }
        ],
        "functions": [
          {
            "name": "create_result_processor",
            "line": 469
          },
          {
            "name": "__init__",
            "line": 52
          },
          {
            "name": "rank_results",
            "line": 83
          },
          {
            "name": "filter_results",
            "line": 122
          },
          {
            "name": "_select_ranking_algorithm",
            "line": 159
          },
          {
            "name": "_rank_by_relevance",
            "line": 180
          },
          {
            "name": "_rank_by_relevance_and_cxd",
            "line": 185
          },
          {
            "name": "_rank_with_temporal_boost",
            "line": 201
          },
          {
            "name": "_rank_by_metadata_quality",
            "line": 244
          },
          {
            "name": "_rank_hybrid",
            "line": 269
          },
          {
            "name": "_calculate_recency_score",
            "line": 298
          },
          {
            "name": "_calculate_metadata_quality",
            "line": 330
          },
          {
            "name": "_should_include_result",
            "line": 361
          },
          {
            "name": "_should_promote_diversity",
            "line": 396
          },
          {
            "name": "_promote_result_diversity",
            "line": 403
          },
          {
            "name": "_update_metrics",
            "line": 433
          },
          {
            "name": "get_metrics",
            "line": 453
          },
          {
            "name": "configure_ranking_weights",
            "line": 463
          },
          {
            "name": "combined_score",
            "line": 189
          },
          {
            "name": "temporal_score",
            "line": 205
          },
          {
            "name": "metadata_score",
            "line": 248
          },
          {
            "name": "hybrid_score",
            "line": 273
          }
        ],
        "line_count": 479
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "RankingAlgorithm": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "RankingWeights": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "AdvancedResultProcessor": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 17,
            "method_coverage": {
              "__init__": false,
              "rank_results": false,
              "filter_results": false,
              "_select_ranking_algorithm": false,
              "_rank_by_relevance": false,
              "_rank_by_relevance_and_cxd": false,
              "_rank_with_temporal_boost": false,
              "_rank_by_metadata_quality": false,
              "_rank_hybrid": false,
              "_calculate_recency_score": false,
              "_calculate_metadata_quality": false,
              "_should_include_result": false,
              "_should_promote_diversity": false,
              "_promote_result_diversity": false,
              "_update_metrics": false,
              "get_metrics": true,
              "configure_ranking_weights": false
            }
          }
        },
        "functions": {
          "create_result_processor": false,
          "__init__": true,
          "rank_results": true,
          "filter_results": false,
          "_select_ranking_algorithm": false,
          "_rank_by_relevance": false,
          "_rank_by_relevance_and_cxd": false,
          "_rank_with_temporal_boost": false,
          "_rank_by_metadata_quality": false,
          "_rank_hybrid": false,
          "_calculate_recency_score": false,
          "_calculate_metadata_quality": false,
          "_should_include_result": false,
          "_should_promote_diversity": false,
          "_promote_result_diversity": false,
          "_update_metrics": false,
          "get_metrics": true,
          "configure_ranking_weights": false,
          "combined_score": false,
          "temporal_score": false,
          "metadata_score": false,
          "hybrid_score": false
        },
        "overall": 0.16
      },
      "gaps": [
        "Class RankingAlgorithm not tested",
        "Class RankingWeights not tested",
        "Class AdvancedResultProcessor methods not tested: ['__init__', 'rank_results', 'filter_results', '_select_ranking_algorithm', '_rank_by_relevance', '_rank_by_relevance_and_cxd', '_rank_with_temporal_boost', '_rank_by_metadata_quality', '_rank_hybrid', '_calculate_recency_score', '_calculate_metadata_quality', '_should_include_result', '_should_promote_diversity', '_promote_result_diversity', '_update_metrics', 'configure_ranking_weights']",
        "Function create_result_processor not tested",
        "Function filter_results not tested",
        "Function _select_ranking_algorithm not tested",
        "Function _rank_by_relevance not tested",
        "Function _rank_by_relevance_and_cxd not tested",
        "Function _rank_with_temporal_boost not tested",
        "Function _rank_by_metadata_quality not tested",
        "Function _rank_hybrid not tested",
        "Function _calculate_recency_score not tested",
        "Function _calculate_metadata_quality not tested",
        "Function _should_include_result not tested",
        "Function _should_promote_diversity not tested",
        "Function _promote_result_diversity not tested",
        "Function _update_metrics not tested",
        "Function configure_ranking_weights not tested",
        "Function combined_score not tested",
        "Function temporal_score not tested",
        "Function metadata_score not tested",
        "Function hybrid_score not tested"
      ]
    },
    "memmimic.memory.search.search_engine": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/search_engine.py",
        "classes": [
          {
            "name": "HybridMemorySearchEngine",
            "methods": [
              "__init__",
              "search",
              "warm_cache",
              "get_metrics",
              "health_check",
              "_validate_query",
              "_preprocess_query",
              "_retrieve_candidates",
              "_score_candidates",
              "_enhance_with_cxd",
              "_process_results",
              "_generate_cache_key",
              "_try_get_cached_results",
              "_cache_results",
              "_update_search_context",
              "_update_metrics",
              "_get_error_rate"
            ],
            "line": 26
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 34
          },
          {
            "name": "search",
            "line": 67
          },
          {
            "name": "warm_cache",
            "line": 157
          },
          {
            "name": "get_metrics",
            "line": 179
          },
          {
            "name": "health_check",
            "line": 183
          },
          {
            "name": "_validate_query",
            "line": 212
          },
          {
            "name": "_preprocess_query",
            "line": 232
          },
          {
            "name": "_retrieve_candidates",
            "line": 245
          },
          {
            "name": "_score_candidates",
            "line": 264
          },
          {
            "name": "_enhance_with_cxd",
            "line": 296
          },
          {
            "name": "_process_results",
            "line": 305
          },
          {
            "name": "_generate_cache_key",
            "line": 328
          },
          {
            "name": "_try_get_cached_results",
            "line": 332
          },
          {
            "name": "_cache_results",
            "line": 340
          },
          {
            "name": "_update_search_context",
            "line": 347
          },
          {
            "name": "_update_metrics",
            "line": 352
          },
          {
            "name": "_get_error_rate",
            "line": 371
          }
        ],
        "line_count": 374
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration",
        "memory.search.test_integration",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "HybridMemorySearchEngine": {
            "tested": true,
            "methods_tested": 3,
            "total_methods": 17,
            "method_coverage": {
              "__init__": false,
              "search": true,
              "warm_cache": false,
              "get_metrics": true,
              "health_check": true,
              "_validate_query": false,
              "_preprocess_query": false,
              "_retrieve_candidates": false,
              "_score_candidates": false,
              "_enhance_with_cxd": false,
              "_process_results": false,
              "_generate_cache_key": false,
              "_try_get_cached_results": false,
              "_cache_results": false,
              "_update_search_context": false,
              "_update_metrics": false,
              "_get_error_rate": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "search": true,
          "warm_cache": true,
          "get_metrics": true,
          "health_check": true,
          "_validate_query": false,
          "_preprocess_query": false,
          "_retrieve_candidates": true,
          "_score_candidates": false,
          "_enhance_with_cxd": false,
          "_process_results": false,
          "_generate_cache_key": false,
          "_try_get_cached_results": false,
          "_cache_results": false,
          "_update_search_context": false,
          "_update_metrics": false,
          "_get_error_rate": false
        },
        "overall": 0.3888888888888889
      },
      "gaps": [
        "Class HybridMemorySearchEngine methods not tested: ['__init__', 'warm_cache', '_validate_query', '_preprocess_query', '_retrieve_candidates', '_score_candidates', '_enhance_with_cxd', '_process_results', '_generate_cache_key', '_try_get_cached_results', '_cache_results', '_update_search_context', '_update_metrics', '_get_error_rate']",
        "Function _validate_query not tested",
        "Function _preprocess_query not tested",
        "Function _score_candidates not tested",
        "Function _enhance_with_cxd not tested",
        "Function _process_results not tested",
        "Function _generate_cache_key not tested",
        "Function _try_get_cached_results not tested",
        "Function _cache_results not tested",
        "Function _update_search_context not tested",
        "Function _update_metrics not tested",
        "Function _get_error_rate not tested"
      ]
    },
    "memmimic.memory.search.mcp_handlers": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/mcp_handlers.py",
        "classes": [
          {
            "name": "MemoryRecallMCPHandler",
            "methods": [
              "__init__",
              "handle_request",
              "_validate_recall_request",
              "_extract_search_query",
              "_update_success_metrics",
              "_update_error_metrics",
              "get_handler_metrics",
              "health_check"
            ],
            "line": 24
          },
          {
            "name": "MemoryRecallCXDHandler",
            "methods": [
              "__init__",
              "handle_request",
              "_validate_cxd_request",
              "_extract_cxd_search_query",
              "_filter_by_cxd_function",
              "get_cxd_metrics"
            ],
            "line": 257
          }
        ],
        "functions": [
          {
            "name": "create_memory_recall_handler",
            "line": 405
          },
          {
            "name": "__init__",
            "line": 32
          },
          {
            "name": "handle_request",
            "line": 56
          },
          {
            "name": "_validate_recall_request",
            "line": 106
          },
          {
            "name": "_extract_search_query",
            "line": 144
          },
          {
            "name": "_update_success_metrics",
            "line": 177
          },
          {
            "name": "_update_error_metrics",
            "line": 194
          },
          {
            "name": "get_handler_metrics",
            "line": 203
          },
          {
            "name": "health_check",
            "line": 222
          },
          {
            "name": "__init__",
            "line": 265
          },
          {
            "name": "handle_request",
            "line": 286
          },
          {
            "name": "_validate_cxd_request",
            "line": 338
          },
          {
            "name": "_extract_cxd_search_query",
            "line": 351
          },
          {
            "name": "_filter_by_cxd_function",
            "line": 377
          },
          {
            "name": "get_cxd_metrics",
            "line": 396
          }
        ],
        "line_count": 422
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_mcp_handlers",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "MemoryRecallMCPHandler": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": false,
              "handle_request": false,
              "_validate_recall_request": false,
              "_extract_search_query": false,
              "_update_success_metrics": false,
              "_update_error_metrics": false,
              "get_handler_metrics": false,
              "health_check": true
            }
          },
          "MemoryRecallCXDHandler": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 6,
            "method_coverage": {
              "__init__": false,
              "handle_request": false,
              "_validate_cxd_request": false,
              "_extract_cxd_search_query": false,
              "_filter_by_cxd_function": false,
              "get_cxd_metrics": false
            }
          }
        },
        "functions": {
          "create_memory_recall_handler": true,
          "__init__": true,
          "handle_request": true,
          "_validate_recall_request": false,
          "_extract_search_query": false,
          "_update_success_metrics": false,
          "_update_error_metrics": false,
          "get_handler_metrics": true,
          "health_check": true,
          "_validate_cxd_request": false,
          "_extract_cxd_search_query": false,
          "_filter_by_cxd_function": false,
          "get_cxd_metrics": true
        },
        "overall": 0.47058823529411764
      },
      "gaps": [
        "Class MemoryRecallMCPHandler methods not tested: ['__init__', 'handle_request', '_validate_recall_request', '_extract_search_query', '_update_success_metrics', '_update_error_metrics', 'get_handler_metrics']",
        "Class MemoryRecallCXDHandler methods not tested: ['__init__', 'handle_request', '_validate_cxd_request', '_extract_cxd_search_query', '_filter_by_cxd_function', 'get_cxd_metrics']",
        "Function _validate_recall_request not tested",
        "Function _extract_search_query not tested",
        "Function _update_success_metrics not tested",
        "Function _update_error_metrics not tested",
        "Function _validate_cxd_request not tested",
        "Function _extract_cxd_search_query not tested",
        "Function _filter_by_cxd_function not tested"
      ]
    },
    "memmimic.memory.search.semantic_processor": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/semantic_processor.py",
        "classes": [
          {
            "name": "SemanticProcessor",
            "methods": [
              "__init__",
              "search",
              "_get_query_embedding",
              "_create_simple_embedding",
              "_find_similar_memories",
              "_get_memory_embedding",
              "_calculate_similarity",
              "_format_semantic_result",
              "_fallback_keyword_search",
              "clear_cache",
              "get_cache_stats"
            ],
            "line": 20
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 28
          },
          {
            "name": "search",
            "line": 38
          },
          {
            "name": "_get_query_embedding",
            "line": 86
          },
          {
            "name": "_create_simple_embedding",
            "line": 111
          },
          {
            "name": "_find_similar_memories",
            "line": 142
          },
          {
            "name": "_get_memory_embedding",
            "line": 184
          },
          {
            "name": "_calculate_similarity",
            "line": 206
          },
          {
            "name": "_format_semantic_result",
            "line": 246
          },
          {
            "name": "_fallback_keyword_search",
            "line": 280
          },
          {
            "name": "clear_cache",
            "line": 305
          },
          {
            "name": "get_cache_stats",
            "line": 310
          }
        ],
        "line_count": 317
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "SemanticProcessor": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 11,
            "method_coverage": {
              "__init__": false,
              "search": true,
              "_get_query_embedding": false,
              "_create_simple_embedding": false,
              "_find_similar_memories": false,
              "_get_memory_embedding": false,
              "_calculate_similarity": false,
              "_format_semantic_result": false,
              "_fallback_keyword_search": false,
              "clear_cache": false,
              "get_cache_stats": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "search": true,
          "_get_query_embedding": false,
          "_create_simple_embedding": false,
          "_find_similar_memories": false,
          "_get_memory_embedding": false,
          "_calculate_similarity": false,
          "_format_semantic_result": false,
          "_fallback_keyword_search": false,
          "clear_cache": false,
          "get_cache_stats": false
        },
        "overall": 0.25
      },
      "gaps": [
        "Class SemanticProcessor methods not tested: ['__init__', '_get_query_embedding', '_create_simple_embedding', '_find_similar_memories', '_get_memory_embedding', '_calculate_similarity', '_format_semantic_result', '_fallback_keyword_search', 'clear_cache', 'get_cache_stats']",
        "Function _get_query_embedding not tested",
        "Function _create_simple_embedding not tested",
        "Function _find_similar_memories not tested",
        "Function _get_memory_embedding not tested",
        "Function _calculate_similarity not tested",
        "Function _format_semantic_result not tested",
        "Function _fallback_keyword_search not tested",
        "Function clear_cache not tested",
        "Function get_cache_stats not tested"
      ]
    },
    "memmimic.memory.search.vector_similarity": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/vector_similarity.py",
        "classes": [
          {
            "name": "OptimizedVectorSimilarity",
            "methods": [
              "__init__",
              "calculate_similarity",
              "batch_calculate_similarity",
              "_cosine_similarity",
              "_euclidean_distance",
              "_dot_product_similarity",
              "_batch_cosine_similarity",
              "_batch_euclidean_distance",
              "_batch_dot_product_similarity",
              "_validate_embeddings",
              "_validate_single_embedding",
              "_generate_cache_key",
              "_get_cached_similarity",
              "_cache_similarity",
              "_update_metrics",
              "get_metrics",
              "reset_metrics",
              "change_similarity_metric"
            ],
            "line": 21
          }
        ],
        "functions": [
          {
            "name": "create_similarity_calculator",
            "line": 381
          },
          {
            "name": "__init__",
            "line": 30
          },
          {
            "name": "calculate_similarity",
            "line": 70
          },
          {
            "name": "batch_calculate_similarity",
            "line": 127
          },
          {
            "name": "_cosine_similarity",
            "line": 188
          },
          {
            "name": "_euclidean_distance",
            "line": 204
          },
          {
            "name": "_dot_product_similarity",
            "line": 213
          },
          {
            "name": "_batch_cosine_similarity",
            "line": 227
          },
          {
            "name": "_batch_euclidean_distance",
            "line": 248
          },
          {
            "name": "_batch_dot_product_similarity",
            "line": 260
          },
          {
            "name": "_validate_embeddings",
            "line": 276
          },
          {
            "name": "_validate_single_embedding",
            "line": 295
          },
          {
            "name": "_generate_cache_key",
            "line": 303
          },
          {
            "name": "_get_cached_similarity",
            "line": 317
          },
          {
            "name": "_cache_similarity",
            "line": 321
          },
          {
            "name": "_update_metrics",
            "line": 330
          },
          {
            "name": "get_metrics",
            "line": 340
          },
          {
            "name": "reset_metrics",
            "line": 360
          },
          {
            "name": "change_similarity_metric",
            "line": 365
          }
        ],
        "line_count": 393
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration",
        "memory.search.test_integration",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "OptimizedVectorSimilarity": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 18,
            "method_coverage": {
              "__init__": false,
              "calculate_similarity": false,
              "batch_calculate_similarity": false,
              "_cosine_similarity": false,
              "_euclidean_distance": false,
              "_dot_product_similarity": false,
              "_batch_cosine_similarity": false,
              "_batch_euclidean_distance": false,
              "_batch_dot_product_similarity": false,
              "_validate_embeddings": false,
              "_validate_single_embedding": false,
              "_generate_cache_key": false,
              "_get_cached_similarity": false,
              "_cache_similarity": false,
              "_update_metrics": false,
              "get_metrics": true,
              "reset_metrics": false,
              "change_similarity_metric": false
            }
          }
        },
        "functions": {
          "create_similarity_calculator": true,
          "__init__": true,
          "calculate_similarity": true,
          "batch_calculate_similarity": true,
          "_cosine_similarity": false,
          "_euclidean_distance": false,
          "_dot_product_similarity": false,
          "_batch_cosine_similarity": false,
          "_batch_euclidean_distance": false,
          "_batch_dot_product_similarity": false,
          "_validate_embeddings": false,
          "_validate_single_embedding": false,
          "_generate_cache_key": false,
          "_get_cached_similarity": false,
          "_cache_similarity": false,
          "_update_metrics": false,
          "get_metrics": true,
          "reset_metrics": false,
          "change_similarity_metric": false
        },
        "overall": 0.3
      },
      "gaps": [
        "Class OptimizedVectorSimilarity methods not tested: ['__init__', 'calculate_similarity', 'batch_calculate_similarity', '_cosine_similarity', '_euclidean_distance', '_dot_product_similarity', '_batch_cosine_similarity', '_batch_euclidean_distance', '_batch_dot_product_similarity', '_validate_embeddings', '_validate_single_embedding', '_generate_cache_key', '_get_cached_similarity', '_cache_similarity', '_update_metrics', 'reset_metrics', 'change_similarity_metric']",
        "Function _cosine_similarity not tested",
        "Function _euclidean_distance not tested",
        "Function _dot_product_similarity not tested",
        "Function _batch_cosine_similarity not tested",
        "Function _batch_euclidean_distance not tested",
        "Function _batch_dot_product_similarity not tested",
        "Function _validate_embeddings not tested",
        "Function _validate_single_embedding not tested",
        "Function _generate_cache_key not tested",
        "Function _get_cached_similarity not tested",
        "Function _cache_similarity not tested",
        "Function _update_metrics not tested",
        "Function reset_metrics not tested",
        "Function change_similarity_metric not tested"
      ]
    },
    "memmimic.memory.search.interfaces": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/interfaces.py",
        "classes": [
          {
            "name": "SearchType",
            "methods": [],
            "line": 15
          },
          {
            "name": "SimilarityMetric",
            "methods": [],
            "line": 22
          },
          {
            "name": "SearchQuery",
            "methods": [],
            "line": 30
          },
          {
            "name": "SearchContext",
            "methods": [],
            "line": 42
          },
          {
            "name": "CXDClassification",
            "methods": [],
            "line": 52
          },
          {
            "name": "SearchResult",
            "methods": [],
            "line": 60
          },
          {
            "name": "SearchResults",
            "methods": [],
            "line": 71
          },
          {
            "name": "SearchMetrics",
            "methods": [],
            "line": 81
          },
          {
            "name": "SearchEngine",
            "methods": [
              "search",
              "warm_cache",
              "get_metrics",
              "health_check"
            ],
            "line": 90
          },
          {
            "name": "SimilarityCalculator",
            "methods": [
              "calculate_similarity",
              "batch_calculate_similarity"
            ],
            "line": 114
          },
          {
            "name": "CXDIntegrationBridge",
            "methods": [
              "enhance_results",
              "classify_content"
            ],
            "line": 130
          },
          {
            "name": "PerformanceCache",
            "methods": [
              "get",
              "set",
              "invalidate",
              "get_stats"
            ],
            "line": 145
          },
          {
            "name": "ResultProcessor",
            "methods": [
              "rank_results",
              "filter_results"
            ],
            "line": 169
          },
          {
            "name": "SearchConfig",
            "methods": [
              "get_similarity_metric",
              "get_cache_ttl",
              "get_max_results"
            ],
            "line": 185
          },
          {
            "name": "SearchError",
            "methods": [
              "__init__"
            ],
            "line": 205
          },
          {
            "name": "SearchEngineError",
            "methods": [],
            "line": 217
          },
          {
            "name": "SimilarityCalculationError",
            "methods": [],
            "line": 222
          },
          {
            "name": "CXDIntegrationError",
            "methods": [],
            "line": 227
          },
          {
            "name": "CacheError",
            "methods": [],
            "line": 232
          },
          {
            "name": "ConfigurationError",
            "methods": [],
            "line": 237
          }
        ],
        "functions": [
          {
            "name": "search",
            "line": 94
          },
          {
            "name": "warm_cache",
            "line": 99
          },
          {
            "name": "get_metrics",
            "line": 104
          },
          {
            "name": "health_check",
            "line": 109
          },
          {
            "name": "calculate_similarity",
            "line": 118
          },
          {
            "name": "batch_calculate_similarity",
            "line": 124
          },
          {
            "name": "enhance_results",
            "line": 134
          },
          {
            "name": "classify_content",
            "line": 140
          },
          {
            "name": "get",
            "line": 149
          },
          {
            "name": "set",
            "line": 154
          },
          {
            "name": "invalidate",
            "line": 159
          },
          {
            "name": "get_stats",
            "line": 164
          },
          {
            "name": "rank_results",
            "line": 173
          },
          {
            "name": "filter_results",
            "line": 179
          },
          {
            "name": "get_similarity_metric",
            "line": 189
          },
          {
            "name": "get_cache_ttl",
            "line": 194
          },
          {
            "name": "get_max_results",
            "line": 199
          },
          {
            "name": "__init__",
            "line": 208
          }
        ],
        "line_count": 239
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_search_integration",
        "memory.search.test_mcp_handlers",
        "memory.search.test_integration",
        "memory.search.test_complete_integration",
        "memory.search.test_interfaces"
      ],
      "test_coverage": {
        "classes": {
          "SearchType": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SimilarityMetric": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SearchQuery": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SearchContext": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CXDClassification": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SearchResult": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SearchResults": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SearchMetrics": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SearchEngine": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 4,
            "method_coverage": {
              "search": true,
              "warm_cache": false,
              "get_metrics": false,
              "health_check": false
            }
          },
          "SimilarityCalculator": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 2,
            "method_coverage": {
              "calculate_similarity": false,
              "batch_calculate_similarity": false
            }
          },
          "CXDIntegrationBridge": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 2,
            "method_coverage": {
              "enhance_results": false,
              "classify_content": false
            }
          },
          "PerformanceCache": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 4,
            "method_coverage": {
              "get": false,
              "set": false,
              "invalidate": false,
              "get_stats": false
            }
          },
          "ResultProcessor": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 2,
            "method_coverage": {
              "rank_results": false,
              "filter_results": false
            }
          },
          "SearchConfig": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 3,
            "method_coverage": {
              "get_similarity_metric": false,
              "get_cache_ttl": false,
              "get_max_results": false
            }
          },
          "SearchError": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "__init__": false
            }
          },
          "SearchEngineError": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "SimilarityCalculationError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CXDIntegrationError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CacheError": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ConfigurationError": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          }
        },
        "functions": {
          "search": true,
          "warm_cache": true,
          "get_metrics": true,
          "health_check": true,
          "calculate_similarity": true,
          "batch_calculate_similarity": true,
          "enhance_results": true,
          "classify_content": true,
          "get": true,
          "set": true,
          "invalidate": false,
          "get_stats": true,
          "rank_results": true,
          "filter_results": true,
          "get_similarity_metric": false,
          "get_cache_ttl": false,
          "get_max_results": false,
          "__init__": true
        },
        "overall": 0.7894736842105263
      },
      "gaps": [
        "Class SearchEngine methods not tested: ['warm_cache', 'get_metrics', 'health_check']",
        "Class SimilarityCalculator not tested",
        "Class CXDIntegrationBridge methods not tested: ['enhance_results', 'classify_content']",
        "Class PerformanceCache methods not tested: ['get', 'set', 'invalidate', 'get_stats']",
        "Class ResultProcessor methods not tested: ['rank_results', 'filter_results']",
        "Class SearchConfig methods not tested: ['get_similarity_metric', 'get_cache_ttl', 'get_max_results']",
        "Class SearchError methods not tested: ['__init__']",
        "Class SimilarityCalculationError not tested",
        "Class CXDIntegrationError not tested",
        "Class CacheError not tested",
        "Function invalidate not tested",
        "Function get_similarity_metric not tested",
        "Function get_cache_ttl not tested",
        "Function get_max_results not tested"
      ]
    },
    "memmimic.memory.search.mcp_base": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/mcp_base.py",
        "classes": [
          {
            "name": "MCPRequest",
            "methods": [
              "get_parameter",
              "has_parameter",
              "validate_parameter_type"
            ],
            "line": 19
          },
          {
            "name": "MCPResponse",
            "methods": [
              "__post_init__",
              "to_dict"
            ],
            "line": 48
          },
          {
            "name": "MCPError",
            "methods": [
              "__init__",
              "to_dict"
            ],
            "line": 86
          },
          {
            "name": "MCPBaseHandler",
            "methods": [
              "__init__",
              "handle_request",
              "process_request",
              "_validate_request",
              "_format_error",
              "_update_processing_time_metrics",
              "get_base_metrics",
              "health_check"
            ],
            "line": 113
          },
          {
            "name": "MCPHandlerRegistry",
            "methods": [
              "__init__",
              "register_handler",
              "get_handler",
              "route_request",
              "get_registry_status"
            ],
            "line": 305
          }
        ],
        "functions": [
          {
            "name": "create_mcp_request",
            "line": 415
          },
          {
            "name": "create_success_response",
            "line": 438
          },
          {
            "name": "create_error_response",
            "line": 459
          },
          {
            "name": "get_parameter",
            "line": 32
          },
          {
            "name": "has_parameter",
            "line": 36
          },
          {
            "name": "validate_parameter_type",
            "line": 40
          },
          {
            "name": "__post_init__",
            "line": 62
          },
          {
            "name": "to_dict",
            "line": 66
          },
          {
            "name": "__init__",
            "line": 94
          },
          {
            "name": "to_dict",
            "line": 103
          },
          {
            "name": "__init__",
            "line": 121
          },
          {
            "name": "handle_request",
            "line": 144
          },
          {
            "name": "process_request",
            "line": 156
          },
          {
            "name": "_validate_request",
            "line": 205
          },
          {
            "name": "_format_error",
            "line": 216
          },
          {
            "name": "_update_processing_time_metrics",
            "line": 228
          },
          {
            "name": "get_base_metrics",
            "line": 238
          },
          {
            "name": "health_check",
            "line": 264
          },
          {
            "name": "__init__",
            "line": 313
          },
          {
            "name": "register_handler",
            "line": 320
          },
          {
            "name": "get_handler",
            "line": 334
          },
          {
            "name": "route_request",
            "line": 349
          },
          {
            "name": "get_registry_status",
            "line": 382
          }
        ],
        "line_count": 490
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_mcp_handlers",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "MCPRequest": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 3,
            "method_coverage": {
              "get_parameter": false,
              "has_parameter": false,
              "validate_parameter_type": false
            }
          },
          "MCPResponse": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 2,
            "method_coverage": {
              "__post_init__": false,
              "to_dict": false
            }
          },
          "MCPError": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 2,
            "method_coverage": {
              "__init__": false,
              "to_dict": false
            }
          },
          "MCPBaseHandler": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 8,
            "method_coverage": {
              "__init__": false,
              "handle_request": false,
              "process_request": false,
              "_validate_request": false,
              "_format_error": false,
              "_update_processing_time_metrics": false,
              "get_base_metrics": false,
              "health_check": true
            }
          },
          "MCPHandlerRegistry": {
            "tested": true,
            "methods_tested": 3,
            "total_methods": 5,
            "method_coverage": {
              "__init__": false,
              "register_handler": false,
              "get_handler": true,
              "route_request": true,
              "get_registry_status": true
            }
          }
        },
        "functions": {
          "create_mcp_request": true,
          "create_success_response": true,
          "create_error_response": true,
          "get_parameter": true,
          "has_parameter": true,
          "validate_parameter_type": false,
          "__post_init__": false,
          "to_dict": true,
          "__init__": true,
          "handle_request": true,
          "process_request": false,
          "_validate_request": false,
          "_format_error": false,
          "_update_processing_time_metrics": false,
          "get_base_metrics": false,
          "health_check": true,
          "register_handler": true,
          "get_handler": true,
          "route_request": true,
          "get_registry_status": true
        },
        "overall": 0.6428571428571429
      },
      "gaps": [
        "Class MCPRequest methods not tested: ['get_parameter', 'has_parameter', 'validate_parameter_type']",
        "Class MCPResponse methods not tested: ['__post_init__', 'to_dict']",
        "Class MCPError methods not tested: ['__init__', 'to_dict']",
        "Class MCPBaseHandler methods not tested: ['__init__', 'handle_request', 'process_request', '_validate_request', '_format_error', '_update_processing_time_metrics', 'get_base_metrics']",
        "Class MCPHandlerRegistry methods not tested: ['__init__', 'register_handler']",
        "Function validate_parameter_type not tested",
        "Function __post_init__ not tested",
        "Function process_request not tested",
        "Function _validate_request not tested",
        "Function _format_error not tested",
        "Function _update_processing_time_metrics not tested",
        "Function get_base_metrics not tested"
      ]
    },
    "memmimic.memory.search.result_combiner": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/memory/search/result_combiner.py",
        "classes": [
          {
            "name": "ResultCombiner",
            "methods": [
              "__init__",
              "combine_and_score",
              "_group_results_by_content",
              "_get_content_hash",
              "_weighted_sum_strategy",
              "_max_score_strategy",
              "_harmonic_mean_strategy",
              "_geometric_mean_strategy",
              "_determine_search_method",
              "get_combination_statistics"
            ],
            "line": 18
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 26
          },
          {
            "name": "combine_and_score",
            "line": 35
          },
          {
            "name": "_group_results_by_content",
            "line": 100
          },
          {
            "name": "_get_content_hash",
            "line": 139
          },
          {
            "name": "_weighted_sum_strategy",
            "line": 149
          },
          {
            "name": "_max_score_strategy",
            "line": 199
          },
          {
            "name": "_harmonic_mean_strategy",
            "line": 249
          },
          {
            "name": "_geometric_mean_strategy",
            "line": 297
          },
          {
            "name": "_determine_search_method",
            "line": 345
          },
          {
            "name": "get_combination_statistics",
            "line": 360
          }
        ],
        "line_count": 402
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization",
        "memory.search.test_complete_integration"
      ],
      "test_coverage": {
        "classes": {
          "ResultCombiner": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 10,
            "method_coverage": {
              "__init__": false,
              "combine_and_score": false,
              "_group_results_by_content": false,
              "_get_content_hash": false,
              "_weighted_sum_strategy": false,
              "_max_score_strategy": false,
              "_harmonic_mean_strategy": false,
              "_geometric_mean_strategy": false,
              "_determine_search_method": false,
              "get_combination_statistics": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "combine_and_score": false,
          "_group_results_by_content": false,
          "_get_content_hash": false,
          "_weighted_sum_strategy": false,
          "_max_score_strategy": false,
          "_harmonic_mean_strategy": false,
          "_geometric_mean_strategy": false,
          "_determine_search_method": false,
          "get_combination_statistics": false
        },
        "overall": 0.18181818181818182
      },
      "gaps": [
        "Class ResultCombiner methods not tested: ['__init__', 'combine_and_score', '_group_results_by_content', '_get_content_hash', '_weighted_sum_strategy', '_max_score_strategy', '_harmonic_mean_strategy', '_geometric_mean_strategy', '_determine_search_method', 'get_combination_statistics']",
        "Function combine_and_score not tested",
        "Function _group_results_by_content not tested",
        "Function _get_content_hash not tested",
        "Function _weighted_sum_strategy not tested",
        "Function _max_score_strategy not tested",
        "Function _harmonic_mean_strategy not tested",
        "Function _geometric_mean_strategy not tested",
        "Function _determine_search_method not tested",
        "Function get_combination_statistics not tested"
      ]
    },
    "memmimic.cxd.providers.vector_store": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/providers/vector_store.py",
        "classes": [
          {
            "name": "FAISSVectorStore",
            "methods": [
              "__init__",
              "dimension",
              "_create_faiss_index",
              "add",
              "search",
              "get_metadata",
              "save",
              "load",
              "size",
              "clear",
              "get_stats"
            ],
            "line": 24
          },
          {
            "name": "NumpyVectorStore",
            "methods": [
              "__init__",
              "dimension",
              "add",
              "search",
              "_cosine_similarity",
              "get_metadata",
              "save",
              "load",
              "size",
              "clear",
              "get_stats"
            ],
            "line": 300
          }
        ],
        "functions": [
          {
            "name": "create_vector_store",
            "line": 525
          },
          {
            "name": "create_faiss_store",
            "line": 558
          },
          {
            "name": "create_numpy_store",
            "line": 565
          },
          {
            "name": "__init__",
            "line": 31
          },
          {
            "name": "dimension",
            "line": 61
          },
          {
            "name": "_create_faiss_index",
            "line": 65
          },
          {
            "name": "add",
            "line": 120
          },
          {
            "name": "search",
            "line": 155
          },
          {
            "name": "get_metadata",
            "line": 192
          },
          {
            "name": "save",
            "line": 199
          },
          {
            "name": "load",
            "line": 224
          },
          {
            "name": "size",
            "line": 270
          },
          {
            "name": "clear",
            "line": 273
          },
          {
            "name": "get_stats",
            "line": 282
          },
          {
            "name": "__init__",
            "line": 307
          },
          {
            "name": "dimension",
            "line": 327
          },
          {
            "name": "add",
            "line": 331
          },
          {
            "name": "search",
            "line": 353
          },
          {
            "name": "_cosine_similarity",
            "line": 398
          },
          {
            "name": "get_metadata",
            "line": 421
          },
          {
            "name": "save",
            "line": 428
          },
          {
            "name": "load",
            "line": 452
          },
          {
            "name": "size",
            "line": 494
          },
          {
            "name": "clear",
            "line": 497
          },
          {
            "name": "get_stats",
            "line": 503
          }
        ],
        "line_count": 580
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "test_cxd_integration",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "FAISSVectorStore": {
            "tested": false,
            "methods_tested": 6,
            "total_methods": 11,
            "method_coverage": {
              "__init__": true,
              "dimension": false,
              "_create_faiss_index": false,
              "add": true,
              "search": true,
              "get_metadata": false,
              "save": false,
              "load": true,
              "size": true,
              "clear": false,
              "get_stats": true
            }
          },
          "NumpyVectorStore": {
            "tested": false,
            "methods_tested": 6,
            "total_methods": 11,
            "method_coverage": {
              "__init__": true,
              "dimension": false,
              "add": true,
              "search": true,
              "_cosine_similarity": false,
              "get_metadata": false,
              "save": false,
              "load": true,
              "size": true,
              "clear": false,
              "get_stats": true
            }
          }
        },
        "functions": {
          "create_vector_store": false,
          "create_faiss_store": false,
          "create_numpy_store": false,
          "__init__": true,
          "dimension": false,
          "_create_faiss_index": false,
          "add": true,
          "search": true,
          "get_metadata": false,
          "save": true,
          "load": true,
          "size": true,
          "clear": true,
          "get_stats": true,
          "_cosine_similarity": false
        },
        "overall": 0.2962962962962963
      },
      "gaps": [
        "Class FAISSVectorStore not tested",
        "Class NumpyVectorStore not tested",
        "Function create_vector_store not tested",
        "Function create_faiss_store not tested",
        "Function create_numpy_store not tested",
        "Function dimension not tested",
        "Function _create_faiss_index not tested",
        "Function get_metadata not tested",
        "Function _cosine_similarity not tested"
      ]
    },
    "memmimic.cxd.providers.embedding_models": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/providers/embedding_models.py",
        "classes": [
          {
            "name": "SentenceTransformerModel",
            "methods": [
              "__init__",
              "_validate_device",
              "model_name",
              "dimension",
              "max_sequence_length",
              "encode",
              "encode_batch",
              "_get_cache_key",
              "_cache_embedding",
              "enable_cache",
              "disable_cache",
              "clear_cache",
              "get_stats"
            ],
            "line": 33
          },
          {
            "name": "MockEmbeddingModel",
            "methods": [
              "__init__",
              "dimension",
              "model_name",
              "max_sequence_length",
              "encode",
              "encode_batch",
              "_text_to_embedding",
              "get_stats"
            ],
            "line": 279
          },
          {
            "name": "CachedEmbeddingModel",
            "methods": [
              "__init__",
              "dimension",
              "model_name",
              "max_sequence_length",
              "encode",
              "encode_batch",
              "_get_cache_key",
              "_add_to_memory_cache",
              "_save_to_disk",
              "_load_from_disk",
              "clear_cache",
              "get_stats"
            ],
            "line": 394
          }
        ],
        "functions": [
          {
            "name": "create_embedding_model",
            "line": 647
          },
          {
            "name": "create_cached_model",
            "line": 717
          },
          {
            "name": "__init__",
            "line": 39
          },
          {
            "name": "_validate_device",
            "line": 97
          },
          {
            "name": "model_name",
            "line": 125
          },
          {
            "name": "dimension",
            "line": 130
          },
          {
            "name": "max_sequence_length",
            "line": 135
          },
          {
            "name": "encode",
            "line": 139
          },
          {
            "name": "encode_batch",
            "line": 175
          },
          {
            "name": "_get_cache_key",
            "line": 207
          },
          {
            "name": "_cache_embedding",
            "line": 212
          },
          {
            "name": "enable_cache",
            "line": 218
          },
          {
            "name": "disable_cache",
            "line": 225
          },
          {
            "name": "clear_cache",
            "line": 232
          },
          {
            "name": "get_stats",
            "line": 236
          },
          {
            "name": "__init__",
            "line": 285
          },
          {
            "name": "dimension",
            "line": 305
          },
          {
            "name": "model_name",
            "line": 310
          },
          {
            "name": "max_sequence_length",
            "line": 316
          },
          {
            "name": "encode",
            "line": 320
          },
          {
            "name": "encode_batch",
            "line": 329
          },
          {
            "name": "_text_to_embedding",
            "line": 343
          },
          {
            "name": "get_stats",
            "line": 368
          },
          {
            "name": "__init__",
            "line": 400
          },
          {
            "name": "dimension",
            "line": 436
          },
          {
            "name": "model_name",
            "line": 441
          },
          {
            "name": "max_sequence_length",
            "line": 446
          },
          {
            "name": "encode",
            "line": 450
          },
          {
            "name": "encode_batch",
            "line": 478
          },
          {
            "name": "_get_cache_key",
            "line": 522
          },
          {
            "name": "_add_to_memory_cache",
            "line": 527
          },
          {
            "name": "_save_to_disk",
            "line": 534
          },
          {
            "name": "_load_from_disk",
            "line": 545
          },
          {
            "name": "clear_cache",
            "line": 558
          },
          {
            "name": "get_stats",
            "line": 573
          }
        ],
        "line_count": 739
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SentenceTransformerModel": {
            "tested": false,
            "methods_tested": 2,
            "total_methods": 13,
            "method_coverage": {
              "__init__": true,
              "_validate_device": false,
              "model_name": false,
              "dimension": false,
              "max_sequence_length": false,
              "encode": false,
              "encode_batch": false,
              "_get_cache_key": false,
              "_cache_embedding": false,
              "enable_cache": false,
              "disable_cache": false,
              "clear_cache": false,
              "get_stats": true
            }
          },
          "MockEmbeddingModel": {
            "tested": false,
            "methods_tested": 2,
            "total_methods": 8,
            "method_coverage": {
              "__init__": true,
              "dimension": false,
              "model_name": false,
              "max_sequence_length": false,
              "encode": false,
              "encode_batch": false,
              "_text_to_embedding": false,
              "get_stats": true
            }
          },
          "CachedEmbeddingModel": {
            "tested": false,
            "methods_tested": 2,
            "total_methods": 12,
            "method_coverage": {
              "__init__": true,
              "dimension": false,
              "model_name": false,
              "max_sequence_length": false,
              "encode": false,
              "encode_batch": false,
              "_get_cache_key": false,
              "_add_to_memory_cache": false,
              "_save_to_disk": false,
              "_load_from_disk": false,
              "clear_cache": false,
              "get_stats": true
            }
          }
        },
        "functions": {
          "create_embedding_model": false,
          "create_cached_model": false,
          "__init__": true,
          "_validate_device": false,
          "model_name": false,
          "dimension": false,
          "max_sequence_length": false,
          "encode": false,
          "encode_batch": false,
          "_get_cache_key": false,
          "_cache_embedding": false,
          "enable_cache": false,
          "disable_cache": false,
          "clear_cache": false,
          "get_stats": true,
          "_text_to_embedding": false,
          "_add_to_memory_cache": false,
          "_save_to_disk": false,
          "_load_from_disk": false
        },
        "overall": 0.05263157894736842
      },
      "gaps": [
        "Class SentenceTransformerModel not tested",
        "Class MockEmbeddingModel not tested",
        "Class CachedEmbeddingModel not tested",
        "Function create_embedding_model not tested",
        "Function create_cached_model not tested",
        "Function _validate_device not tested",
        "Function model_name not tested",
        "Function dimension not tested",
        "Function max_sequence_length not tested",
        "Function encode not tested",
        "Function encode_batch not tested",
        "Function _get_cache_key not tested",
        "Function _cache_embedding not tested",
        "Function enable_cache not tested",
        "Function disable_cache not tested",
        "Function clear_cache not tested",
        "Function _text_to_embedding not tested",
        "Function _add_to_memory_cache not tested",
        "Function _save_to_disk not tested",
        "Function _load_from_disk not tested"
      ]
    },
    "memmimic.cxd.providers.examples": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/providers/examples.py",
        "classes": [
          {
            "name": "YamlExampleProvider",
            "methods": [
              "__init__",
              "_validate_file_exists",
              "load_examples",
              "_is_cache_valid",
              "_parse_yaml_structure",
              "_parse_single_example",
              "get_checksum",
              "reload_examples",
              "save_examples",
              "get_metadata"
            ],
            "line": 22
          },
          {
            "name": "JsonExampleProvider",
            "methods": [
              "__init__",
              "load_examples",
              "get_checksum"
            ],
            "line": 315
          },
          {
            "name": "InMemoryExampleProvider",
            "methods": [
              "__init__",
              "load_examples",
              "get_checksum",
              "_calculate_checksum",
              "add_example",
              "remove_example"
            ],
            "line": 363
          },
          {
            "name": "CompositeExampleProvider",
            "methods": [
              "__init__",
              "load_examples",
              "get_checksum"
            ],
            "line": 442
          }
        ],
        "functions": [
          {
            "name": "create_yaml_provider",
            "line": 500
          },
          {
            "name": "create_json_provider",
            "line": 514
          },
          {
            "name": "create_default_provider",
            "line": 528
          },
          {
            "name": "__init__",
            "line": 30
          },
          {
            "name": "_validate_file_exists",
            "line": 58
          },
          {
            "name": "load_examples",
            "line": 68
          },
          {
            "name": "_is_cache_valid",
            "line": 102
          },
          {
            "name": "_parse_yaml_structure",
            "line": 111
          },
          {
            "name": "_parse_single_example",
            "line": 177
          },
          {
            "name": "get_checksum",
            "line": 228
          },
          {
            "name": "reload_examples",
            "line": 245
          },
          {
            "name": "save_examples",
            "line": 260
          },
          {
            "name": "get_metadata",
            "line": 295
          },
          {
            "name": "__init__",
            "line": 322
          },
          {
            "name": "load_examples",
            "line": 336
          },
          {
            "name": "get_checksum",
            "line": 356
          },
          {
            "name": "__init__",
            "line": 370
          },
          {
            "name": "load_examples",
            "line": 385
          },
          {
            "name": "get_checksum",
            "line": 389
          },
          {
            "name": "_calculate_checksum",
            "line": 393
          },
          {
            "name": "add_example",
            "line": 402
          },
          {
            "name": "remove_example",
            "line": 416
          },
          {
            "name": "__init__",
            "line": 450
          },
          {
            "name": "load_examples",
            "line": 461
          },
          {
            "name": "get_checksum",
            "line": 488
          }
        ],
        "line_count": 571
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "YamlExampleProvider": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 10,
            "method_coverage": {
              "__init__": true,
              "_validate_file_exists": false,
              "load_examples": false,
              "_is_cache_valid": false,
              "_parse_yaml_structure": false,
              "_parse_single_example": false,
              "get_checksum": false,
              "reload_examples": false,
              "save_examples": false,
              "get_metadata": false
            }
          },
          "JsonExampleProvider": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 3,
            "method_coverage": {
              "__init__": true,
              "load_examples": false,
              "get_checksum": false
            }
          },
          "InMemoryExampleProvider": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 6,
            "method_coverage": {
              "__init__": true,
              "load_examples": false,
              "get_checksum": false,
              "_calculate_checksum": false,
              "add_example": false,
              "remove_example": false
            }
          },
          "CompositeExampleProvider": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 3,
            "method_coverage": {
              "__init__": true,
              "load_examples": false,
              "get_checksum": false
            }
          }
        },
        "functions": {
          "create_yaml_provider": false,
          "create_json_provider": false,
          "create_default_provider": false,
          "__init__": true,
          "_validate_file_exists": false,
          "load_examples": false,
          "_is_cache_valid": false,
          "_parse_yaml_structure": false,
          "_parse_single_example": false,
          "get_checksum": false,
          "reload_examples": false,
          "save_examples": false,
          "get_metadata": false,
          "_calculate_checksum": false,
          "add_example": false,
          "remove_example": false
        },
        "overall": 0.034482758620689655
      },
      "gaps": [
        "Class YamlExampleProvider not tested",
        "Class JsonExampleProvider not tested",
        "Class InMemoryExampleProvider not tested",
        "Class CompositeExampleProvider not tested",
        "Function create_yaml_provider not tested",
        "Function create_json_provider not tested",
        "Function create_default_provider not tested",
        "Function _validate_file_exists not tested",
        "Function load_examples not tested",
        "Function _is_cache_valid not tested",
        "Function _parse_yaml_structure not tested",
        "Function _parse_single_example not tested",
        "Function get_checksum not tested",
        "Function reload_examples not tested",
        "Function save_examples not tested",
        "Function get_metadata not tested",
        "Function _calculate_checksum not tested",
        "Function add_example not tested",
        "Function remove_example not tested"
      ]
    },
    "memmimic.cxd.core.config": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/core/config.py",
        "classes": [
          {
            "name": "LogLevel",
            "methods": [],
            "line": 25
          },
          {
            "name": "Device",
            "methods": [],
            "line": 35
          },
          {
            "name": "OutputFormat",
            "methods": [],
            "line": 43
          },
          {
            "name": "MetricType",
            "methods": [],
            "line": 52
          },
          {
            "name": "OptimizationMetric",
            "methods": [],
            "line": 60
          },
          {
            "name": "PathsConfig",
            "methods": [
              "ensure_directory_exists",
              "validate_examples_file"
            ],
            "line": 75
          },
          {
            "name": "EmbeddingConfig",
            "methods": [
              "validate_model_name"
            ],
            "line": 117
          },
          {
            "name": "MockModelConfig",
            "methods": [],
            "line": 145
          },
          {
            "name": "ModelsConfig",
            "methods": [],
            "line": 154
          },
          {
            "name": "ThresholdsConfig",
            "methods": [
              "validate_threshold_ordering"
            ],
            "line": 161
          },
          {
            "name": "SearchConfig",
            "methods": [],
            "line": 196
          },
          {
            "name": "FusionConfig",
            "methods": [
              "validate_weights_sum"
            ],
            "line": 206
          },
          {
            "name": "AlgorithmsConfig",
            "methods": [],
            "line": 234
          },
          {
            "name": "FeaturesConfig",
            "methods": [],
            "line": 242
          },
          {
            "name": "PerformanceConfig",
            "methods": [],
            "line": 266
          },
          {
            "name": "LoggingConfig",
            "methods": [],
            "line": 298
          },
          {
            "name": "ValidationConfig",
            "methods": [],
            "line": 320
          },
          {
            "name": "CLIConfig",
            "methods": [],
            "line": 348
          },
          {
            "name": "APIConfig",
            "methods": [],
            "line": 364
          },
          {
            "name": "ExperimentalConfig",
            "methods": [],
            "line": 383
          },
          {
            "name": "CXDConfig",
            "methods": [
              "load_from_yaml",
              "save_to_yaml",
              "load_from_env",
              "load_with_overrides",
              "get_cache_path",
              "get_log_path",
              "is_production_mode",
              "is_development_mode",
              "validate_runtime_requirements",
              "get_effective_device"
            ],
            "line": 413
          }
        ],
        "functions": [
          {
            "name": "create_default_config",
            "line": 670
          },
          {
            "name": "create_development_config",
            "line": 675
          },
          {
            "name": "create_production_config",
            "line": 685
          },
          {
            "name": "load_config_from_file",
            "line": 695
          },
          {
            "name": "ensure_directory_exists",
            "line": 92
          },
          {
            "name": "validate_examples_file",
            "line": 107
          },
          {
            "name": "validate_model_name",
            "line": 138
          },
          {
            "name": "validate_threshold_ordering",
            "line": 184
          },
          {
            "name": "validate_weights_sum",
            "line": 220
          },
          {
            "name": "load_from_yaml",
            "line": 455
          },
          {
            "name": "save_to_yaml",
            "line": 466
          },
          {
            "name": "load_from_env",
            "line": 510
          },
          {
            "name": "load_with_overrides",
            "line": 515
          },
          {
            "name": "get_cache_path",
            "line": 595
          },
          {
            "name": "get_log_path",
            "line": 599
          },
          {
            "name": "is_production_mode",
            "line": 603
          },
          {
            "name": "is_development_mode",
            "line": 607
          },
          {
            "name": "validate_runtime_requirements",
            "line": 611
          },
          {
            "name": "get_effective_device",
            "line": 642
          },
          {
            "name": "path_to_str_serializer",
            "line": 478
          },
          {
            "name": "convert_paths_in_dict",
            "line": 491
          }
        ],
        "line_count": 757
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "test_cxd_integration",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "LogLevel": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "Device": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "OutputFormat": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "MetricType": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "OptimizationMetric": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PathsConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 2,
            "method_coverage": {
              "ensure_directory_exists": false,
              "validate_examples_file": false
            }
          },
          "EmbeddingConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "validate_model_name": false
            }
          },
          "MockModelConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ModelsConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ThresholdsConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "validate_threshold_ordering": false
            }
          },
          "SearchConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "FusionConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 1,
            "method_coverage": {
              "validate_weights_sum": false
            }
          },
          "AlgorithmsConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "FeaturesConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "PerformanceConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "LoggingConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ValidationConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CLIConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "APIConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "ExperimentalConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 0,
            "method_coverage": {}
          },
          "CXDConfig": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 10,
            "method_coverage": {
              "load_from_yaml": false,
              "save_to_yaml": false,
              "load_from_env": false,
              "load_with_overrides": false,
              "get_cache_path": false,
              "get_log_path": false,
              "is_production_mode": false,
              "is_development_mode": false,
              "validate_runtime_requirements": false,
              "get_effective_device": false
            }
          }
        },
        "functions": {
          "create_default_config": false,
          "create_development_config": false,
          "create_production_config": false,
          "load_config_from_file": false,
          "ensure_directory_exists": false,
          "validate_examples_file": false,
          "validate_model_name": false,
          "validate_threshold_ordering": false,
          "validate_weights_sum": false,
          "load_from_yaml": false,
          "save_to_yaml": false,
          "load_from_env": false,
          "load_with_overrides": false,
          "get_cache_path": false,
          "get_log_path": false,
          "is_production_mode": false,
          "is_development_mode": false,
          "validate_runtime_requirements": false,
          "get_effective_device": false,
          "path_to_str_serializer": false,
          "convert_paths_in_dict": false
        },
        "overall": 0.0
      },
      "gaps": [
        "Class LogLevel not tested",
        "Class Device not tested",
        "Class OutputFormat not tested",
        "Class MetricType not tested",
        "Class OptimizationMetric not tested",
        "Class PathsConfig not tested",
        "Class EmbeddingConfig not tested",
        "Class MockModelConfig not tested",
        "Class ModelsConfig not tested",
        "Class ThresholdsConfig not tested",
        "Class SearchConfig not tested",
        "Class FusionConfig not tested",
        "Class AlgorithmsConfig not tested",
        "Class FeaturesConfig not tested",
        "Class PerformanceConfig not tested",
        "Class LoggingConfig not tested",
        "Class ValidationConfig not tested",
        "Class CLIConfig not tested",
        "Class APIConfig not tested",
        "Class ExperimentalConfig not tested",
        "Class CXDConfig not tested",
        "Function create_default_config not tested",
        "Function create_development_config not tested",
        "Function create_production_config not tested",
        "Function load_config_from_file not tested",
        "Function ensure_directory_exists not tested",
        "Function validate_examples_file not tested",
        "Function validate_model_name not tested",
        "Function validate_threshold_ordering not tested",
        "Function validate_weights_sum not tested",
        "Function load_from_yaml not tested",
        "Function save_to_yaml not tested",
        "Function load_from_env not tested",
        "Function load_with_overrides not tested",
        "Function get_cache_path not tested",
        "Function get_log_path not tested",
        "Function is_production_mode not tested",
        "Function is_development_mode not tested",
        "Function validate_runtime_requirements not tested",
        "Function get_effective_device not tested",
        "Function path_to_str_serializer not tested",
        "Function convert_paths_in_dict not tested"
      ]
    },
    "memmimic.cxd.core.types": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/core/types.py",
        "classes": [
          {
            "name": "CXDFunction",
            "methods": [
              "__str__",
              "description",
              "keywords",
              "from_string"
            ],
            "line": 32
          },
          {
            "name": "ExecutionState",
            "methods": [
              "__str__",
              "description",
              "numeric_value",
              "from_string",
              "from_confidence"
            ],
            "line": 130
          },
          {
            "name": "CXDTag",
            "methods": [
              "__post_init__",
              "__str__",
              "__repr__",
              "__eq__",
              "pattern",
              "strength",
              "is_successful",
              "is_failed",
              "is_uncertain",
              "add_evidence",
              "update_confidence",
              "to_dict",
              "from_dict",
              "from_string"
            ],
            "line": 238
          },
          {
            "name": "CXDSequence",
            "methods": [
              "__post_init__",
              "_deduplicate_functions",
              "__str__",
              "__repr__",
              "__len__",
              "__getitem__",
              "__iter__",
              "__eq__",
              "pattern",
              "execution_pattern",
              "dominant_function",
              "dominant_tag",
              "functions",
              "states",
              "average_confidence",
              "weighted_confidence",
              "strength_score",
              "is_successful",
              "has_failures",
              "success_rate",
              "get_function_tag",
              "has_function",
              "add_tag",
              "remove_function",
              "filter_by_confidence",
              "filter_by_state",
              "delta",
              "similarity",
              "to_dict",
              "from_dict",
              "from_string"
            ],
            "line": 444
          },
          {
            "name": "MetaClassificationResult",
            "methods": [
              "__post_init__",
              "concordance",
              "final_confidence",
              "dominant_function",
              "pattern",
              "execution_pattern",
              "has_corrections",
              "is_high_confidence",
              "is_concordant",
              "get_performance_summary",
              "get_detailed_analysis",
              "to_dict",
              "from_dict",
              "to_json",
              "from_json"
            ],
            "line": 793
          }
        ],
        "functions": [
          {
            "name": "create_simple_sequence",
            "line": 1019
          },
          {
            "name": "parse_cxd_pattern",
            "line": 1056
          },
          {
            "name": "calculate_sequence_hash",
            "line": 1074
          },
          {
            "name": "merge_sequences",
            "line": 1093
          },
          {
            "name": "__str__",
            "line": 46
          },
          {
            "name": "description",
            "line": 50
          },
          {
            "name": "keywords",
            "line": 60
          },
          {
            "name": "from_string",
            "line": 104
          },
          {
            "name": "__str__",
            "line": 146
          },
          {
            "name": "description",
            "line": 150
          },
          {
            "name": "numeric_value",
            "line": 161
          },
          {
            "name": "from_string",
            "line": 172
          },
          {
            "name": "from_confidence",
            "line": 212
          },
          {
            "name": "__post_init__",
            "line": 259
          },
          {
            "name": "__str__",
            "line": 273
          },
          {
            "name": "__repr__",
            "line": 277
          },
          {
            "name": "__eq__",
            "line": 284
          },
          {
            "name": "pattern",
            "line": 308
          },
          {
            "name": "strength",
            "line": 313
          },
          {
            "name": "is_successful",
            "line": 324
          },
          {
            "name": "is_failed",
            "line": 329
          },
          {
            "name": "is_uncertain",
            "line": 334
          },
          {
            "name": "add_evidence",
            "line": 338
          },
          {
            "name": "update_confidence",
            "line": 353
          },
          {
            "name": "to_dict",
            "line": 374
          },
          {
            "name": "from_dict",
            "line": 394
          },
          {
            "name": "from_string",
            "line": 415
          },
          {
            "name": "__post_init__",
            "line": 461
          },
          {
            "name": "_deduplicate_functions",
            "line": 473
          },
          {
            "name": "__str__",
            "line": 485
          },
          {
            "name": "__repr__",
            "line": 491
          },
          {
            "name": "__len__",
            "line": 495
          },
          {
            "name": "__getitem__",
            "line": 499
          },
          {
            "name": "__iter__",
            "line": 503
          },
          {
            "name": "__eq__",
            "line": 507
          },
          {
            "name": "pattern",
            "line": 522
          },
          {
            "name": "execution_pattern",
            "line": 527
          },
          {
            "name": "dominant_function",
            "line": 532
          },
          {
            "name": "dominant_tag",
            "line": 537
          },
          {
            "name": "functions",
            "line": 542
          },
          {
            "name": "states",
            "line": 547
          },
          {
            "name": "average_confidence",
            "line": 552
          },
          {
            "name": "weighted_confidence",
            "line": 559
          },
          {
            "name": "strength_score",
            "line": 575
          },
          {
            "name": "is_successful",
            "line": 582
          },
          {
            "name": "has_failures",
            "line": 587
          },
          {
            "name": "success_rate",
            "line": 592
          },
          {
            "name": "get_function_tag",
            "line": 599
          },
          {
            "name": "has_function",
            "line": 614
          },
          {
            "name": "add_tag",
            "line": 618
          },
          {
            "name": "remove_function",
            "line": 634
          },
          {
            "name": "filter_by_confidence",
            "line": 648
          },
          {
            "name": "filter_by_state",
            "line": 661
          },
          {
            "name": "delta",
            "line": 679
          },
          {
            "name": "similarity",
            "line": 716
          },
          {
            "name": "to_dict",
            "line": 728
          },
          {
            "name": "from_dict",
            "line": 751
          },
          {
            "name": "from_string",
            "line": 769
          },
          {
            "name": "__post_init__",
            "line": 812
          },
          {
            "name": "concordance",
            "line": 830
          },
          {
            "name": "final_confidence",
            "line": 835
          },
          {
            "name": "dominant_function",
            "line": 840
          },
          {
            "name": "pattern",
            "line": 845
          },
          {
            "name": "execution_pattern",
            "line": 850
          },
          {
            "name": "has_corrections",
            "line": 855
          },
          {
            "name": "is_high_confidence",
            "line": 860
          },
          {
            "name": "is_concordant",
            "line": 865
          },
          {
            "name": "get_performance_summary",
            "line": 869
          },
          {
            "name": "get_detailed_analysis",
            "line": 893
          },
          {
            "name": "to_dict",
            "line": 940
          },
          {
            "name": "from_dict",
            "line": 965
          },
          {
            "name": "to_json",
            "line": 987
          },
          {
            "name": "from_json",
            "line": 1000
          }
        ],
        "line_count": 1170
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "test_cxd_integration",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "CXDFunction": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 4,
            "method_coverage": {
              "__str__": false,
              "description": false,
              "keywords": false,
              "from_string": false
            }
          },
          "ExecutionState": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 5,
            "method_coverage": {
              "__str__": false,
              "description": false,
              "numeric_value": false,
              "from_string": false,
              "from_confidence": false
            }
          },
          "CXDTag": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 14,
            "method_coverage": {
              "__post_init__": false,
              "__str__": false,
              "__repr__": false,
              "__eq__": false,
              "pattern": true,
              "strength": false,
              "is_successful": false,
              "is_failed": false,
              "is_uncertain": false,
              "add_evidence": false,
              "update_confidence": false,
              "to_dict": false,
              "from_dict": false,
              "from_string": false
            }
          },
          "CXDSequence": {
            "tested": true,
            "methods_tested": 2,
            "total_methods": 31,
            "method_coverage": {
              "__post_init__": false,
              "_deduplicate_functions": false,
              "__str__": false,
              "__repr__": false,
              "__len__": false,
              "__getitem__": false,
              "__iter__": false,
              "__eq__": false,
              "pattern": true,
              "execution_pattern": false,
              "dominant_function": false,
              "dominant_tag": false,
              "functions": false,
              "states": false,
              "average_confidence": false,
              "weighted_confidence": false,
              "strength_score": false,
              "is_successful": false,
              "has_failures": false,
              "success_rate": true,
              "get_function_tag": false,
              "has_function": false,
              "add_tag": false,
              "remove_function": false,
              "filter_by_confidence": false,
              "filter_by_state": false,
              "delta": false,
              "similarity": false,
              "to_dict": false,
              "from_dict": false,
              "from_string": false
            }
          },
          "MetaClassificationResult": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 15,
            "method_coverage": {
              "__post_init__": false,
              "concordance": false,
              "final_confidence": false,
              "dominant_function": false,
              "pattern": true,
              "execution_pattern": false,
              "has_corrections": false,
              "is_high_confidence": false,
              "is_concordant": false,
              "get_performance_summary": false,
              "get_detailed_analysis": false,
              "to_dict": false,
              "from_dict": false,
              "to_json": false,
              "from_json": false
            }
          }
        },
        "functions": {
          "create_simple_sequence": false,
          "parse_cxd_pattern": false,
          "calculate_sequence_hash": false,
          "merge_sequences": false,
          "__str__": false,
          "description": false,
          "keywords": false,
          "from_string": false,
          "numeric_value": false,
          "from_confidence": false,
          "__post_init__": false,
          "__repr__": false,
          "__eq__": false,
          "pattern": true,
          "strength": false,
          "is_successful": false,
          "is_failed": false,
          "is_uncertain": false,
          "add_evidence": false,
          "update_confidence": false,
          "to_dict": false,
          "from_dict": false,
          "_deduplicate_functions": false,
          "__len__": true,
          "__getitem__": false,
          "__iter__": false,
          "execution_pattern": false,
          "dominant_function": false,
          "dominant_tag": false,
          "functions": true,
          "states": false,
          "average_confidence": false,
          "weighted_confidence": false,
          "strength_score": false,
          "has_failures": false,
          "success_rate": true,
          "get_function_tag": false,
          "has_function": false,
          "add_tag": false,
          "remove_function": false,
          "filter_by_confidence": false,
          "filter_by_state": false,
          "delta": false,
          "similarity": true,
          "concordance": false,
          "final_confidence": false,
          "has_corrections": false,
          "is_high_confidence": false,
          "is_concordant": false,
          "get_performance_summary": false,
          "get_detailed_analysis": false,
          "to_json": false,
          "from_json": false
        },
        "overall": 0.11538461538461539
      },
      "gaps": [
        "Class CXDFunction methods not tested: ['__str__', 'description', 'keywords', 'from_string']",
        "Class ExecutionState methods not tested: ['__str__', 'description', 'numeric_value', 'from_string', 'from_confidence']",
        "Class CXDTag methods not tested: ['__post_init__', '__str__', '__repr__', '__eq__', 'strength', 'is_successful', 'is_failed', 'is_uncertain', 'add_evidence', 'update_confidence', 'to_dict', 'from_dict', 'from_string']",
        "Class CXDSequence methods not tested: ['__post_init__', '_deduplicate_functions', '__str__', '__repr__', '__len__', '__getitem__', '__iter__', '__eq__', 'execution_pattern', 'dominant_function', 'dominant_tag', 'functions', 'states', 'average_confidence', 'weighted_confidence', 'strength_score', 'is_successful', 'has_failures', 'get_function_tag', 'has_function', 'add_tag', 'remove_function', 'filter_by_confidence', 'filter_by_state', 'delta', 'similarity', 'to_dict', 'from_dict', 'from_string']",
        "Class MetaClassificationResult not tested",
        "Function create_simple_sequence not tested",
        "Function parse_cxd_pattern not tested",
        "Function calculate_sequence_hash not tested",
        "Function merge_sequences not tested",
        "Function __str__ not tested",
        "Function description not tested",
        "Function keywords not tested",
        "Function from_string not tested",
        "Function numeric_value not tested",
        "Function from_confidence not tested",
        "Function __post_init__ not tested",
        "Function __repr__ not tested",
        "Function __eq__ not tested",
        "Function strength not tested",
        "Function is_successful not tested",
        "Function is_failed not tested",
        "Function is_uncertain not tested",
        "Function add_evidence not tested",
        "Function update_confidence not tested",
        "Function to_dict not tested",
        "Function from_dict not tested",
        "Function _deduplicate_functions not tested",
        "Function __getitem__ not tested",
        "Function __iter__ not tested",
        "Function execution_pattern not tested",
        "Function dominant_function not tested",
        "Function dominant_tag not tested",
        "Function states not tested",
        "Function average_confidence not tested",
        "Function weighted_confidence not tested",
        "Function strength_score not tested",
        "Function has_failures not tested",
        "Function get_function_tag not tested",
        "Function has_function not tested",
        "Function add_tag not tested",
        "Function remove_function not tested",
        "Function filter_by_confidence not tested",
        "Function filter_by_state not tested",
        "Function delta not tested",
        "Function concordance not tested",
        "Function final_confidence not tested",
        "Function has_corrections not tested",
        "Function is_high_confidence not tested",
        "Function is_concordant not tested",
        "Function get_performance_summary not tested",
        "Function get_detailed_analysis not tested",
        "Function to_json not tested",
        "Function from_json not tested"
      ]
    },
    "memmimic.cxd.core.canonical": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/core/canonical.py",
        "classes": [
          {
            "name": "CanonicalExample",
            "methods": [
              "__post_init__",
              "__str__",
              "__repr__",
              "word_count",
              "char_count",
              "is_high_quality",
              "generate_id",
              "_default_category_for_function",
              "add_tag",
              "remove_tag",
              "has_tag",
              "update_quality_score",
              "to_dict",
              "from_dict",
              "similarity_score"
            ],
            "line": 17
          },
          {
            "name": "CanonicalExampleSet",
            "methods": [
              "__post_init__",
              "__len__",
              "__iter__",
              "__getitem__",
              "function_counts",
              "category_counts",
              "average_quality",
              "high_quality_examples",
              "get_examples_by_function",
              "get_examples_by_category",
              "get_examples_by_tag",
              "filter_by_quality",
              "add_example",
              "remove_example",
              "find_by_id",
              "find_duplicates",
              "validate_set",
              "to_dict",
              "from_dict"
            ],
            "line": 242
          }
        ],
        "functions": [
          {
            "name": "__post_init__",
            "line": 35
          },
          {
            "name": "__str__",
            "line": 52
          },
          {
            "name": "__repr__",
            "line": 57
          },
          {
            "name": "word_count",
            "line": 65
          },
          {
            "name": "char_count",
            "line": 70
          },
          {
            "name": "is_high_quality",
            "line": 75
          },
          {
            "name": "generate_id",
            "line": 79
          },
          {
            "name": "_default_category_for_function",
            "line": 91
          },
          {
            "name": "add_tag",
            "line": 100
          },
          {
            "name": "remove_tag",
            "line": 110
          },
          {
            "name": "has_tag",
            "line": 125
          },
          {
            "name": "update_quality_score",
            "line": 129
          },
          {
            "name": "to_dict",
            "line": 151
          },
          {
            "name": "from_dict",
            "line": 173
          },
          {
            "name": "similarity_score",
            "line": 202
          },
          {
            "name": "__post_init__",
            "line": 256
          },
          {
            "name": "__len__",
            "line": 260
          },
          {
            "name": "__iter__",
            "line": 264
          },
          {
            "name": "__getitem__",
            "line": 268
          },
          {
            "name": "function_counts",
            "line": 273
          },
          {
            "name": "category_counts",
            "line": 281
          },
          {
            "name": "average_quality",
            "line": 289
          },
          {
            "name": "high_quality_examples",
            "line": 296
          },
          {
            "name": "get_examples_by_function",
            "line": 300
          },
          {
            "name": "get_examples_by_category",
            "line": 312
          },
          {
            "name": "get_examples_by_tag",
            "line": 324
          },
          {
            "name": "filter_by_quality",
            "line": 336
          },
          {
            "name": "add_example",
            "line": 356
          },
          {
            "name": "remove_example",
            "line": 366
          },
          {
            "name": "find_by_id",
            "line": 381
          },
          {
            "name": "find_duplicates",
            "line": 396
          },
          {
            "name": "validate_set",
            "line": 418
          },
          {
            "name": "to_dict",
            "line": 461
          },
          {
            "name": "from_dict",
            "line": 484
          }
        ],
        "line_count": 508
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "test_cxd_integration",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "CanonicalExample": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 15,
            "method_coverage": {
              "__post_init__": false,
              "__str__": false,
              "__repr__": false,
              "word_count": false,
              "char_count": false,
              "is_high_quality": false,
              "generate_id": false,
              "_default_category_for_function": false,
              "add_tag": false,
              "remove_tag": false,
              "has_tag": false,
              "update_quality_score": false,
              "to_dict": false,
              "from_dict": false,
              "similarity_score": false
            }
          },
          "CanonicalExampleSet": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 19,
            "method_coverage": {
              "__post_init__": false,
              "__len__": false,
              "__iter__": false,
              "__getitem__": false,
              "function_counts": false,
              "category_counts": false,
              "average_quality": false,
              "high_quality_examples": false,
              "get_examples_by_function": false,
              "get_examples_by_category": false,
              "get_examples_by_tag": false,
              "filter_by_quality": false,
              "add_example": false,
              "remove_example": false,
              "find_by_id": false,
              "find_duplicates": false,
              "validate_set": false,
              "to_dict": false,
              "from_dict": false
            }
          }
        },
        "functions": {
          "__post_init__": false,
          "__str__": false,
          "__repr__": false,
          "word_count": false,
          "char_count": false,
          "is_high_quality": false,
          "generate_id": false,
          "_default_category_for_function": false,
          "add_tag": false,
          "remove_tag": false,
          "has_tag": false,
          "update_quality_score": false,
          "to_dict": false,
          "from_dict": false,
          "similarity_score": false,
          "__len__": true,
          "__iter__": false,
          "__getitem__": false,
          "function_counts": false,
          "category_counts": false,
          "average_quality": false,
          "high_quality_examples": false,
          "get_examples_by_function": false,
          "get_examples_by_category": false,
          "get_examples_by_tag": false,
          "filter_by_quality": false,
          "add_example": false,
          "remove_example": false,
          "find_by_id": false,
          "find_duplicates": false,
          "validate_set": false
        },
        "overall": 0.027777777777777776
      },
      "gaps": [
        "Class CanonicalExample not tested",
        "Class CanonicalExampleSet not tested",
        "Function __post_init__ not tested",
        "Function __str__ not tested",
        "Function __repr__ not tested",
        "Function word_count not tested",
        "Function char_count not tested",
        "Function is_high_quality not tested",
        "Function generate_id not tested",
        "Function _default_category_for_function not tested",
        "Function add_tag not tested",
        "Function remove_tag not tested",
        "Function has_tag not tested",
        "Function update_quality_score not tested",
        "Function to_dict not tested",
        "Function from_dict not tested",
        "Function similarity_score not tested",
        "Function __iter__ not tested",
        "Function __getitem__ not tested",
        "Function function_counts not tested",
        "Function category_counts not tested",
        "Function average_quality not tested",
        "Function high_quality_examples not tested",
        "Function get_examples_by_function not tested",
        "Function get_examples_by_category not tested",
        "Function get_examples_by_tag not tested",
        "Function filter_by_quality not tested",
        "Function add_example not tested",
        "Function remove_example not tested",
        "Function find_by_id not tested",
        "Function find_duplicates not tested",
        "Function validate_set not tested"
      ]
    },
    "memmimic.cxd.core.interfaces": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/core/interfaces.py",
        "classes": [
          {
            "name": "EmbeddingModel",
            "methods": [
              "encode",
              "encode_batch",
              "dimension",
              "model_name",
              "max_sequence_length",
              "encode_with_metadata",
              "similarity"
            ],
            "line": 29
          },
          {
            "name": "CXDClassifier",
            "methods": [
              "classify",
              "classify_batch",
              "classify_with_metadata",
              "get_performance_stats",
              "classifier_name",
              "supports_batch"
            ],
            "line": 126
          },
          {
            "name": "VectorStore",
            "methods": [
              "add",
              "search",
              "save",
              "load",
              "size",
              "dimension",
              "search_with_metadata",
              "get_metadata",
              "clear",
              "is_empty"
            ],
            "line": 214
          },
          {
            "name": "CanonicalExampleProvider",
            "methods": [
              "load_examples",
              "get_checksum",
              "get_all_examples",
              "get_examples_for_function",
              "get_example_texts",
              "get_examples_by_category",
              "get_high_quality_examples",
              "example_count",
              "function_counts"
            ],
            "line": 333
          },
          {
            "name": "ConfigProvider",
            "methods": [
              "load_config",
              "save_config",
              "get_config_value"
            ],
            "line": 443
          },
          {
            "name": "MetricsCollector",
            "methods": [
              "record_classification",
              "record_error",
              "get_metrics_summary",
              "record_performance_metric"
            ],
            "line": 503
          },
          {
            "name": "CacheProvider",
            "methods": [
              "get",
              "set",
              "delete",
              "clear",
              "get_or_set",
              "size"
            ],
            "line": 564
          },
          {
            "name": "StructuredLogger",
            "methods": [
              "log_classification",
              "log_performance",
              "log_error",
              "log_debug"
            ],
            "line": 648
          }
        ],
        "functions": [
          {
            "name": "encode",
            "line": 39
          },
          {
            "name": "encode_batch",
            "line": 51
          },
          {
            "name": "dimension",
            "line": 64
          },
          {
            "name": "model_name",
            "line": 68
          },
          {
            "name": "max_sequence_length",
            "line": 73
          },
          {
            "name": "encode_with_metadata",
            "line": 77
          },
          {
            "name": "similarity",
            "line": 96
          },
          {
            "name": "classify",
            "line": 136
          },
          {
            "name": "classify_batch",
            "line": 147
          },
          {
            "name": "classify_with_metadata",
            "line": 162
          },
          {
            "name": "get_performance_stats",
            "line": 189
          },
          {
            "name": "classifier_name",
            "line": 198
          },
          {
            "name": "supports_batch",
            "line": 203
          },
          {
            "name": "add",
            "line": 223
          },
          {
            "name": "search",
            "line": 233
          },
          {
            "name": "save",
            "line": 248
          },
          {
            "name": "load",
            "line": 260
          },
          {
            "name": "size",
            "line": 273
          },
          {
            "name": "dimension",
            "line": 278
          },
          {
            "name": "search_with_metadata",
            "line": 281
          },
          {
            "name": "get_metadata",
            "line": 308
          },
          {
            "name": "clear",
            "line": 319
          },
          {
            "name": "is_empty",
            "line": 323
          },
          {
            "name": "load_examples",
            "line": 343
          },
          {
            "name": "get_checksum",
            "line": 352
          },
          {
            "name": "get_all_examples",
            "line": 360
          },
          {
            "name": "get_examples_for_function",
            "line": 373
          },
          {
            "name": "get_example_texts",
            "line": 388
          },
          {
            "name": "get_examples_by_category",
            "line": 398
          },
          {
            "name": "get_high_quality_examples",
            "line": 411
          },
          {
            "name": "example_count",
            "line": 427
          },
          {
            "name": "function_counts",
            "line": 432
          },
          {
            "name": "load_config",
            "line": 452
          },
          {
            "name": "save_config",
            "line": 461
          },
          {
            "name": "get_config_value",
            "line": 472
          },
          {
            "name": "record_classification",
            "line": 512
          },
          {
            "name": "record_error",
            "line": 525
          },
          {
            "name": "get_metrics_summary",
            "line": 538
          },
          {
            "name": "record_performance_metric",
            "line": 546
          },
          {
            "name": "get",
            "line": 573
          },
          {
            "name": "set",
            "line": 585
          },
          {
            "name": "delete",
            "line": 599
          },
          {
            "name": "clear",
            "line": 611
          },
          {
            "name": "get_or_set",
            "line": 619
          },
          {
            "name": "size",
            "line": 638
          },
          {
            "name": "log_classification",
            "line": 657
          },
          {
            "name": "log_performance",
            "line": 675
          },
          {
            "name": "log_error",
            "line": 688
          },
          {
            "name": "log_debug",
            "line": 699
          }
        ],
        "line_count": 721
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_coverage_analysis",
        "test_cxd_integration",
        "security.test_phase1_security_regression",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "EmbeddingModel": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 7,
            "method_coverage": {
              "encode": false,
              "encode_batch": false,
              "dimension": false,
              "model_name": false,
              "max_sequence_length": false,
              "encode_with_metadata": false,
              "similarity": false
            }
          },
          "CXDClassifier": {
            "tested": true,
            "methods_tested": 0,
            "total_methods": 6,
            "method_coverage": {
              "classify": false,
              "classify_batch": false,
              "classify_with_metadata": false,
              "get_performance_stats": false,
              "classifier_name": false,
              "supports_batch": false
            }
          },
          "VectorStore": {
            "tested": false,
            "methods_tested": 4,
            "total_methods": 10,
            "method_coverage": {
              "add": true,
              "search": true,
              "save": false,
              "load": true,
              "size": true,
              "dimension": false,
              "search_with_metadata": false,
              "get_metadata": false,
              "clear": false,
              "is_empty": false
            }
          },
          "CanonicalExampleProvider": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 9,
            "method_coverage": {
              "load_examples": false,
              "get_checksum": false,
              "get_all_examples": false,
              "get_examples_for_function": false,
              "get_example_texts": false,
              "get_examples_by_category": false,
              "get_high_quality_examples": false,
              "example_count": false,
              "function_counts": false
            }
          },
          "ConfigProvider": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 3,
            "method_coverage": {
              "load_config": false,
              "save_config": false,
              "get_config_value": false
            }
          },
          "MetricsCollector": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 4,
            "method_coverage": {
              "record_classification": false,
              "record_error": false,
              "get_metrics_summary": false,
              "record_performance_metric": false
            }
          },
          "CacheProvider": {
            "tested": false,
            "methods_tested": 4,
            "total_methods": 6,
            "method_coverage": {
              "get": true,
              "set": true,
              "delete": true,
              "clear": false,
              "get_or_set": false,
              "size": true
            }
          },
          "StructuredLogger": {
            "tested": false,
            "methods_tested": 0,
            "total_methods": 4,
            "method_coverage": {
              "log_classification": false,
              "log_performance": false,
              "log_error": false,
              "log_debug": false
            }
          }
        },
        "functions": {
          "encode": false,
          "encode_batch": false,
          "dimension": false,
          "model_name": false,
          "max_sequence_length": false,
          "encode_with_metadata": false,
          "similarity": true,
          "classify": true,
          "classify_batch": false,
          "classify_with_metadata": false,
          "get_performance_stats": false,
          "classifier_name": false,
          "supports_batch": false,
          "add": true,
          "search": true,
          "save": true,
          "load": true,
          "size": true,
          "search_with_metadata": false,
          "get_metadata": false,
          "clear": true,
          "is_empty": false,
          "load_examples": false,
          "get_checksum": false,
          "get_all_examples": false,
          "get_examples_for_function": false,
          "get_example_texts": false,
          "get_examples_by_category": false,
          "get_high_quality_examples": false,
          "example_count": false,
          "function_counts": false,
          "load_config": true,
          "save_config": false,
          "get_config_value": false,
          "record_classification": false,
          "record_error": false,
          "get_metrics_summary": false,
          "record_performance_metric": false,
          "get": true,
          "set": true,
          "delete": true,
          "get_or_set": false,
          "log_classification": false,
          "log_performance": false,
          "log_error": false,
          "log_debug": false
        },
        "overall": 0.22807017543859648
      },
      "gaps": [
        "Class EmbeddingModel not tested",
        "Class CXDClassifier methods not tested: ['classify', 'classify_batch', 'classify_with_metadata', 'get_performance_stats', 'classifier_name', 'supports_batch']",
        "Class VectorStore not tested",
        "Class CanonicalExampleProvider not tested",
        "Class ConfigProvider not tested",
        "Class MetricsCollector not tested",
        "Class CacheProvider not tested",
        "Class StructuredLogger not tested",
        "Function encode not tested",
        "Function encode_batch not tested",
        "Function dimension not tested",
        "Function model_name not tested",
        "Function max_sequence_length not tested",
        "Function encode_with_metadata not tested",
        "Function classify_batch not tested",
        "Function classify_with_metadata not tested",
        "Function get_performance_stats not tested",
        "Function classifier_name not tested",
        "Function supports_batch not tested",
        "Function search_with_metadata not tested",
        "Function get_metadata not tested",
        "Function is_empty not tested",
        "Function load_examples not tested",
        "Function get_checksum not tested",
        "Function get_all_examples not tested",
        "Function get_examples_for_function not tested",
        "Function get_example_texts not tested",
        "Function get_examples_by_category not tested",
        "Function get_high_quality_examples not tested",
        "Function example_count not tested",
        "Function function_counts not tested",
        "Function save_config not tested",
        "Function get_config_value not tested",
        "Function record_classification not tested",
        "Function record_error not tested",
        "Function get_metrics_summary not tested",
        "Function record_performance_metric not tested",
        "Function get_or_set not tested",
        "Function log_classification not tested",
        "Function log_performance not tested",
        "Function log_error not tested",
        "Function log_debug not tested"
      ]
    },
    "memmimic.cxd.classifiers.lexical": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/classifiers/lexical.py",
        "classes": [
          {
            "name": "LexicalCXDClassifier",
            "methods": [
              "__init__",
              "_build_patterns",
              "_build_keywords",
              "_build_indicators",
              "classify",
              "_normalize_text",
              "_analyze_function",
              "_create_tags",
              "_update_stats",
              "get_performance_stats",
              "get_pattern_info",
              "explain_classification"
            ],
            "line": 20
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 28
          },
          {
            "name": "_build_patterns",
            "line": 57
          },
          {
            "name": "_build_keywords",
            "line": 242
          },
          {
            "name": "_build_indicators",
            "line": 375
          },
          {
            "name": "classify",
            "line": 449
          },
          {
            "name": "_normalize_text",
            "line": 486
          },
          {
            "name": "_analyze_function",
            "line": 507
          },
          {
            "name": "_create_tags",
            "line": 574
          },
          {
            "name": "_update_stats",
            "line": 617
          },
          {
            "name": "get_performance_stats",
            "line": 627
          },
          {
            "name": "get_pattern_info",
            "line": 665
          },
          {
            "name": "explain_classification",
            "line": 688
          }
        ],
        "line_count": 719
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "LexicalCXDClassifier": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 12,
            "method_coverage": {
              "__init__": true,
              "_build_patterns": false,
              "_build_keywords": false,
              "_build_indicators": false,
              "classify": false,
              "_normalize_text": false,
              "_analyze_function": false,
              "_create_tags": false,
              "_update_stats": false,
              "get_performance_stats": false,
              "get_pattern_info": false,
              "explain_classification": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "_build_patterns": false,
          "_build_keywords": false,
          "_build_indicators": false,
          "classify": true,
          "_normalize_text": false,
          "_analyze_function": false,
          "_create_tags": false,
          "_update_stats": false,
          "get_performance_stats": false,
          "get_pattern_info": false,
          "explain_classification": false
        },
        "overall": 0.15384615384615385
      },
      "gaps": [
        "Class LexicalCXDClassifier not tested",
        "Function _build_patterns not tested",
        "Function _build_keywords not tested",
        "Function _build_indicators not tested",
        "Function _normalize_text not tested",
        "Function _analyze_function not tested",
        "Function _create_tags not tested",
        "Function _update_stats not tested",
        "Function get_performance_stats not tested",
        "Function get_pattern_info not tested",
        "Function explain_classification not tested"
      ]
    },
    "memmimic.cxd.classifiers.semantic": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/classifiers/semantic.py",
        "classes": [
          {
            "name": "SemanticCXDClassifier",
            "methods": [
              "__init__",
              "_create_default_embedding_model",
              "_create_default_example_provider",
              "_create_default_vector_store",
              "_ensure_index_built",
              "_build_index",
              "classify",
              "_aggregate_function_scores",
              "_create_cxd_tags",
              "_update_stats",
              "get_performance_stats",
              "get_similar_examples",
              "explain_classification",
              "rebuild_index",
              "update_examples"
            ],
            "line": 32
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 40
          },
          {
            "name": "_create_default_embedding_model",
            "line": 91
          },
          {
            "name": "_create_default_example_provider",
            "line": 109
          },
          {
            "name": "_create_default_vector_store",
            "line": 120
          },
          {
            "name": "_ensure_index_built",
            "line": 128
          },
          {
            "name": "_build_index",
            "line": 133
          },
          {
            "name": "classify",
            "line": 190
          },
          {
            "name": "_aggregate_function_scores",
            "line": 232
          },
          {
            "name": "_create_cxd_tags",
            "line": 278
          },
          {
            "name": "_update_stats",
            "line": 328
          },
          {
            "name": "get_performance_stats",
            "line": 343
          },
          {
            "name": "get_similar_examples",
            "line": 414
          },
          {
            "name": "explain_classification",
            "line": 454
          },
          {
            "name": "rebuild_index",
            "line": 493
          },
          {
            "name": "update_examples",
            "line": 501
          }
        ],
        "line_count": 515
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "SemanticCXDClassifier": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 15,
            "method_coverage": {
              "__init__": true,
              "_create_default_embedding_model": false,
              "_create_default_example_provider": false,
              "_create_default_vector_store": false,
              "_ensure_index_built": false,
              "_build_index": false,
              "classify": false,
              "_aggregate_function_scores": false,
              "_create_cxd_tags": false,
              "_update_stats": false,
              "get_performance_stats": false,
              "get_similar_examples": false,
              "explain_classification": false,
              "rebuild_index": false,
              "update_examples": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "_create_default_embedding_model": false,
          "_create_default_example_provider": false,
          "_create_default_vector_store": false,
          "_ensure_index_built": false,
          "_build_index": false,
          "classify": true,
          "_aggregate_function_scores": false,
          "_create_cxd_tags": false,
          "_update_stats": false,
          "get_performance_stats": false,
          "get_similar_examples": false,
          "explain_classification": false,
          "rebuild_index": false,
          "update_examples": false
        },
        "overall": 0.125
      },
      "gaps": [
        "Class SemanticCXDClassifier not tested",
        "Function _create_default_embedding_model not tested",
        "Function _create_default_example_provider not tested",
        "Function _create_default_vector_store not tested",
        "Function _ensure_index_built not tested",
        "Function _build_index not tested",
        "Function _aggregate_function_scores not tested",
        "Function _create_cxd_tags not tested",
        "Function _update_stats not tested",
        "Function get_performance_stats not tested",
        "Function get_similar_examples not tested",
        "Function explain_classification not tested",
        "Function rebuild_index not tested",
        "Function update_examples not tested"
      ]
    },
    "memmimic.cxd.classifiers.meta": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/classifiers/meta.py",
        "classes": [
          {
            "name": "MetaCXDClassifier",
            "methods": [
              "__init__",
              "classify",
              "classify_detailed",
              "_analyze_concordance",
              "_resolve_conflicts",
              "_high_concordance_fusion",
              "_low_concordance_fusion",
              "_enhance_lexical_tag",
              "_calculate_sequence_confidence",
              "_update_stats",
              "get_performance_stats",
              "explain_classification",
              "update_config"
            ],
            "line": 27
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 36
          },
          {
            "name": "classify",
            "line": 82
          },
          {
            "name": "classify_detailed",
            "line": 98
          },
          {
            "name": "_analyze_concordance",
            "line": 173
          },
          {
            "name": "_resolve_conflicts",
            "line": 225
          },
          {
            "name": "_high_concordance_fusion",
            "line": 296
          },
          {
            "name": "_low_concordance_fusion",
            "line": 331
          },
          {
            "name": "_enhance_lexical_tag",
            "line": 377
          },
          {
            "name": "_calculate_sequence_confidence",
            "line": 426
          },
          {
            "name": "_update_stats",
            "line": 432
          },
          {
            "name": "get_performance_stats",
            "line": 453
          },
          {
            "name": "explain_classification",
            "line": 516
          },
          {
            "name": "update_config",
            "line": 591
          }
        ],
        "line_count": 616
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "MetaCXDClassifier": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 13,
            "method_coverage": {
              "__init__": true,
              "classify": false,
              "classify_detailed": false,
              "_analyze_concordance": false,
              "_resolve_conflicts": false,
              "_high_concordance_fusion": false,
              "_low_concordance_fusion": false,
              "_enhance_lexical_tag": false,
              "_calculate_sequence_confidence": false,
              "_update_stats": false,
              "get_performance_stats": false,
              "explain_classification": false,
              "update_config": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "classify": true,
          "classify_detailed": false,
          "_analyze_concordance": false,
          "_resolve_conflicts": false,
          "_high_concordance_fusion": false,
          "_low_concordance_fusion": false,
          "_enhance_lexical_tag": false,
          "_calculate_sequence_confidence": false,
          "_update_stats": false,
          "get_performance_stats": false,
          "explain_classification": false,
          "update_config": false
        },
        "overall": 0.21428571428571427
      },
      "gaps": [
        "Class MetaCXDClassifier methods not tested: ['classify', 'classify_detailed', '_analyze_concordance', '_resolve_conflicts', '_high_concordance_fusion', '_low_concordance_fusion', '_enhance_lexical_tag', '_calculate_sequence_confidence', '_update_stats', 'get_performance_stats', 'explain_classification', 'update_config']",
        "Function classify_detailed not tested",
        "Function _analyze_concordance not tested",
        "Function _resolve_conflicts not tested",
        "Function _high_concordance_fusion not tested",
        "Function _low_concordance_fusion not tested",
        "Function _enhance_lexical_tag not tested",
        "Function _calculate_sequence_confidence not tested",
        "Function _update_stats not tested",
        "Function get_performance_stats not tested",
        "Function explain_classification not tested",
        "Function update_config not tested"
      ]
    },
    "memmimic.cxd.classifiers.optimized_semantic": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/classifiers/optimized_semantic.py",
        "classes": [
          {
            "name": "OptimizedSemanticCXDClassifier",
            "methods": [
              "__init__",
              "_create_optimized_embedding_model",
              "_create_optimized_example_provider",
              "_create_optimized_vector_store",
              "_initialize_optimized_index",
              "_load_index_from_cache",
              "_save_index_to_cache",
              "_clear_cache",
              "_build_index",
              "classify",
              "rebuild_index",
              "get_optimization_stats",
              "get_performance_stats",
              "get_cache_info",
              "clear_all_caches",
              "validate_cache_integrity"
            ],
            "line": 22
          }
        ],
        "functions": [
          {
            "name": "__init__",
            "line": 34
          },
          {
            "name": "_create_optimized_embedding_model",
            "line": 99
          },
          {
            "name": "_create_optimized_example_provider",
            "line": 128
          },
          {
            "name": "_create_optimized_vector_store",
            "line": 150
          },
          {
            "name": "_initialize_optimized_index",
            "line": 160
          },
          {
            "name": "_load_index_from_cache",
            "line": 190
          },
          {
            "name": "_save_index_to_cache",
            "line": 250
          },
          {
            "name": "_clear_cache",
            "line": 310
          },
          {
            "name": "_build_index",
            "line": 321
          },
          {
            "name": "classify",
            "line": 341
          },
          {
            "name": "rebuild_index",
            "line": 366
          },
          {
            "name": "get_optimization_stats",
            "line": 384
          },
          {
            "name": "get_performance_stats",
            "line": 388
          },
          {
            "name": "get_cache_info",
            "line": 413
          },
          {
            "name": "clear_all_caches",
            "line": 449
          },
          {
            "name": "validate_cache_integrity",
            "line": 464
          }
        ],
        "line_count": 553
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "OptimizedSemanticCXDClassifier": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 16,
            "method_coverage": {
              "__init__": true,
              "_create_optimized_embedding_model": false,
              "_create_optimized_example_provider": false,
              "_create_optimized_vector_store": false,
              "_initialize_optimized_index": false,
              "_load_index_from_cache": false,
              "_save_index_to_cache": false,
              "_clear_cache": false,
              "_build_index": false,
              "classify": false,
              "rebuild_index": false,
              "get_optimization_stats": false,
              "get_performance_stats": false,
              "get_cache_info": false,
              "clear_all_caches": false,
              "validate_cache_integrity": false
            }
          }
        },
        "functions": {
          "__init__": true,
          "_create_optimized_embedding_model": false,
          "_create_optimized_example_provider": false,
          "_create_optimized_vector_store": false,
          "_initialize_optimized_index": false,
          "_load_index_from_cache": false,
          "_save_index_to_cache": false,
          "_clear_cache": false,
          "_build_index": false,
          "classify": true,
          "rebuild_index": false,
          "get_optimization_stats": false,
          "get_performance_stats": false,
          "get_cache_info": false,
          "clear_all_caches": false,
          "validate_cache_integrity": false
        },
        "overall": 0.11764705882352941
      },
      "gaps": [
        "Class OptimizedSemanticCXDClassifier not tested",
        "Function _create_optimized_embedding_model not tested",
        "Function _create_optimized_example_provider not tested",
        "Function _create_optimized_vector_store not tested",
        "Function _initialize_optimized_index not tested",
        "Function _load_index_from_cache not tested",
        "Function _save_index_to_cache not tested",
        "Function _clear_cache not tested",
        "Function _build_index not tested",
        "Function rebuild_index not tested",
        "Function get_optimization_stats not tested",
        "Function get_performance_stats not tested",
        "Function get_cache_info not tested",
        "Function clear_all_caches not tested",
        "Function validate_cache_integrity not tested"
      ]
    },
    "memmimic.cxd.classifiers.factory": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/classifiers/factory.py",
        "classes": [
          {
            "name": "CXDClassifierFactory",
            "methods": [
              "create"
            ],
            "line": 38
          }
        ],
        "functions": [
          {
            "name": "create",
            "line": 45
          }
        ],
        "line_count": 131
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "CXDClassifierFactory": {
            "tested": false,
            "methods_tested": 1,
            "total_methods": 1,
            "method_coverage": {
              "create": true
            }
          }
        },
        "functions": {
          "create": true
        },
        "overall": 0.5
      },
      "gaps": [
        "Class CXDClassifierFactory not tested"
      ]
    },
    "memmimic.cxd.classifiers.optimized_meta": {
      "source_info": {
        "file_path": "/home/evilbastardxd/Desktop/tools/memmimic/src/memmimic/cxd/classifiers/optimized_meta.py",
        "classes": [
          {
            "name": "OptimizedMetaCXDClassifier",
            "methods": [
              "__init__",
              "get_optimization_stats",
              "get_cache_info",
              "rebuild_semantic_index",
              "clear_all_caches",
              "validate_cache_integrity",
              "get_performance_stats",
              "explain_classification",
              "create_production_classifier",
              "create_development_classifier"
            ],
            "line": 20
          }
        ],
        "functions": [
          {
            "name": "create_optimized_classifier",
            "line": 269
          },
          {
            "name": "create_fast_classifier",
            "line": 285
          },
          {
            "name": "__init__",
            "line": 39
          },
          {
            "name": "get_optimization_stats",
            "line": 89
          },
          {
            "name": "get_cache_info",
            "line": 100
          },
          {
            "name": "rebuild_semantic_index",
            "line": 111
          },
          {
            "name": "clear_all_caches",
            "line": 119
          },
          {
            "name": "validate_cache_integrity",
            "line": 127
          },
          {
            "name": "get_performance_stats",
            "line": 142
          },
          {
            "name": "explain_classification",
            "line": 177
          },
          {
            "name": "create_production_classifier",
            "line": 216
          },
          {
            "name": "create_development_classifier",
            "line": 240
          }
        ],
        "line_count": 318
      },
      "test_files": [
        "test_unified_api",
        "test_amms_critical",
        "test_unified_api_improved",
        "test_cxd_integration",
        "integration.test_modular_architecture_integration",
        "performance.test_phase2_performance_optimization"
      ],
      "test_coverage": {
        "classes": {
          "OptimizedMetaCXDClassifier": {
            "tested": true,
            "methods_tested": 1,
            "total_methods": 10,
            "method_coverage": {
              "__init__": true,
              "get_optimization_stats": false,
              "get_cache_info": false,
              "rebuild_semantic_index": false,
              "clear_all_caches": false,
              "validate_cache_integrity": false,
              "get_performance_stats": false,
              "explain_classification": false,
              "create_production_classifier": false,
              "create_development_classifier": false
            }
          }
        },
        "functions": {
          "create_optimized_classifier": true,
          "create_fast_classifier": false,
          "__init__": true,
          "get_optimization_stats": false,
          "get_cache_info": false,
          "rebuild_semantic_index": false,
          "clear_all_caches": false,
          "validate_cache_integrity": false,
          "get_performance_stats": false,
          "explain_classification": false,
          "create_production_classifier": false,
          "create_development_classifier": false
        },
        "overall": 0.23076923076923078
      },
      "gaps": [
        "Class OptimizedMetaCXDClassifier methods not tested: ['get_optimization_stats', 'get_cache_info', 'rebuild_semantic_index', 'clear_all_caches', 'validate_cache_integrity', 'get_performance_stats', 'explain_classification', 'create_production_classifier', 'create_development_classifier']",
        "Function create_fast_classifier not tested",
        "Function get_optimization_stats not tested",
        "Function get_cache_info not tested",
        "Function rebuild_semantic_index not tested",
        "Function clear_all_caches not tested",
        "Function validate_cache_integrity not tested",
        "Function get_performance_stats not tested",
        "Function explain_classification not tested",
        "Function create_production_classifier not tested",
        "Function create_development_classifier not tested"
      ]
    }
  },
  "recommendations": [
    "Overall coverage 28.1% is below 95% target. Need 66.9% improvement.",
    "Phase 1 (Security) coverage 25.3% needs improvement",
    "Phase 2 (Performance) coverage 40.4% needs improvement"
  ]
}